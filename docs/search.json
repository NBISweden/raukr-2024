[
  {
    "objectID": "slides/tidyverse/index.html#learning-outcomes",
    "href": "slides/tidyverse/index.html#learning-outcomes",
    "title": "Tidy work in Tidyverse",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nWhen this module is complete, you will:\n\nknow what tidyverse is and a bit about its history\nbe able to use different pipes, including advanced ones and placeholders\nknow whether the data you work with are tidy\nwill be able to load, debug and tidy your data\nunderstand how to combine data sets using join_*\nbe aware of useful packages within tidyverse"
  },
  {
    "objectID": "slides/tidyverse/index.html#tidyverse-what-is-it-all-about",
    "href": "slides/tidyverse/index.html#tidyverse-what-is-it-all-about",
    "title": "Tidy work in Tidyverse",
    "section": "Tidyverse — what is it all about?",
    "text": "Tidyverse — what is it all about?\n\ntidyverse is a collection of packages 📦,\ncreated by Hadley Wickham,\nhas became a de facto standard in data analyses,\na philosophy of programming or a programming paradigm: everything is about 🌊 the flow of 🧹 tidy data.\n\n\n  \n\n\n\nImages: www.tidyverse.org, Wikipedia, www.tidyverse.org"
  },
  {
    "objectID": "slides/tidyverse/index.html#tidyverse-or-tidyverse",
    "href": "slides/tidyverse/index.html#tidyverse-or-tidyverse",
    "title": "Tidy work in Tidyverse",
    "section": "?(Tidyverse OR !Tidyverse)",
    "text": "?(Tidyverse OR !Tidyverse)\n\n\n\n\n\n\nWarning\n\n\n☠️ There are still some people out there talking about the tidyverse curse though… ☠️\n\n\n\n\n\nNavigating the balance between base R and the tidyverse is a challenge to learn.\n- Robert A. Muenchen"
  },
  {
    "objectID": "slides/tidyverse/index.html#typical-tidyverse-workflow",
    "href": "slides/tidyverse/index.html#typical-tidyverse-workflow",
    "title": "Tidy work in Tidyverse",
    "section": "Typical Tidyverse Workflow",
    "text": "Typical Tidyverse Workflow\n\nSource: http://www.storybench.org/getting-started-with-tidyverse-in-r/"
  },
  {
    "objectID": "slides/tidyverse/index.html#introduction-to-pipes-or-let-my-data-flow",
    "href": "slides/tidyverse/index.html#introduction-to-pipes-or-let-my-data-flow",
    "title": "Tidy work in Tidyverse",
    "section": "Introduction to Pipes or Let My Data Flow 🌊",
    "text": "Introduction to Pipes or Let My Data Flow 🌊\n\n\n\nRene Magritt, La trahison des images, Wikimedia Commons\n\n\n\n\nmagrittr package — tidyverse and beyond \nthe %&gt;% pipe \n\nx %&gt;% f \\(\\equiv\\) f(x) \nx %&gt;% f(y) \\(\\equiv\\) f(x, y) \nx %&gt;% f %&gt;% g %&gt;% h \\(\\equiv\\) h(g(f(x)))"
  },
  {
    "objectID": "slides/tidyverse/index.html#introduction-to-pipes",
    "href": "slides/tidyverse/index.html#introduction-to-pipes",
    "title": "Tidy work in Tidyverse",
    "section": "Introduction to Pipes",
    "text": "Introduction to Pipes\nInstead of writing this:\n\nresult &lt;- head(iris, n=3)\n\nwrite this:\n\niris %&gt;% head(n=3)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa"
  },
  {
    "objectID": "slides/tidyverse/index.html#other-types-of-pipes-t",
    "href": "slides/tidyverse/index.html#other-types-of-pipes-t",
    "title": "Tidy work in Tidyverse",
    "section": "Other Types of Pipes — %T>%",
    "text": "Other Types of Pipes — %T&gt;%\n\nProvided by magritter, not in tidyverse\nWhen you call a function for its side effects\n\n\nrnorm(50) %&gt;% \n  matrix(ncol = 2) %&gt;% \n  plot() %&gt;% \n  summary()\n\n\nLength  Class   Mode \n     0   NULL   NULL"
  },
  {
    "objectID": "slides/tidyverse/index.html#other-types-of-pipes-t-1",
    "href": "slides/tidyverse/index.html#other-types-of-pipes-t-1",
    "title": "Tidy work in Tidyverse",
    "section": "Other Types of Pipes — %T>%",
    "text": "Other Types of Pipes — %T&gt;%\n\n\n\n\nrnorm(50) %&gt;% \n  matrix(ncol = 2) %T&gt;% \n  plot() %&gt;% \n  summary()\n\n\n\n\n\n\n\n\n\n\n\n       V1                 V2         \n Min.   :-1.96634   Min.   :-1.9385  \n 1st Qu.:-0.60982   1st Qu.:-0.4539  \n Median : 0.22170   Median : 0.4114  \n Mean   : 0.07356   Mean   : 0.2631  \n 3rd Qu.: 0.79662   3rd Qu.: 0.8496  \n Max.   : 2.17988   Max.   : 2.6664"
  },
  {
    "objectID": "slides/tidyverse/index.html#other-types-of-magrittr-pipes",
    "href": "slides/tidyverse/index.html#other-types-of-magrittr-pipes",
    "title": "Tidy work in Tidyverse",
    "section": "Other Types of magrittr Pipes — %$%",
    "text": "Other Types of magrittr Pipes — %$%\n\niris %&gt;% cor(Sepal.Length, Sepal.Width)\n\nError: object 'Sepal.Width' not found\n\n\n\n\nWe need the %$% pipe with exposition of variables:\n\niris %$% cor(Sepal.Length, Sepal.Width)\n\n[1] -0.1175698\n\n\n\n\nThis is because cor function does not have the x (data) argument – the very first argument of a pipe-friendly function."
  },
  {
    "objectID": "slides/tidyverse/index.html#other-types-of-magrittr-pipes-1",
    "href": "slides/tidyverse/index.html#other-types-of-magrittr-pipes-1",
    "title": "Tidy work in Tidyverse",
    "section": "Other Types of magrittr Pipes — %<>%",
    "text": "Other Types of magrittr Pipes — %&lt;&gt;%\nIt exists but can lead to somewhat confusing code! 💀\nx %&lt;&gt;% f \\(\\equiv\\) x &lt;- f(x)\n\nM &lt;- matrix(rnorm(16), nrow=4); M %&lt;&gt;% colSums(); M\n\n[1] -3.598298 -1.504174 -0.698766 -2.299898"
  },
  {
    "objectID": "slides/tidyverse/index.html#native-r-pipe",
    "href": "slides/tidyverse/index.html#native-r-pipe",
    "title": "Tidy work in Tidyverse",
    "section": "Native R pipe",
    "text": "Native R pipe\nFrom R &gt;= 4.1.0 we have a native |&gt; pipe that is a bit faster than %&gt;% but currently has no placeholders mechanism.\n\nc(1,2,3,4,5) |&gt; mean()\n\n[1] 3\n\n\n\n\neven simple placeholder _ is available now. But 💀 only for named arguments.\n\nmtcars |&gt; lm(mpg ~ disp, data = _)\n\n\nCall:\nlm(formula = mpg ~ disp, data = mtcars)\n\nCoefficients:\n(Intercept)         disp  \n   29.59985     -0.04122"
  },
  {
    "objectID": "slides/tidyverse/index.html#placeholders-in-magrittr-pipes",
    "href": "slides/tidyverse/index.html#placeholders-in-magrittr-pipes",
    "title": "Tidy work in Tidyverse",
    "section": "Placeholders in magrittr Pipes",
    "text": "Placeholders in magrittr Pipes\nSometimes we want to pass the resulting data to other than the first argument of the next function in chain. magritter provides placeholder mechanism for this:\n\nx %&gt;% f(y, .) \\(\\equiv\\) f(y, x),\nx %&gt;% f(y, z = .) \\(\\equiv\\) f(y, z = x).\n\n\n\nM &lt;- rnorm(4) %&gt;% matrix(nrow = 2)\nM %&gt;% `%*%`(., .)\n\n            [,1]       [,2]\n[1,] -0.04176768  0.2417154\n[2,] -2.44204176 -0.3047041"
  },
  {
    "objectID": "slides/tidyverse/index.html#placeholders-for-nested-expressions",
    "href": "slides/tidyverse/index.html#placeholders-for-nested-expressions",
    "title": "Tidy work in Tidyverse",
    "section": "Placeholders for nested expressions",
    "text": "Placeholders for nested expressions\nBut for nested expressions:\n\nx %&gt;% f(a = p(.), b = q(.)) \\(\\equiv\\) f(x, a = p(x), b = q(x))\n\n\n\nx %&gt;% {f(a = p(.), b = q(.))} \\(\\equiv\\) f(a = p(x), b = q(x))\n\n\n\n\nprint_M_summ &lt;- function(nrow, ncol) paste0('Matrix M has: ', nrow, ' rows and ', ncol, ' cols.')\nM %&gt;% {print_M_summ(nrow(.), ncol(.))}\n\n[1] \"Matrix M has: 2 rows and 2 cols.\""
  },
  {
    "objectID": "slides/tidyverse/index.html#placeholders-unary-functions",
    "href": "slides/tidyverse/index.html#placeholders-unary-functions",
    "title": "Tidy work in Tidyverse",
    "section": "Placeholders – unary functions",
    "text": "Placeholders – unary functions\nWe can even use placeholders as the first element of a pipe:\n\nf &lt;- . %&gt;% sin %&gt;% cos\nf\n\nFunctional sequence with the following components:\n\n 1. sin(.)\n 2. cos(.)\n\nUse 'functions' to extract the individual functions. \n\n\nand, indeed the f function works:\n\n7 %&gt;% f\n\n[1] 0.7918362"
  },
  {
    "objectID": "slides/tidyverse/index.html#time-to-do-lab-1.1",
    "href": "slides/tidyverse/index.html#time-to-do-lab-1.1",
    "title": "Tidy work in Tidyverse",
    "section": "Time to do Lab 1.1",
    "text": "Time to do Lab 1.1"
  },
  {
    "objectID": "slides/tidyverse/index.html#tibbles",
    "href": "slides/tidyverse/index.html#tibbles",
    "title": "Tidy work in Tidyverse",
    "section": "Tibbles",
    "text": "Tibbles\n\n\n\n\n\ntibble is one of the unifying features of tidyverse, \nit is a better data.frame realization, \nobjects data.frame can be coerced to tibble using as_tibble()"
  },
  {
    "objectID": "slides/tidyverse/index.html#convert-data.frame-to-tibble",
    "href": "slides/tidyverse/index.html#convert-data.frame-to-tibble",
    "title": "Tidy work in Tidyverse",
    "section": "Convert data.frame to tibble",
    "text": "Convert data.frame to tibble\n\nas_tibble(iris)\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows"
  },
  {
    "objectID": "slides/tidyverse/index.html#tibbles-from-scratch-with-tibble",
    "href": "slides/tidyverse/index.html#tibbles-from-scratch-with-tibble",
    "title": "Tidy work in Tidyverse",
    "section": "Tibbles from scratch with tibble",
    "text": "Tibbles from scratch with tibble\n\n  tibble(\n    x = 1,          # recycling\n    y = runif(50), \n    z = x + y^2,\n    outcome = rnorm(50)\n  )\n\n# A tibble: 50 × 4\n       x      y     z outcome\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1     1 0.568   1.32  -0.953\n 2     1 0.140   1.02  -0.267\n 3     1 0.669   1.45  -0.291\n 4     1 0.267   1.07  -0.439\n 5     1 0.533   1.28  -0.490\n 6     1 0.483   1.23   0.851\n 7     1 0.129   1.02  -0.782\n 8     1 0.798   1.64  -0.520\n 9     1 0.946   1.89   0.223\n10     1 0.0507  1.00  -0.269\n# ℹ 40 more rows"
  },
  {
    "objectID": "slides/tidyverse/index.html#more-on-tibbles",
    "href": "slides/tidyverse/index.html#more-on-tibbles",
    "title": "Tidy work in Tidyverse",
    "section": "More on Tibbles",
    "text": "More on Tibbles\n\nWhen you print a tibble:\n\nall columns that fit the screen are shown,\nonly the first 10 rows are shown,\ndata type for each column is shown.\n\n\n\nas_tibble(cars)\n\n# A tibble: 50 × 2\n   speed  dist\n   &lt;dbl&gt; &lt;dbl&gt;\n 1     4     2\n 2     4    10\n 3     7     4\n 4     7    22\n 5     8    16\n 6     9    10\n 7    10    18\n 8    10    26\n 9    10    34\n10    11    17\n# ℹ 40 more rows"
  },
  {
    "objectID": "slides/tidyverse/index.html#tibble-printing-options",
    "href": "slides/tidyverse/index.html#tibble-printing-options",
    "title": "Tidy work in Tidyverse",
    "section": "Tibble printing options",
    "text": "Tibble printing options\n\nmy_tibble %&gt;% print(n = 50, width = Inf),\noptions(tibble.print_min = 15, tibble.print_max = 25),\noptions(dplyr.print_min = Inf),\noptions(tibble.width = Inf)"
  },
  {
    "objectID": "slides/tidyverse/index.html#subsetting-tibbles",
    "href": "slides/tidyverse/index.html#subsetting-tibbles",
    "title": "Tidy work in Tidyverse",
    "section": "Subsetting Tibbles",
    "text": "Subsetting Tibbles\nvehicles will be our tibble version of cars\n\nvehicles &lt;- as_tibble(cars[1:5,])\n\n\nWe can access data like this:\n\nvehicles[['speed']]\nvehicles[[1]]\nvehicles$speed\n\n[1] 4 4 7 7 8\n[1] 4 4 7 7 8\n[1] 4 4 7 7 8\n\n\n\n\nOr, alternatively, using placeholders:\n\nvehicles %&gt;% .$speed\nvehicles %&gt;% .[['speed']]\nvehicles %&gt;% .[[1]]\n\n\n\nNote! Not all old R functions work with tibbles, than you have to use as.data.frame(my_tibble)."
  },
  {
    "objectID": "slides/tidyverse/index.html#partial-matching",
    "href": "slides/tidyverse/index.html#partial-matching",
    "title": "Tidy work in Tidyverse",
    "section": "Partial Matching",
    "text": "Partial Matching\n\ncars &lt;- cars[1:5,]; colnames(vehicles)\n\n[1] \"speed\" \"dist\" \n\n\n\n\n\ncars$spe      # partial matching\n\n[1] 4 4 7 7 8\n\n\n\n\n\n\nvehicles$spe  # no partial matching\n\nWarning: Unknown or uninitialised column: `spe`.\n\n\nNULL"
  },
  {
    "objectID": "slides/tidyverse/index.html#non-existing-columns",
    "href": "slides/tidyverse/index.html#non-existing-columns",
    "title": "Tidy work in Tidyverse",
    "section": "Non-existing Columns",
    "text": "Non-existing Columns\n\ncars$gear\n\nNULL\n\n\n\n\n\nvehicles$gear\n\nWarning: Unknown or uninitialised column: `gear`.\n\n\nNULL"
  },
  {
    "objectID": "slides/tidyverse/index.html#time-to-do-lab-1.2",
    "href": "slides/tidyverse/index.html#time-to-do-lab-1.2",
    "title": "Tidy work in Tidyverse",
    "section": "Time to do Lab 1.2",
    "text": "Time to do Lab 1.2"
  },
  {
    "objectID": "slides/tidyverse/index.html#loading-data",
    "href": "slides/tidyverse/index.html#loading-data",
    "title": "Tidy work in Tidyverse",
    "section": "Loading Data",
    "text": "Loading Data\nIn tidyverse you import data using readr package that provides a number of useful data import functions:\n\nread_delim() a generic function for reading x-delimited files. There are a number of convenience wrappers:\n\nread_csv() used to read comma-delimited files,\nread_csv2() reads semicolon-delimited files, read_tsv() that reads tab-delimited files.\n\nread_fwf for reading fixed-width files with its wrappers:\n\nfwf_widths() for width-based reading,\nfwf_positions() for positions-based reading and\nread_table() for reading white space-delimited fixed-width files.\n\nread_log() for reading Apache-style logs."
  },
  {
    "objectID": "slides/tidyverse/index.html#loading-data-1",
    "href": "slides/tidyverse/index.html#loading-data-1",
    "title": "Tidy work in Tidyverse",
    "section": "Loading Data",
    "text": "Loading Data\nThe most commonly used read_csv() has some familiar arguments like:\n\nskip – to specify the number of rows to skip (headers),\ncol_names – to supply a vector of column names,\ncomment – to specify what character designates a comment,\nna – to specify how missing values are represented."
  },
  {
    "objectID": "slides/tidyverse/index.html#under-the-hood-parse_-functions",
    "href": "slides/tidyverse/index.html#under-the-hood-parse_-functions",
    "title": "Tidy work in Tidyverse",
    "section": "Under the Hood – parse_* Functions",
    "text": "Under the Hood – parse_* Functions\nUnder the hood, data-reading functions use parse_* functions:\n\nparse_double(\"42.24\")\n\n[1] 42.24\n\n\n\nparse_number(\"272'555'849,55\", \n             locale = locale(decimal_mark = \",\", \n                             grouping_mark = \"'\"\n                            )\n             )\n\n[1] 272555850\n\n\n\nparse_number(c('100%', 'price: 500$', '21sek', '42F'))\n\n[1] 100 500  21  42"
  },
  {
    "objectID": "slides/tidyverse/index.html#parsing-strings",
    "href": "slides/tidyverse/index.html#parsing-strings",
    "title": "Tidy work in Tidyverse",
    "section": "Parsing Strings",
    "text": "Parsing Strings\n\nStrings can be represented in different encodings:\n\n\ntext1 &lt;- 'På en ö är en å'\ntext2 &lt;- 'Zażółć gęślą jaźń'\n\n\ncharToRaw(text2)\nparse_character(text1, locale = locale(encoding = 'UTF-8'))\nguess_encoding(charToRaw(\"Test\"))\nguess_encoding(charToRaw(text2))"
  },
  {
    "objectID": "slides/tidyverse/index.html#parsing-factors",
    "href": "slides/tidyverse/index.html#parsing-factors",
    "title": "Tidy work in Tidyverse",
    "section": "Parsing Factors",
    "text": "Parsing Factors\n\nR is using factors to represent categorical variables.\nSupply known levels to parse_factor so that it warns you when an unknown level is present in the data:\n\n\nlandscapes &lt;- c('mountains', 'swamps', 'seaside')\nparse_factor(c('mountains', 'plains', 'seaside', 'swamps'), \n             levels = landscapes)\n\n[1] mountains &lt;NA&gt;      seaside   swamps   \nattr(,\"problems\")\n# A tibble: 1 × 4\n    row   col expected           actual\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;              &lt;chr&gt; \n1     2    NA value in level set plains\nLevels: mountains swamps seaside"
  },
  {
    "objectID": "slides/tidyverse/index.html#other-parsing-functions",
    "href": "slides/tidyverse/index.html#other-parsing-functions",
    "title": "Tidy work in Tidyverse",
    "section": "Other Parsing Functions",
    "text": "Other Parsing Functions\nparse_\n\nvector, time, number, logical, integer, double, character, date, datetime,\nguess\n\n\nguess_parser(\"2018-06-11 09:00:00\")\nparse_guess(\"2018-06-11 09:00:00\")\n\nguess_parser(c(1, 2.3, \"23$\", \"54%\"))\nparse_guess(c(1, 2.3, \"23$\", \"54%\"))\n\n[1] \"datetime\"\n[1] \"2018-06-11 09:00:00 UTC\"\n[1] \"character\"\n[1] \"1\"   \"2.3\" \"23$\" \"54%\""
  },
  {
    "objectID": "slides/tidyverse/index.html#writing-to-a-file",
    "href": "slides/tidyverse/index.html#writing-to-a-file",
    "title": "Tidy work in Tidyverse",
    "section": "Writing to a File",
    "text": "Writing to a File\nThe readr package also provides functions useful for writing tibbled data into a file:\n\nwrite_csv()\nwrite_tsv()\nwrite_excel_csv()\n\nThey always save:\n\nText in UTF-8,\nDates in ISO8601\n\nBut saving in csv (or tsv) does mean you loose information about the type of data in particular columns. You can avoid this by using:\n\nwrite_rds() and read_rds() to read/write objects in R binary rds format,\nTse write_feather() and read_feather() from package feather to read/write objects in a fast binary format that other programming languages can access."
  },
  {
    "objectID": "slides/tidyverse/index.html#time-to-do-lab-1.3",
    "href": "slides/tidyverse/index.html#time-to-do-lab-1.3",
    "title": "Tidy work in Tidyverse",
    "section": "Time to do Lab 1.3",
    "text": "Time to do Lab 1.3"
  },
  {
    "objectID": "slides/tidyverse/index.html#basic-data-transformations-with-dplyr",
    "href": "slides/tidyverse/index.html#basic-data-transformations-with-dplyr",
    "title": "Tidy work in Tidyverse",
    "section": "Basic Data Transformations with dplyr",
    "text": "Basic Data Transformations with dplyr\nLet us create a tibble:\n\nbijou &lt;- as_tibble(diamonds) %&gt;% head()\nbijou[1:5,]\n\n# A tibble: 5 × 10\n  carat cut     color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good    E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good    J     SI2      63.3    58   335  4.34  4.35  2.75"
  },
  {
    "objectID": "slides/tidyverse/index.html#picking-observations-using-filter",
    "href": "slides/tidyverse/index.html#picking-observations-using-filter",
    "title": "Tidy work in Tidyverse",
    "section": "Picking Observations using filter()",
    "text": "Picking Observations using filter()\n\nbijou %&gt;% filter(cut == 'Ideal' | cut == 'Premium', carat &gt;= 0.23) %&gt;% head()\n\n# A tibble: 2 × 10\n  carat cut     color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63"
  },
  {
    "objectID": "slides/tidyverse/index.html#floating-point-and-tidyverse",
    "href": "slides/tidyverse/index.html#floating-point-and-tidyverse",
    "title": "Tidy work in Tidyverse",
    "section": "Floating point and tidyverse",
    "text": "Floating point and tidyverse\n\n\n\n\n\n\nCaution\n\n\n🚣 Be careful with floating point comparisons!\n🦜 Also, rows with comparison resulting in NA are skipped by default!\n\n\n\n\n\nbijou %&gt;% filter(near(0.23, carat) | is.na(carat)) %&gt;% head(n = 4)\n\n# A tibble: 2 × 10\n  carat cut   color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.23 Good  E     VS1      56.9    65   327  4.05  4.07  2.31"
  },
  {
    "objectID": "slides/tidyverse/index.html#rearranging-observations-using-arrange",
    "href": "slides/tidyverse/index.html#rearranging-observations-using-arrange",
    "title": "Tidy work in Tidyverse",
    "section": "Rearranging Observations using arrange()",
    "text": "Rearranging Observations using arrange()\n\nbijou %&gt;% arrange(cut, carat, desc(price))\n\n\n\n\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n2  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n3  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n4  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n5  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n6  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n\n\n\n\n\n\n\n\nCaution\n\n\nThe NAs always end up at the end of the rearranged tibble."
  },
  {
    "objectID": "slides/tidyverse/index.html#selecting-variables-with-select",
    "href": "slides/tidyverse/index.html#selecting-variables-with-select",
    "title": "Tidy work in Tidyverse",
    "section": "Selecting Variables with select()",
    "text": "Selecting Variables with select()\n\nSimple rangeExclusion\n\n\n\nbijou %&gt;% select(color, clarity, x:z) %&gt;% head(n = 4)\n\n# A tibble: 4 × 5\n  color clarity     x     y     z\n  &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 E     SI2      3.95  3.98  2.43\n2 E     SI1      3.89  3.84  2.31\n3 E     VS1      4.05  4.07  2.31\n4 I     VS2      4.2   4.23  2.63\n\n\n\n\n\nbijou %&gt;% select(-(x:z)) %&gt;% head(n = 5)\n\n# A tibble: 5 × 7\n  carat cut     color clarity depth table price\n  &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1  0.23 Ideal   E     SI2      61.5    55   326\n2  0.21 Premium E     SI1      59.8    61   326\n3  0.23 Good    E     VS1      56.9    65   327\n4  0.29 Premium I     VS2      62.4    58   334\n5  0.31 Good    J     SI2      63.3    58   335"
  },
  {
    "objectID": "slides/tidyverse/index.html#renaming-variables",
    "href": "slides/tidyverse/index.html#renaming-variables",
    "title": "Tidy work in Tidyverse",
    "section": "Renaming variables",
    "text": "Renaming variables\n\n\n\n\n\n\nNote\n\n\nrename is a variant of select, here used with everything() to move x to the beginning and rename it to var_x\n\n\n\n\nbijou %&gt;% rename(var_x = x) %&gt;% head(n = 2)\n\n\n\n\n# A tibble: 2 × 10\n  carat cut     color clarity depth table price var_x     y     z\n  &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31"
  },
  {
    "objectID": "slides/tidyverse/index.html#bring-columns-to-front",
    "href": "slides/tidyverse/index.html#bring-columns-to-front",
    "title": "Tidy work in Tidyverse",
    "section": "Bring columns to front",
    "text": "Bring columns to front\n\n\n\n\n\n\nTip\n\n\nuse everything() to bring some columns to the front\n\n\n\n\nbijou %&gt;% select(x:z, everything()) %&gt;% head(n = 2)\n\n\n\n\n# A tibble: 2 × 10\n      x     y     z carat cut     color clarity depth table price\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1  3.95  3.98  2.43  0.23 Ideal   E     SI2      61.5    55   326\n2  3.89  3.84  2.31  0.21 Premium E     SI1      59.8    61   326"
  },
  {
    "objectID": "slides/tidyverse/index.html#createalter-new-variables-with-mutate",
    "href": "slides/tidyverse/index.html#createalter-new-variables-with-mutate",
    "title": "Tidy work in Tidyverse",
    "section": "Create/alter new Variables with mutate",
    "text": "Create/alter new Variables with mutate\n\nbijou %&gt;% \n  mutate(p = x + z, q = p + y) %&gt;% \n  select(-(depth:price)) %&gt;% \n  head(n = 5)\n\n\n\n\n# A tibble: 5 × 9\n  carat cut     color clarity     x     y     z     p     q\n  &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal   E     SI2      3.95  3.98  2.43  6.38  10.4\n2  0.21 Premium E     SI1      3.89  3.84  2.31  6.2   10.0\n3  0.23 Good    E     VS1      4.05  4.07  2.31  6.36  10.4\n4  0.29 Premium I     VS2      4.2   4.23  2.63  6.83  11.1\n5  0.31 Good    J     SI2      4.34  4.35  2.75  7.09  11.4"
  },
  {
    "objectID": "slides/tidyverse/index.html#createalter-new-variables-with-transmute",
    "href": "slides/tidyverse/index.html#createalter-new-variables-with-transmute",
    "title": "Tidy work in Tidyverse",
    "section": "Create/alter new Variables with transmute 🧙‍♂️",
    "text": "Create/alter new Variables with transmute 🧙‍♂️\n\n\n\n\n\n\nCaution\n\n\nOnly the transformed variables will be retained.\n\n\n\n\nbijou %&gt;% transmute(carat, cut, sum = x + y + z) %&gt;% head(n = 5)\n\n# A tibble: 5 × 3\n  carat cut       sum\n  &lt;dbl&gt; &lt;ord&gt;   &lt;dbl&gt;\n1  0.23 Ideal    10.4\n2  0.21 Premium  10.0\n3  0.23 Good     10.4\n4  0.29 Premium  11.1\n5  0.31 Good     11.4"
  },
  {
    "objectID": "slides/tidyverse/index.html#group-and-summarize",
    "href": "slides/tidyverse/index.html#group-and-summarize",
    "title": "Tidy work in Tidyverse",
    "section": "Group and Summarize",
    "text": "Group and Summarize\n\nSimpleMore complex\n\n\n\nbijou %&gt;% group_by(cut) %&gt;% summarize(max_price = max(price),\n                                      mean_price = mean(price),\n                                      min_price = min(price))\n\n# A tibble: 4 × 4\n  cut       max_price mean_price min_price\n  &lt;ord&gt;         &lt;int&gt;      &lt;dbl&gt;     &lt;int&gt;\n1 Good            335        331       327\n2 Very Good       336        336       336\n3 Premium         334        330       326\n4 Ideal           326        326       326\n\n\n\n\n\nbijou %&gt;% group_by(cut, color) %&gt;%  summarize(max_price = max(price), \n                                              mean_price = mean(price), \n                                              min_price = min(price)) %&gt;% head(n = 5)\n\n# A tibble: 5 × 5\n# Groups:   cut [3]\n  cut       color max_price mean_price min_price\n  &lt;ord&gt;     &lt;ord&gt;     &lt;int&gt;      &lt;dbl&gt;     &lt;int&gt;\n1 Good      E           327        327       327\n2 Good      J           335        335       335\n3 Very Good J           336        336       336\n4 Premium   E           326        326       326\n5 Premium   I           334        334       334"
  },
  {
    "objectID": "slides/tidyverse/index.html#other-data-manipulation-tips",
    "href": "slides/tidyverse/index.html#other-data-manipulation-tips",
    "title": "Tidy work in Tidyverse",
    "section": "Other data manipulation tips",
    "text": "Other data manipulation tips\n\nbijou %&gt;% group_by(cut) %&gt;% summarize(count = n())\n\n# A tibble: 4 × 2\n  cut       count\n  &lt;ord&gt;     &lt;int&gt;\n1 Good          2\n2 Very Good     1\n3 Premium       2\n4 Ideal         1\n\n\n\nWhen you need to regroup within the same pipe, use ungroup()."
  },
  {
    "objectID": "slides/tidyverse/index.html#the-concept-of-tidy-data",
    "href": "slides/tidyverse/index.html#the-concept-of-tidy-data",
    "title": "Tidy work in Tidyverse",
    "section": "The Concept of Tidy Data",
    "text": "The Concept of Tidy Data\n\nEach and every observation is represented as exactly one row,\nEach and every variable is represented by exactly one column,\nThus each data table cell contains only one value.\n\n\nUsually data are untidy in only one way. However, if you are unlucky, they are really untidy and thus a pain to work with…"
  },
  {
    "objectID": "slides/tidyverse/index.html#tidy-data",
    "href": "slides/tidyverse/index.html#tidy-data",
    "title": "Tidy work in Tidyverse",
    "section": "Tidy Data",
    "text": "Tidy Data\n\n\nAre these data tidy?\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nvariable\nvalue\n\n\n\n\nsetosa\nSepal.Length\n5.1\n\n\nsetosa\nSepal.Length\n4.9\n\n\nsetosa\nSepal.Length\n4.7"
  },
  {
    "objectID": "slides/tidyverse/index.html#tidy-data-1",
    "href": "slides/tidyverse/index.html#tidy-data-1",
    "title": "Tidy work in Tidyverse",
    "section": "Tidy Data",
    "text": "Tidy Data\n\nAre these data tidy?\n\n\n\n\n\n\nSepal.L.W\nPetal.L.W\nSpecies\n\n\n\n\n5.1/3.5\n1.4/0.2\nsetosa\n\n\n4.9/3\n1.4/0.2\nsetosa\n\n\n4.7/3.2\n1.3/0.2\nsetosa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Length\n5.1\n4.9\n4.7\n4.6\n\n\nSepal.Width\n3.5\n3.0\n3.2\n3.1\n\n\nPetal.Length\n1.4\n1.4\n1.3\n1.5\n\n\nPetal.Width\n0.2\n0.2\n0.2\n0.2\n\n\nSpecies\nsetosa\nsetosa\nsetosa\nsetosa"
  },
  {
    "objectID": "slides/tidyverse/index.html#tidying-data-with-pivot_longer",
    "href": "slides/tidyverse/index.html#tidying-data-with-pivot_longer",
    "title": "Tidy work in Tidyverse",
    "section": "Tidying Data with pivot_longer",
    "text": "Tidying Data with pivot_longer\nIf some of your column names should be values of a variable, use pivot_longer (old gather):\n\n\n\nbijou2 %&gt;% head(n = 5)\n\n# A tibble: 5 × 3\n  cut     `2008` `2009`\n  &lt;ord&gt;    &lt;int&gt;  &lt;dbl&gt;\n1 Ideal      326    328\n2 Premium    326    328\n3 Good       327    329\n4 Premium    334    336\n5 Good       335    337\n\n\n\n\nbijou2 %&gt;% \n  pivot_longer(cols = c(`2008`, `2009`), names_to = 'year', values_to = 'price') %&gt;% \n  head(n = 5)\n\n# A tibble: 5 × 3\n  cut     year  price\n  &lt;ord&gt;   &lt;chr&gt; &lt;dbl&gt;\n1 Ideal   2008    326\n2 Ideal   2009    328\n3 Premium 2008    326\n4 Premium 2009    328\n5 Good    2008    327"
  },
  {
    "objectID": "slides/tidyverse/index.html#tidying-data-with-pivot_wider",
    "href": "slides/tidyverse/index.html#tidying-data-with-pivot_wider",
    "title": "Tidy work in Tidyverse",
    "section": "Tidying Data with pivot_wider",
    "text": "Tidying Data with pivot_wider\nIf some of your observations are scattered across many rows, use pivot_wider (old spread):\n\n\n\nbijou3\n\n# A tibble: 9 × 5\n  cut     price clarity dimension measurement\n  &lt;ord&gt;   &lt;int&gt; &lt;ord&gt;   &lt;chr&gt;           &lt;dbl&gt;\n1 Ideal     326 SI2     x                3.95\n2 Premium   326 SI1     x                3.89\n3 Good      327 VS1     x                4.05\n4 Ideal     326 SI2     y                3.98\n5 Premium   326 SI1     y                3.84\n6 Good      327 VS1     y                4.07\n7 Ideal     326 SI2     z                2.43\n8 Premium   326 SI1     z                2.31\n9 Good      327 VS1     z                2.31\n\n\n\n\nbijou3 %&gt;% \n  pivot_wider(names_from = dimension, values_from = measurement) %&gt;% \n  head(n = 5)\n\n# A tibble: 3 × 6\n  cut     price clarity     x     y     z\n  &lt;ord&gt;   &lt;int&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ideal     326 SI2      3.95  3.98  2.43\n2 Premium   326 SI1      3.89  3.84  2.31\n3 Good      327 VS1      4.05  4.07  2.31"
  },
  {
    "objectID": "slides/tidyverse/index.html#tidying-data-with-separate",
    "href": "slides/tidyverse/index.html#tidying-data-with-separate",
    "title": "Tidy work in Tidyverse",
    "section": "Tidying Data with separate",
    "text": "Tidying Data with separate\nIf some of your columns contain more than one value, use separate:\n\n\n# A tibble: 2 × 4\n  cut     price clarity dim           \n  &lt;ord&gt;   &lt;int&gt; &lt;ord&gt;   &lt;chr&gt;         \n1 Ideal     326 SI2     3.95/3.98/2.43\n2 Premium   326 SI1     3.89/3.84/2.31\n\n\n\n\nbijou4 %&gt;% \n  separate(dim, into = c(\"x\", \"y\", \"z\"), sep = \"/\", convert = T)\n\n\n\n\n\n# A tibble: 2 × 6\n  cut     price clarity     x     y     z\n  &lt;ord&gt;   &lt;int&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ideal     326 SI2      3.95  3.98  2.43\n2 Premium   326 SI1      3.89  3.84  2.31\n\n\n\n\n\n\n\n\nNote\n\n\nHere, sep is here interpreted as the position to split on. It can also be a regular expression or a delimiting string/character. Pretty flexible approach!"
  },
  {
    "objectID": "slides/tidyverse/index.html#tidying-data-with-unite",
    "href": "slides/tidyverse/index.html#tidying-data-with-unite",
    "title": "Tidy work in Tidyverse",
    "section": "Tidying Data with unite",
    "text": "Tidying Data with unite\nIf some of your columns contain more than one value\n\n\n# A tibble: 5 × 7\n  cut     price clarity_prefix clarity_suffix     x     y     z\n  &lt;ord&gt;   &lt;int&gt; &lt;chr&gt;          &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ideal     326 SI             2               3.95  3.98  2.43\n2 Premium   326 SI             1               3.89  3.84  2.31\n3 Good      327 VS             1               4.05  4.07  2.31\n4 Premium   334 VS             2               4.2   4.23  2.63\n5 Good      335 SI             2               4.34  4.35  2.75\n\n\n\n\nbijou5 %&gt;% unite(clarity, clarity_prefix, clarity_suffix, sep='')\n\n\n\n# A tibble: 5 × 6\n  cut     price clarity     x     y     z\n  &lt;ord&gt;   &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ideal     326 SI2      3.95  3.98  2.43\n2 Premium   326 SI1      3.89  3.84  2.31\n3 Good      327 VS1      4.05  4.07  2.31\n4 Premium   334 VS2      4.2   4.23  2.63\n5 Good      335 SI2      4.34  4.35  2.75"
  },
  {
    "objectID": "slides/tidyverse/index.html#completing-missing-values-using-complete",
    "href": "slides/tidyverse/index.html#completing-missing-values-using-complete",
    "title": "Tidy work in Tidyverse",
    "section": "Completing Missing Values Using complete",
    "text": "Completing Missing Values Using complete\n\nbijou %&gt;% head(n = 10) %&gt;% select(cut, clarity, price) %&gt;% \n  mutate(continent = sample(c('Aus', 'Eur'), size = 6, replace = T)) -&gt; missing_stones\n\n\n\nmissing_stones %&gt;% complete(cut, continent) %&gt;% head(n = 7)\n\n\n\n\n\n# A tibble: 7 × 4\n  cut       continent clarity price\n  &lt;ord&gt;     &lt;chr&gt;     &lt;ord&gt;   &lt;int&gt;\n1 Fair      Aus       &lt;NA&gt;       NA\n2 Fair      Eur       &lt;NA&gt;       NA\n3 Good      Aus       VS1       327\n4 Good      Eur       SI2       335\n5 Very Good Aus       VVS2      336\n6 Very Good Eur       &lt;NA&gt;       NA\n7 Premium   Aus       SI1       326"
  },
  {
    "objectID": "slides/tidyverse/index.html#combining-datasets",
    "href": "slides/tidyverse/index.html#combining-datasets",
    "title": "Tidy work in Tidyverse",
    "section": "Combining Datasets",
    "text": "Combining Datasets\nOften, we need to combine a number of data tables (relational data) to get the full picture of the data. Here different types of joins come to help:\n\n\nmutating joins that add new variables to data table A based on matching observations (rows) from data table B\n\n\n\n\nfiltering joins that filter observations from data table A based on whether they match observations in data table B\n\n\n\n\nset operations that treat observations in A and B as elements of a set.\n\n\n\nLet us create two example tibbles that share a key:\n\n\n\n\n\n\n\nkey\nx\n\n\n\n\na\nA1\n\n\nb\nA2\n\n\nc\nA3\n\n\ne\nA4\n\n\n\n\n\n\n\n\n\n\n\nkey\ny\n\n\n\n\na\nB1\n\n\nb\nNA\n\n\nc\nB3\n\n\nd\nB4"
  },
  {
    "objectID": "slides/tidyverse/index.html#the-joins-family-inner_join",
    "href": "slides/tidyverse/index.html#the-joins-family-inner_join",
    "title": "Tidy work in Tidyverse",
    "section": "The Joins Family — inner_join",
    "text": "The Joins Family — inner_join\n\n\n\n\n\n\n\nkey\nx\n\n\n\n\na\nA1\n\n\nb\nA2\n\n\nc\nA3\n\n\ne\nA4\n\n\n\n\n\n\n\n\n\n\n\nkey\ny\n\n\n\n\na\nB1\n\n\nb\nNA\n\n\nc\nB3\n\n\nd\nB4\n\n\n\n\n\n\n\n\n\nA %&gt;% inner_join(B, by = 'key')\n# All non-matching rows are dropped!\n\n# A tibble: 3 × 3\n  key   x     y    \n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 a     A1    B1   \n2 b     A2    &lt;NA&gt; \n3 c     A3    B3"
  },
  {
    "objectID": "slides/tidyverse/index.html#the-joins-family-left_join",
    "href": "slides/tidyverse/index.html#the-joins-family-left_join",
    "title": "Tidy work in Tidyverse",
    "section": "The Joins Family — left_join",
    "text": "The Joins Family — left_join\n\n\n\n\n\n\n\nkey\nx\n\n\n\n\na\nA1\n\n\nb\nA2\n\n\nc\nA3\n\n\ne\nA4\n\n\n\n\n\n\n\n\n\n\n\nkey\ny\n\n\n\n\na\nB1\n\n\nb\nNA\n\n\nc\nB3\n\n\nd\nB4\n\n\n\n\n\n\n\n\n\nA %&gt;% left_join(B, by = 'key')\n\n# A tibble: 4 × 3\n  key   x     y    \n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 a     A1    B1   \n2 b     A2    &lt;NA&gt; \n3 c     A3    B3   \n4 e     A4    &lt;NA&gt;"
  },
  {
    "objectID": "slides/tidyverse/index.html#the-joins-family-right_join",
    "href": "slides/tidyverse/index.html#the-joins-family-right_join",
    "title": "Tidy work in Tidyverse",
    "section": "The Joins Family — right_join",
    "text": "The Joins Family — right_join\n\n\n\n\n\n\n\nkey\nx\n\n\n\n\na\nA1\n\n\nb\nA2\n\n\nc\nA3\n\n\ne\nA4\n\n\n\n\n\n\n\n\n\n\n\nkey\ny\n\n\n\n\na\nB1\n\n\nb\nNA\n\n\nc\nB3\n\n\nd\nB4\n\n\n\n\n\n\n\n\n\nA %&gt;% right_join(B, by = 'key')\n\n# A tibble: 4 × 3\n  key   x     y    \n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 a     A1    B1   \n2 b     A2    &lt;NA&gt; \n3 c     A3    B3   \n4 d     &lt;NA&gt;  B4"
  },
  {
    "objectID": "slides/tidyverse/index.html#the-joins-family-full_join",
    "href": "slides/tidyverse/index.html#the-joins-family-full_join",
    "title": "Tidy work in Tidyverse",
    "section": "The Joins Family — full_join",
    "text": "The Joins Family — full_join\n\n\n\n\n\n\n\nkey\nx\n\n\n\n\na\nA1\n\n\nb\nA2\n\n\nc\nA3\n\n\ne\nA4\n\n\n\n\n\n\n\n\n\n\n\nkey\ny\n\n\n\n\na\nB1\n\n\nb\nNA\n\n\nc\nB3\n\n\nd\nB4\n\n\n\n\n\n\n\n\n\nA %&gt;% full_join(B, by = 'key')\n\n# A tibble: 5 × 3\n  key   x     y    \n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 a     A1    B1   \n2 b     A2    &lt;NA&gt; \n3 c     A3    B3   \n4 e     A4    &lt;NA&gt; \n5 d     &lt;NA&gt;  B4"
  },
  {
    "objectID": "slides/tidyverse/index.html#some-other-friends",
    "href": "slides/tidyverse/index.html#some-other-friends",
    "title": "Tidy work in Tidyverse",
    "section": "Some Other Friends",
    "text": "Some Other Friends\n\nstringr for string manipulation and regular expressions\nforcats for working with factors\nlubridate for working with dates"
  },
  {
    "objectID": "slides/tidyverse/index.html#section-1",
    "href": "slides/tidyverse/index.html#section-1",
    "title": "Tidy work in Tidyverse",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/scripting/index.html#r-functions",
    "href": "slides/scripting/index.html#r-functions",
    "title": "Functions and scripts",
    "section": "R Functions",
    "text": "R Functions\n\nOrganised, human readable code\nAny code that will be repeated\nAdd less objects to workspace\nPerform a set task, preferably that task is not “this whole analysis”"
  },
  {
    "objectID": "slides/scripting/index.html#r-functions-1",
    "href": "slides/scripting/index.html#r-functions-1",
    "title": "Functions and scripts",
    "section": "R Functions",
    "text": "R Functions\n\n\nWithout a function\n\na &lt;- 5\na + a\n\n[1] 10\n\n\n\nb &lt;- 3\nb + b\n\n[1] 6\n\n\n\nUser is performing the operation each time\n\n\nAn R function is something you have probably used many times already.. Functions perform a set task within R. Lets looks at a quick example.\n\n\nWith a function\n\ndoubleUp &lt;- function(x){\n  x + x\n}\n\na &lt;- 5\ndoubleUp(a)\nb &lt;- 3\ndoubleUp(b)\nz &lt;- doubleUp(3)\n\n[1] 10\n[1] 6\n\n\n\nFunction is performing the operation each time"
  },
  {
    "objectID": "slides/scripting/index.html#r-functions-2",
    "href": "slides/scripting/index.html#r-functions-2",
    "title": "Functions and scripts",
    "section": "R Functions",
    "text": "R Functions\nThe pieces that make a function\n\nfunction_name &lt;- function(param1, param2 = 20, ...){\n  param1*2 # Operational space\n  param1+param2 # What is returned. Alt, use return(param1+param2)\n}\n\n\nfunction_name : Name of the function\nfunction() : Parameters. User input\n\nparam1 : No default value. Required.\nparam2 = 20 : Default value\n... : ellipses pass other arguments into function\n\nfunction(){} : The function body\nreturn : the last line or invoked with return() function.\n\n\nA parameter is a variable in the declaration of the function. An argument is the actual value of the variable that gets passed to the function.\n\n\n\n\n\n\n\n\nTip\n\n\nHow to add a function to your workspace\n\ncopy paste\nsource() / library()"
  },
  {
    "objectID": "slides/scripting/index.html#r-scripts-as-standalone-tools",
    "href": "slides/scripting/index.html#r-scripts-as-standalone-tools",
    "title": "Functions and scripts",
    "section": "R scripts as standalone tools",
    "text": "R scripts as standalone tools\n\n\nIn many ways this quote about the UNIX philosophy relates to the philosophy you should have for an R script.\nMcIlroy is best known for having originally proposed Unix pipelines and developed several Unix tools, such as spell, diff, sort, join, graph, speak, and tr.\n\n\n\nData analysis with R is usually performed interactively using e.g. RStudio\nTasks can be executed from the terminal using R scripts\nR scripts can form powerful standalone tools\n\n\nUsually when you are analyzing data you will use the interactive view and try different things going forward. But say that you have figured out something that you want to do for multiple numbers of datasets?\nAnd like the quote it should do one thing and do it well. Because of the power in that an R script can contain multiple functions, or “programs”, this one thing can be quite simple, or quite advanced. And like the textstream mentioned here Rscripts often take input, something we will look more at now.\nIn this case it might be efficient to use an Rscript.\nSo USUALLY an rscript is something that is executable, can take some inputs and arguments, and returns something.\nNow lets look at those pieces starting with how an rscript can be executed."
  },
  {
    "objectID": "slides/scripting/index.html#executing-an-r-script",
    "href": "slides/scripting/index.html#executing-an-r-script",
    "title": "Functions and scripts",
    "section": "Executing an R script",
    "text": "Executing an R script\n\nInteractively: source(\"myscript.R\") in R console\n\n\nOne way to execute an Rscript is to use “source myscript.R” from an interactive session which runs whatever code is in the R script. So if it has functions or wether it reads a separate file and creates some new object, these will be in your R environment after sourcing the script.\n\n\n\nCommand line: Rscript myscript.R\n\n\nYou can also run the Rscript from the command line, or terminal. Then we use the command Rscript. It used to be not long ago that people used R CMD batch, but nowadays people usually use Rscript. Like the source, this will execute whichever code is in myscript.R but there is no environment for the objects or functions to pop into so the code in this Rscript is probably different than one that is intended for source.\n\n\n\n\nAs executable file: path/myscript.R if:\n\nScript is executable: chmod +x myscript.R\nFirst line in script is a hashbang e.g. #!/usr/bin/env Rscript\nScript’s path is included in call or $PATH\n\n\n\nYou can also execute the Rscript itself, from terminal. To execute an R script it must meet three requirements. It must be executable. It must start with this special line, specifying how it is executed if run on its own. If you want to run it without giving path, its folder must be in you $PATH variable."
  },
  {
    "objectID": "slides/scripting/index.html#providing-arguments-to-an-r-script",
    "href": "slides/scripting/index.html#providing-arguments-to-an-r-script",
    "title": "Functions and scripts",
    "section": "Providing arguments to an R script",
    "text": "Providing arguments to an R script\n\nPassing arguments to the script allows for flexibility in settings and input data\n\n\nOften when we use an R script, like I mentioned in the beginning, we want to pass multiple files/samples through it for efficiency reasons. It doesnt just have to be files, like functions it can also be argument settings.\n\n\n./myscript.R inputfile.vcf outputfile.vcf\n\nHere for example we are using the Rscript as an executable file, giving it an inputfile and specifying what we want the outputfile to be named. Notice that the only way the R script knows what is what is positionally.\n\n\n\n\nPackages are available that support long and short flags\n\n./myscript.R -i inputfile.vcf -o outputfile.vcf\n\nShort flags are when you give a single dash and usually a shortened version of the keyword, here i for input and o for output for example.\n\n\n\n./myscript.R --input inputfile.vcf --output outputfile.vcf\n\nAnd here long flags with two dashes\n\n\n\n./myscript.R --output inputfile.vcf --input outputfile.vcf\n\nA part of the flexibility of this is that you can give the flags in any order.\n\n\n\n./myscript.R --output inputfile.vcf -i inputfile.vcf\n\nAnd you can also mix the long/short flag order and styles. It is the coding in the script that determines how it handles this input."
  },
  {
    "objectID": "slides/scripting/index.html#parsing-arguments---positional",
    "href": "slides/scripting/index.html#parsing-arguments---positional",
    "title": "Functions and scripts",
    "section": "Parsing arguments - Positional",
    "text": "Parsing arguments - Positional\nExample: ./myscript.R inputfile.vcf outputfile.vcf\n\ncommandArgs()\n\nUse commandArgs() to capture whatever was passed into R as it was executed. To be clear; this is a command that is within the Rscript file.\n\n\ntrailingOnly = TRUE\n\nAdd trailingOnly = TRUE to suppress the first few items and get the arguments you passed to the script.\n\nA standard arg, but not default, that you can use when invoking commandArgs() is trailingOnly = TRUE, which basically tells it to start counting the input from after the Rscript arguments. As you can see here when we invoke it without this parameter it returns the script itself, in this case R studio. But with it the invocation is clear, there were no trailing command line arguments.\n\n\n\n\ncommandArgs()\n\n[1] \"/usr/local/lib/R/bin/exec/R\"        \"--no-save\"                         \n[3] \"--no-restore\"                       \"--no-echo\"                         \n[5] \"--no-restore\"                       \"--file=/opt/quarto/share/rmd/rmd.R\"\n\n\n\ncommandArgs(trailingOnly = TRUE)\n\ncharacter(0)"
  },
  {
    "objectID": "slides/scripting/index.html#parsing-arguments---flags",
    "href": "slides/scripting/index.html#parsing-arguments---flags",
    "title": "Functions and scripts",
    "section": "Parsing arguments - Flags",
    "text": "Parsing arguments - Flags\nExample: ./myscript.R --input inputfile.vcf --output outputfile.vcf\n\nSo how do we do it with flags?\n\n\n\nSeveral packages are available: getopt, optparse, argparser, …\n\n\n\nDefine set of possible arguments at start of script:\n\nlibrary(optparse)\nmy_options = list(\n  make_option(c(\"-i\", \"--inputfile\"), default='variants.vcf'),\n  make_option(c(\"-o\", \"--outputfile\"), default='variants_filtered.vcf'))\n\n\nIf we use optparse as an example you create your options using the make_option command, and can set default values. We see also that you can give both long and short form here.\n\n\n\nParse arguments using your definition:\n\nparse_args(OptionParser(option_list=my_options))\n\n$inputfile\n[1] \"variants.vcf\"\n\n$outputfile\n[1] \"variants_filtered.vcf\"\n\n$help\n[1] FALSE\n\n\n\nAnd then you use the my_options object we defined together with parse_args and OptionParser to check our input for those flags We also see an option, help, that we did not make, this is a standard flag that optparse always looks for and can generate what arguments it is looking for."
  },
  {
    "objectID": "slides/scripting/index.html#text-streams",
    "href": "slides/scripting/index.html#text-streams",
    "title": "Functions and scripts",
    "section": "Text streams",
    "text": "Text streams\n\nText streams allow for piping of data through a set of applications without writing intermediate files.\n\n\nWhat I am sure most of you will think of when you read this is the bash pipe sign.\n\n\nsamtools mpileup -uf ref.fa aln.bam | bcftools call -mv | myPythonscript.py | myRscript.R &gt; variants.vcf\n\nSo how does R handle taking input piped to it. And the answer is that we have to write some special code if this is the use case.\n\n\n\nReading\n\nTo define and open a connection, read one line, and close it:\n\n\ninput_con  &lt;- file(\"stdin\")\nopen(input_con)\noneline=readLines(input_con, n = 1)\nclose(input_con)\n\n\nTidyverse can read a tibble from text stream: read_csv(file(\"stdin\"))\n\n\nWhat we do is open a connection from standard input and then read this text stream for n number of lines at a time. It is also good to close this connection afterwards.\nAlternatively you can read a text stream into a tibble from tidyverse by using read_csv, note that it isnt read.csv the generic R command, which can take our input connection and create the tibble in R."
  },
  {
    "objectID": "slides/scripting/index.html#text-streams-1",
    "href": "slides/scripting/index.html#text-streams-1",
    "title": "Functions and scripts",
    "section": "Text streams",
    "text": "Text streams\nWriting\n\nAny stdout produced by the code (print(), cat(), etc) can be piped to a new process: ./myRscript.R | myNewScript\nor written to a file: ./myRscript.R &gt; output.csv\nTo write a tibble as a text stream: cat(format_csv(my_tibble))\n\n\nWhat about piping from your R script to something else? Continuing the stream? So just writing these commands. print, cat etc, can be piped to a new process.\nIf you already have a tibble, you can stream it out of R using this command."
  },
  {
    "objectID": "slides/scripting/index.html#summary",
    "href": "slides/scripting/index.html#summary",
    "title": "Functions and scripts",
    "section": "Summary",
    "text": "Summary\n\n\nFunctions are great for organizing code and repeating tasks\nR scripts are great for performing tasks from command line\nR scripts can be built in different ways to take arguments or text streams\n\n\nSo to summarize, R scripts are powerful tools to solve a specific problem that you define, and often fit well together with other tools. And now you have learned to execute them in different ways, with inputs and outputs and with other programs. All that is left is to actually write the content."
  },
  {
    "objectID": "slides/scripting/index.html#section-1",
    "href": "slides/scripting/index.html#section-1",
    "title": "Functions and scripts",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/r-env/index.html#terminology",
    "href": "slides/r-env/index.html#terminology",
    "title": "Renv: Project environments in R",
    "section": "Terminology",
    "text": "Terminology\nR package\n\nA standardized collection of R code, data or documentation\nHow you use someone else’s code\ninstalled.packages()\n\n\nR library\n\nA directory that holds R packages\nWhere you store packages\n.libPaths()\n\n\n\nR repository\n\nA server that hosts R packages for distribution\nWhere you get packages from\ngetOption(\"repos\")"
  },
  {
    "objectID": "slides/r-env/index.html#motivation",
    "href": "slides/r-env/index.html#motivation",
    "title": "Renv: Project environments in R",
    "section": "Motivation",
    "text": "Motivation\n\n\n\nUnable to reproduce the same results when\n\nRerunning old code\nSharing your code with others\n\n\n\nCan you answer these questions about your project?\n\nWhere did I get my package from? What’s my repository?\nWhere is my package stored? Where is my package library?\nWhat version of the package did I use?\n\n\n\nrenv is a toolkit to manage project-specific libraries of R packages"
  },
  {
    "objectID": "slides/r-env/index.html#what-can-renv-do",
    "href": "slides/r-env/index.html#what-can-renv-do",
    "title": "Renv: Project environments in R",
    "section": "What can renv do?",
    "text": "What can renv do?\nIsolate projects\n\nEach project gets it’s own library\nYou can use different versions of a library in different projects\n\n\nReproducible\n\nRecord exact version of each package\n\n\n\nPortable\n\nYou or others can restore the project libraries with the same exact versions\nAnd from the same repository as you did"
  },
  {
    "objectID": "slides/r-env/index.html#renv-workflow",
    "href": "slides/r-env/index.html#renv-workflow",
    "title": "Renv: Project environments in R",
    "section": "renv workflow",
    "text": "renv workflow\n\n\n\nInitialize\nrenv::init()\nWrite code install packages\ninstall.packages()\nRecord environment\nrenv::snapshot()\nRepeat 2 & 3\nRestore environment if needed\nrenv::restore()"
  },
  {
    "objectID": "slides/r-env/index.html#initialize",
    "href": "slides/r-env/index.html#initialize",
    "title": "Renv: Project environments in R",
    "section": "Initialize",
    "text": "Initialize\n&gt; renv::init()\n\nrenv: Project Environments for R\n\nWelcome to renv! It looks like this is your first time using renv.\nThis is a one-time message, briefly describing some of renv's functionality.\n\nrenv will write to files within the active project folder, including:\n\n  - A folder 'renv' in the project directory, and\n  - A lockfile called 'renv.lock' in the project directory.\n\nIn particular, projects using renv will normally use a private, per-project\nR library, in which new packages will be installed. This project library is\nisolated from other R libraries on your system.\n\nIn addition, renv will update files within your project directory, including:\n\n  - .gitignore\n  - .Rbuildignore\n  - .Rprofile\n\nFinally, renv maintains a local cache of data on the filesystem, located at:\n\n  - \"~/Library/Caches/org.R-project.R/R/renv\"\n\nThis path can be customized: please see the documentation in `?renv::paths`.\n\nPlease read the introduction vignette with `vignette(\"renv\")` for more information.\nYou can browse the package documentation online at https://rstudio.github.io/renv/.\nDo you want to proceed? [y/N]: y\n\n- \"~/Library/Caches/org.R-project.R/R/renv\" has been created.\n- Linking packages into the project library ... [32/32] Done!\nThe following package(s) will be updated in the lockfile:\n\n# CRAN -----------------------------------------------------------------------\n- R6            [* -&gt; 2.5.1]\n- base64enc     [* -&gt; 0.1-3]\n- bslib         [* -&gt; 0.6.1]\n- cachem        [* -&gt; 1.0.8]\n- fastmap       [* -&gt; 1.1.1]\n- rmarkdown     [* -&gt; 2.25]\n- sass          [* -&gt; 0.4.8]\n- vctrs         [* -&gt; 0.6.5]\n- xfun          [* -&gt; 0.41]\n- yaml          [* -&gt; 2.3.8]\n\nThe version of R recorded in the lockfile will be updated:\n- R             [* -&gt; 4.3.2]\n\n- Lockfile written to \"~/Downloads/test/renv.lock\".\n- renv activated -- please restart the R session."
  },
  {
    "objectID": "slides/r-env/index.html#status",
    "href": "slides/r-env/index.html#status",
    "title": "Renv: Project environments in R",
    "section": "Status",
    "text": "Status\nWhat has changed in my project compared to the previous record?\n&gt; renv::status()\nThe following package(s) are missing:\n\n package installed recorded used\n dplyr   n         n        y\n ggplot2 n         n        y\n shiny   n         n        y\n\nSee ?renv::status() for advice on resolving these issues."
  },
  {
    "objectID": "slides/r-env/index.html#snapshot",
    "href": "slides/r-env/index.html#snapshot",
    "title": "Renv: Project environments in R",
    "section": "Snapshot",
    "text": "Snapshot\n\nBefore installing packagesAfter installing packages\n\n\n&gt; renv::snapshot()\nThe following required packages are not installed:\n- dplyr\n- ggplot2\n- shiny\nPackages must first be installed before renv can snapshot them.\nUse `renv::dependencies()` to see where this package is used in your project.\n\nWhat do you want to do?\n\n1: Snapshot, just using the currently installed packages.\n2: Install the packages, then snapshot.\n3: Cancel, and resolve the situation on your own.\n\n\n&gt; renv::snapshot()\nThe following package(s) will be updated in the lockfile:\n\n# RSPM -----------------------------------------------------------------------\n- dplyr        [* -&gt; 1.1.4]\n- fansi        [* -&gt; 1.0.6]\n- generics     [* -&gt; 0.1.3]\n- tidyselect   [* -&gt; 1.2.0]\n- utf8         [* -&gt; 1.2.4]\n- withr        [* -&gt; 3.0.0]\n\nDo you want to proceed? [Y/n]:"
  },
  {
    "objectID": "slides/r-env/index.html#renv-workflow-1",
    "href": "slides/r-env/index.html#renv-workflow-1",
    "title": "Renv: Project environments in R",
    "section": "renv workflow",
    "text": "renv workflow\n\n# record current state of packages\nrenv::snapshot()"
  },
  {
    "objectID": "slides/r-env/index.html#renv.lock-anatomy",
    "href": "slides/r-env/index.html#renv.lock-anatomy",
    "title": "Renv: Project environments in R",
    "section": "renv.lock anatomy",
    "text": "renv.lock anatomy\n\n{\n  \"R\": {\n    \"Version\": \"4.3.2\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://p3m.dev/cran/latest\"\n      }\n    ]\n  },\n  \"Bioconductor\": {\n    \"Version\": \"3.18\"\n  },\n  \"remotes\": {\n    \"Package\": \"remotes\",\n    \"Version\": \"2.4.2.1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"RSPM\",\n    \"Requirements\": [\n      \"R\",\n      \"methods\",\n      \"stats\",\n      \"tools\",\n      \"utils\"\n    ],\n    \"Hash\": \"63d15047eb239f95160112bcadc4fcb9\"\n  }\n}"
  },
  {
    "objectID": "slides/r-env/index.html#renv.lock-anatomy-r-version",
    "href": "slides/r-env/index.html#renv.lock-anatomy-r-version",
    "title": "Renv: Project environments in R",
    "section": "renv.lock anatomy • R version",
    "text": "renv.lock anatomy • R version\n\n{\n  \"R\": {\n    \"Version\": \"4.3.2\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://p3m.dev/cran/latest\"\n      }\n    ]\n  },\n  \"Bioconductor\": {\n    \"Version\": \"3.18\"\n  },\n  \"remotes\": {\n    \"Package\": \"remotes\",\n    \"Version\": \"2.4.2.1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"RSPM\",\n    \"Requirements\": [\n      \"R\",\n      \"methods\",\n      \"stats\",\n      \"tools\",\n      \"utils\"\n    ],\n    \"Hash\": \"63d15047eb239f95160112bcadc4fcb9\"\n  }\n}"
  },
  {
    "objectID": "slides/r-env/index.html#renv.lock-anatomy-active-repositories",
    "href": "slides/r-env/index.html#renv.lock-anatomy-active-repositories",
    "title": "Renv: Project environments in R",
    "section": "renv.lock anatomy • Active repositories",
    "text": "renv.lock anatomy • Active repositories\n\n{\n  \"R\": {\n    \"Version\": \"4.3.2\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://p3m.dev/cran/latest\"\n      }\n    ]\n  },\n  \"Bioconductor\": {\n    \"Version\": \"3.18\"\n  },\n  \"remotes\": {\n    \"Package\": \"remotes\",\n    \"Version\": \"2.4.2.1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"RSPM\",\n    \"Requirements\": [\n      \"R\",\n      \"methods\",\n      \"stats\",\n      \"tools\",\n      \"utils\"\n    ],\n    \"Hash\": \"63d15047eb239f95160112bcadc4fcb9\"\n  }\n}"
  },
  {
    "objectID": "slides/r-env/index.html#renv.lock-anatomy-r-packages",
    "href": "slides/r-env/index.html#renv.lock-anatomy-r-packages",
    "title": "Renv: Project environments in R",
    "section": "renv.lock anatomy • R packages",
    "text": "renv.lock anatomy • R packages\n\n{\n  \"R\": {\n    \"Version\": \"4.3.2\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://p3m.dev/cran/latest\"\n      }\n    ]\n  },\n  \"Bioconductor\": {\n    \"Version\": \"3.18\"\n  },\n  \"remotes\": {\n    \"Package\": \"remotes\",\n    \"Version\": \"2.4.2.1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"RSPM\",\n    \"Requirements\": [\n      \"R\",\n      \"methods\",\n      \"stats\",\n      \"tools\",\n      \"utils\"\n    ],\n    \"Hash\": \"63d15047eb239f95160112bcadc4fcb9\"\n  }\n}"
  },
  {
    "objectID": "slides/r-env/index.html#package-metadata",
    "href": "slides/r-env/index.html#package-metadata",
    "title": "Renv: Project environments in R",
    "section": "Package metadata",
    "text": "Package metadata\n\n\n\n\"remotes\": {\n  \"Package\": \"remotes\",\n  \"Version\": \"2.4.2.1\",\n  \"Source\": \"Repository\",\n  \"Repository\": \"RSPM\",\n  \"Requirements\": [\n    \"R\",\n    \"methods\",\n    \"stats\",\n    \"tools\",\n    \"utils\"\n  ],\n  \"Hash\": \"63d15047eb239f95160112bcadc4fcb9\"\n}\n\n\n\nPackage: Package name\nVersion: Package version\nSource: Source location\nRepository: Name of repository\nHash: Unique hash for this package"
  },
  {
    "objectID": "slides/r-env/index.html#practical-use-cases-for-lockfile",
    "href": "slides/r-env/index.html#practical-use-cases-for-lockfile",
    "title": "Renv: Project environments in R",
    "section": "Practical use cases for lockfile",
    "text": "Practical use cases for lockfile\n\nTime capsules: Freeze exact versions of packages for future\nCollaborate using the same library\nDeploy development environment to a remote server"
  },
  {
    "objectID": "slides/r-env/index.html#restoring-library",
    "href": "slides/r-env/index.html#restoring-library",
    "title": "Renv: Project environments in R",
    "section": "Restoring library",
    "text": "Restoring library\n\n\n&gt; renv::restore()\nThe following package(s) will be updated:\n\n# CRAN -----------------------------------------------------------------------\n- R6            [* -&gt; 2.5.1]\n- fontawesome   [* -&gt; 0.5.2]\n- xfun          [* -&gt; 0.41]\n- yaml          [* -&gt; 2.3.8]\n\n# RSPM -----------------------------------------------------------------------\n- dplyr         [* -&gt; 1.1.4]\n- fansi         [* -&gt; 1.0.6]\n- withr         [* -&gt; 3.0.0]\n\nDo you want to proceed? [Y/n]:\n\n\n\nrenv::restore()\nRebuild a project library from a lockfile\nHandles multiple sources\n\nCRAN\nBioconductor\nGitHub\nGitlab\nBitbucket\nPrivate repositories…\n\nWill not modify R version"
  },
  {
    "objectID": "slides/r-env/index.html#tracking-renv.lock",
    "href": "slides/r-env/index.html#tracking-renv.lock",
    "title": "Renv: Project environments in R",
    "section": "Tracking renv.lock",
    "text": "Tracking renv.lock\n\n# view lockfile history\nrenv::history()\n\n# revert to previous state\nrenv::revert(commit=\"commit 2\")"
  },
  {
    "objectID": "slides/r-env/index.html#how-renv-works",
    "href": "slides/r-env/index.html#how-renv-works",
    "title": "Renv: Project environments in R",
    "section": "How renv works",
    "text": "How renv works\nWithout renv\n\n\n\n\n\nAll projects share the same library\nChanges in one project affects the other"
  },
  {
    "objectID": "slides/r-env/index.html#how-renv-works-1",
    "href": "slides/r-env/index.html#how-renv-works-1",
    "title": "Renv: Project environments in R",
    "section": "How renv works",
    "text": "How renv works\nProject specific library without global cache\n\n\n\n\n\nEach project has it’s own library\nrenv::settings$use.cache(FALSE) disables global cache"
  },
  {
    "objectID": "slides/r-env/index.html#how-renv-works-2",
    "href": "slides/r-env/index.html#how-renv-works-2",
    "title": "Renv: Project environments in R",
    "section": "How renv works",
    "text": "How renv works\nProject specific library with global cache\n\n\n\n\n\nEach project has it’s own library\nProjects libraries are soft-linked to global cache\n\n\n\n\n\nOS\nLocation\n\n\n\n\nLinux\n~/.local/share/env\n\n\nMacOS\n~/Library/Application Support/renv\n\n\nWindows\n%LOCALAPPDATA%/renv\n\n\n\nRENV_PATHS_CACHE Set this environment variable to share package cache across multiple users"
  },
  {
    "objectID": "slides/r-env/index.html#project-profiles",
    "href": "slides/r-env/index.html#project-profiles",
    "title": "Renv: Project environments in R",
    "section": "Project profiles",
    "text": "Project profiles\n\nSwitch between different profiles\nBy default, the “default” profile is used\nCreate or switch profiles\n\nrenv::activate(profile = \"dev\")"
  },
  {
    "objectID": "slides/r-env/index.html#install-packages-using-renv",
    "href": "slides/r-env/index.html#install-packages-using-renv",
    "title": "Renv: Project environments in R",
    "section": "Install packages using renv",
    "text": "Install packages using renv\n&gt; renv::install(c(\"dplyr\"))\n# Downloading packages -------------------------------------------------------\n- Downloading dplyr from CRAN ...               OK [file is up to date]\n- Downloading generics from CRAN ...            OK [file is up to date]\n- Downloading pillar from CRAN ...              OK [file is up to date]\n- Downloading fansi from CRAN ...               OK [file is up to date]\n- Downloading utf8 from CRAN ...                OK [file is up to date]\n- Downloading tibble from CRAN ...              OK [file is up to date]\n- Downloading pkgconfig from CRAN ...           OK [file is up to date]\n- Downloading tidyselect from CRAN ...          OK [file is up to date]\n- Downloading withr from CRAN ...               OK [file is up to date]\nSuccessfully downloaded 9 packages in 5.8 seconds.\n\nThe following package(s) will be installed:\n- dplyr      [1.1.4]\n- fansi      [1.0.6]\n- generics   [0.1.3]\n- pillar     [1.9.0]\n- pkgconfig  [2.0.3]\n- tibble     [3.2.1]\n- tidyselect [1.2.0]\n- utf8       [1.2.4]\n- withr      [3.0.0]\nThese packages will be installed into \"~/Downloads/test/renv/library/R-4.3/x86_64-apple-darwin13.4.0\".\n\nDo you want to proceed? [Y/n]:"
  },
  {
    "objectID": "slides/r-env/index.html#tidbits",
    "href": "slides/r-env/index.html#tidbits",
    "title": "Renv: Project environments in R",
    "section": "Tidbits",
    "text": "Tidbits\n\nImplicit snapshotting\n\nOnly packages which appear to be used in the project is recorded\nrenv::snapshot()\n\n\n\n\nSnapshot all packages in current library regardless of project\n\nrenv::snapshot(type=\"all\")\n\n\n\n\n\nDiscover dependencies manually\n\nrenv::dependencies()\n\n\n\n\n\nExplicit snapshotting\n\nOnly record packages specified in DESCRIPTION file\nrenv::settings$snapshot.type(\"explicit\")\n\n\n\n\n\nIgnore a package explicitly\n\nrenv::settings$ignored.packages(\"&lt;package&gt;\")"
  },
  {
    "objectID": "slides/r-env/index.html#tidbits-1",
    "href": "slides/r-env/index.html#tidbits-1",
    "title": "Renv: Project environments in R",
    "section": "Tidbits",
    "text": "Tidbits\n\nRestore into system library\n\nrenv::restore()\n\n\n\n\nDisable global cache\n\nrenv::settings$use.cache(FALSE)\n\n\n\n\n\nInstall to global cache\n\nrenv::install()\n\n\n\n\n\nUpdate packges to newer versions\n\nrenv::update()\n\n\n\n\n\nrenv is integrated into RStudio projects (.Rproj)\n\n\n\n\nDisable renv\n\nTemporary deactivate renv\n\nrenv::deactivate()\nrenv::activate()\n\nRemove renv from current project (removes renv/, renv.lockfile, .Rprofile)\n\nrenv::deactivate(clean=TRUE)\n\nRemove renv global cache\n\nunlink(renv::paths$root(), recursive=TRUE)"
  },
  {
    "objectID": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle",
    "href": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle",
    "title": "Renv: Project environments in R",
    "section": "Renv is only one piece of the reproducibility puzzle",
    "text": "Renv is only one piece of the reproducibility puzzle"
  },
  {
    "objectID": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle-1",
    "href": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle-1",
    "title": "Renv: Project environments in R",
    "section": "Renv is only one piece of the reproducibility puzzle",
    "text": "Renv is only one piece of the reproducibility puzzle"
  },
  {
    "objectID": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle-2",
    "href": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle-2",
    "title": "Renv: Project environments in R",
    "section": "Renv is only one piece of the reproducibility puzzle",
    "text": "Renv is only one piece of the reproducibility puzzle"
  },
  {
    "objectID": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle-3",
    "href": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle-3",
    "title": "Renv: Project environments in R",
    "section": "Renv is only one piece of the reproducibility puzzle",
    "text": "Renv is only one piece of the reproducibility puzzle"
  },
  {
    "objectID": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle-4",
    "href": "slides/r-env/index.html#renv-is-only-one-piece-of-the-reproducibility-puzzle-4",
    "title": "Renv: Project environments in R",
    "section": "Renv is only one piece of the reproducibility puzzle",
    "text": "Renv is only one piece of the reproducibility puzzle"
  },
  {
    "objectID": "slides/r-env/index.html#recap",
    "href": "slides/r-env/index.html#recap",
    "title": "Renv: Project environments in R",
    "section": "Recap",
    "text": "Recap\n\n\nKey functions\nrenv::init()\nrenv::snapshot()\nrenv::restore()\nUseful\nrenv::status()\nrenv::dependencies()\nrenv::history()\nrenv::revert()"
  },
  {
    "objectID": "slides/r-env/index.html#acknowledgements",
    "href": "slides/r-env/index.html#acknowledgements",
    "title": "Renv: Project environments in R",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\n\n\nProject environments for R, Kevin Ushey, RStudio::Conf 2020\n\n\nReproducible environments with renv, Ryan Johnson, NHS-R community 2023\n\n\nrenv official documentation"
  },
  {
    "objectID": "slides/r-env/index.html#section",
    "href": "slides/r-env/index.html#section",
    "title": "Renv: Project environments in R",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/packages/index.html#what-is-an-r-package",
    "href": "slides/packages/index.html#what-is-an-r-package",
    "title": "R packages",
    "section": "What is an R package?",
    "text": "What is an R package?\n\n\n\n\n\nA strict and connected folder and file structure\n\n\n\n\nYou can think of an R package under development as a folder and file structure with some predetermined names and connectivity. So really, a package is more about knowing how to organize code and other files than being a good R programmer. There are also some differences in how you write code that is intended to be used for a package than a script for analysis for example. But I will get back to this. The minimal required package has a DESCRIPTION, a NAMESPACE an R folder for code and here we also see a R project file created by Rstudio which is not required."
  },
  {
    "objectID": "slides/packages/index.html#what-is-an-r-package-1",
    "href": "slides/packages/index.html#what-is-an-r-package-1",
    "title": "R packages",
    "section": "What is an R package?",
    "text": "What is an R package?\n\n\n \n\n\nA strict and connected folder and file structure\n\n\n\n\nThere are many additional components you can add to the package, more than are shown here, I will go through the major parts of these in this lecture. So what are R packages for?"
  },
  {
    "objectID": "slides/packages/index.html#what-is-an-r-package-2",
    "href": "slides/packages/index.html#what-is-an-r-package-2",
    "title": "R packages",
    "section": "What is an R package?",
    "text": "What is an R package?\n\n\n \n\n\nA strict and connected folder and file structure\nSharing code\nImproved quality and rigor\n\nDocumentation\nTests\nExamples\n\nEfficiency\nImprovability\nReproducibility\n\n\n\n\nR packages are for sharing code in a way where others can use it. It also forces the author to include elements which can improve the quality of the code, such as documentation, examples and tests. This is a benefit no matter if the package is intended for other users or not. It really helps when coming back to your own code at a later date. Once you get better at writing packages it may even be more time efficient to write a package even if you are not going to share it.\n\n\nFinally; At the moment there is much talk about the reproducibility crisis and creating code in this way is definitely in line with good reproducibility."
  },
  {
    "objectID": "slides/packages/index.html#package-naming",
    "href": "slides/packages/index.html#package-naming",
    "title": "R packages",
    "section": "Package naming",
    "text": "Package naming\n\nA name that describes your packages function\n\nLetters, numbers and periods\nMust start with letter\nCannot end with period\n\nMake it “googleable”\nCheck that it doesn’t already exist!\n\nCRAN\nGitHub\nBioconductor"
  },
  {
    "objectID": "slides/packages/index.html#package-states",
    "href": "slides/packages/index.html#package-states",
    "title": "R packages",
    "section": "Package states",
    "text": "Package states\nThere are five states a package can exist in:\n\nSource\nBundled\nBinary\nInstalled\nIn-memory\n\n\nTo help understand what’s going on with a package it is useful to know the possible states a package can be in."
  },
  {
    "objectID": "slides/packages/index.html#package-states-1",
    "href": "slides/packages/index.html#package-states-1",
    "title": "R packages",
    "section": "Package states",
    "text": "Package states\nSource\nThe development version of your package. The collection of files on your computer.\nBundled\n\nA compressed, tar.gz source package with vignettes built\n.Rbuildignore files are excluded\n\nUseful for data for example\n\n\n\nWe will get to what vignettes are.\n\nBinary\n\nA bundle that is built for a certain architecture\nParsed format, skipping the development tools needed to take the package between source and being interpretable by R\n\n\nLike the bundled package except that if you uncompressed it doesn’t look like the source package. This is because it is built for a certain architecture, or operating system."
  },
  {
    "objectID": "slides/packages/index.html#package-states-2",
    "href": "slides/packages/index.html#package-states-2",
    "title": "R packages",
    "section": "Package states",
    "text": "Package states\nInstalled\n\nA binary package decompressed into a package library for R\n\nThe package library is the directory or directories where library(packagename) searches\n\n.libPaths()\n\n\n\nIn-memory\nWhen you use a package, it is in memory. When developing, a package does not have to be installed to be in memory.\n\npackagename::function() loads packagename\nlibrary(packagename) loads and attaches packagename\n\n\nThere is a subtle difference between loading a package into memory to be able to use the functions and also attaching it to the search path so you can use the functions without writing packagename::function(). When you are developing a package it is good to avoid using library and attaching a package because it makes it clearer which package you want the method to come from and having your package attach another package to its search path can mess up your users scripts."
  },
  {
    "objectID": "slides/packages/index.html#package-states-3",
    "href": "slides/packages/index.html#package-states-3",
    "title": "R packages",
    "section": "Package states",
    "text": "Package states\n\nhttp://r-pkgs.had.co.nz/package.html\n\nThis image is from Hadleys great introduction to developing packages and I think it illustrates very well how when you run install.packages() from CRAN what is really happening is that it determining what operating system you are on, getting the correct binary version of the package and then, on your device, running R CMD install to put it in your R library. From there you can use the library() command, or not if you are developing, to take it into memory. Whereas if you use type = “source” it will not infer your architecture and grab the bundled source if you will instead. This process will demand that you have the tools on your computer to build the correct binary and install."
  },
  {
    "objectID": "slides/packages/index.html#r",
    "href": "slides/packages/index.html#r",
    "title": "R packages",
    "section": "R/",
    "text": "R/\n\n\n\n\n\n\nNow we will start to go through the folders and files in a package to see how they interact, what belongs where and what they do."
  },
  {
    "objectID": "slides/packages/index.html#r-1",
    "href": "slides/packages/index.html#r-1",
    "title": "R packages",
    "section": "R/",
    "text": "R/\n\n\n \n\n\nCode\n\nLarge functions in their own R files\nUtility functions, that your package uses, in one R file\n\nBad code\n\nlibrary(), require(), source()\noptions(), par()\n\n\n\n\n\nThe first folder is the R/ folder. This is where your R code lives. You should try to keep it organized with functions that your user will be using grouped in some R files, and your utility functions in their own R file. Utility functions are functions that you don’t expect your user to run, rather they are used by your main functions. If a function doesn’t fit in a group or is very large, it can have its own R file, but each function should not have their own R file. You should avoid using functions in your code that modify the environment of your user. For example if you use library() it will attach the package functions of your user, perhaps getting in the way of other functions he was already using elsewhere. It is better to be explicit then and only load a package into memory. If you change options() or par() settings you should revert them before ending the function so your users environment isn’t changed."
  },
  {
    "objectID": "slides/packages/index.html#description",
    "href": "slides/packages/index.html#description",
    "title": "R packages",
    "section": "DESCRIPTION",
    "text": "DESCRIPTION\n\n\nNow lets look at the DESCRIPTION file. This file handles the metadata of your package. You can change the name of your package in the title here but remember then to change the folder of your package as they should match.\n\n\n\n\n\nTitle\n\n65 characters, no punctuation\n\nVersion\n\nThe version of the package\n\nDescription\n\nOne paragraph\n\n\n\n\n\nAuthors@R\n\nRoles\n\ncre*: Creator or maintainer.\naut*: Author or authors, that have made significant contributions.\nctb: Contributors, have made smaller contributions.\ncph: Copyright holder. Used if copyright is held by someone other than author, typically company.\n\n\n\n\n\n\nNot all of the fields in DESCRIPTION are important unless you plan to distribute you package to other users.\nThe title of you package should be a short description, no more than 65 characters. I’ll talk more in a second about version number recommendations but for now it is enough to say that it is the version of your package and you decide what version your package is in. The author can be one or many people, with names, emails and roles. Every package must have a creator or maintainer and any number of authors, the rest is optional.\n\n\n\n*required"
  },
  {
    "objectID": "slides/packages/index.html#description-1",
    "href": "slides/packages/index.html#description-1",
    "title": "R packages",
    "section": "DESCRIPTION",
    "text": "DESCRIPTION\n\n\n\n\nDepends & Imports\n\nPackages and versions that your package needs\nVersions are optional\nDepends: Attaches!\nImports: Loads!\n\nSuggests\n\nAdded functionality\n\n\n\n\nLazyData\n\nDatasets occupy no memory until loaded\n\nLicense\n\nCan be a file; LICENSE\nInfluences permissions of who can distribute and modify in what way\nMost common; MIT, GPL-3, CC0.\nhttps://tldrlegal.com/\nCRAN requires a license\n\n\n\n\n\nThe Depends and Imports fields of DESCRIPTION handles what packages, and optionally what versions of packages, your package needs to work. The big difference here is that depends attaches the functions, something that is generally frowned upon for packages, and imports loads them, making them available for use. So usually you will see Depends on R version and most other packages in Imports.\nSuggests isn’t packages that your package needs to function properly but with those packages there can be added functionality. For example a package can create a plot using base R plotting tools but you have built in that if ggplot2 is available create pretties plots instead.\nLazyData is a special function which should be true which states that any datasets included in your package should not take any memory until they are used. The license of your package should reflect who and how your package should be used or modified. If the license is longer than just a standard abbreviation it can be a file, called LICENSE."
  },
  {
    "objectID": "slides/packages/index.html#versioning",
    "href": "slides/packages/index.html#versioning",
    "title": "R packages",
    "section": "Versioning",
    "text": "Versioning\n0.0.0.9000\n\nmajor.minor.patch.dev\n\nMajor\n\nLarge changes, not always backwards compatible\nUsually 1 upon first release out of dev\n\nMinor\n\nBug fixes & new features. Most common\n\nPatch\n\nSmall bugfixes, no new features.\n\nDev\n\nOnly used while under development\nAlways starts at 9000\n\n\n\nWether you are developing your package, or updating and adding to a released package, it is good to change the version numbers in your DESCRIPTION file to reflect the changes. The four numbers reflect the kind of change that you have made to the package. Dev should be removed from the package upon release."
  },
  {
    "objectID": "slides/packages/index.html#man",
    "href": "slides/packages/index.html#man",
    "title": "R packages",
    "section": "man/",
    "text": "man/\n\n\n\n\ncall_me.R\n#' Output \"Call me \" followed by input.\n#'\n#' @param x A character or characters.\n#' @return The string \"Call me \" and \\code{x}. I'll write this\n#'    to display how to section with tags.\n#' @examples\n#' call_me(\"Maeby\")\ncall_me &lt;- function(x) {\n  paste(\"Call me \", x, sep=\"\")\n}\n\n\nDocumentation of your functions is important for helping users know how to use your package, and also for yourself when you come back to the package. The documentation is in the man/ directory in “R documentation”, or Rd files. They contain the information you see when you call ?function. While you can write these by hand it is easier and handsomer to have the package roxygen2 generate them for you.\n\n\nRoxygen2\n\n?function\nComment block, #', preceding a function\nTags, @tags, map values\nNo tag for introduction\n\ntitle*\ndescription\ndetails\n\nSpecial characters @\\%, escape with \\\n\n\n\n\n\nRoxygen2 works with special comment blocks in your code, directly before the function you are documenting, to create the Rd files. So you are actually writing your documentation in the same place as your code, the .R file, which is easier than going to another file and updating it. It also reminds you as you update your code to update the documentation in a natural way, and roxygen even deducts some information by itself so it is faster to write documentation. Here is an example function call_me.R with the roxygen2 documentation block preceding it. The first line will become the title and also the description if none is given. @param documents the parameter x, @return lets us know what the function returns, and notice the indentation here which I have added to signify how to add multiple rows of text and have them belong together. @examples shows one or many example executions of the code."
  },
  {
    "objectID": "slides/packages/index.html#man-1",
    "href": "slides/packages/index.html#man-1",
    "title": "R packages",
    "section": "man/",
    "text": "man/\n\n\ncall_me.R\n#' Output \"Call me \" followed by input.\n#'\n#' @param x A character or characters.\n#' @return The string \"Call me \" and \\code{x}. I'll write this\n#'    to display how to section with tags.\n#' @examples\n#' call_me(\"Maeby\")\ncall_me &lt;- function(x) {\n  paste(\"Call me \", x, sep=\"\")\n}\ncall_me.Rd\n% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/call_me.R\n\\name{call_me}\n\\alias{call_me}\n\\title{Output \"Call me \" followed by input.}\n\\usage{\ncall_me(x)\n}\n\\arguments{\n\\item{x}{A character or characters.}\n}\n\\value{\nThe string \"Call me \" and \\code{x}. I'll write this\n   to display how to section with tags.\n}\n\\description{\nOutput \"Call me \" followed by input.\n}\n\\examples{\ncall_me(\"Maeby\")\n}\n]{.small}\n\nSo when your documentation is built, roxygen takes the block information and generates a Rd file that looks like this.\n\n &gt; ?call_me\n\n\n\n\nAnd when you do question mark the function name in R the Rd file is parsed and you get this helpful documentation that I am sure you are all familiar with. I know this is a busy slide but what I hope I have been able to convey to you is that you use the code block in the .R code file which roxygen2 parses to create the Rd file which in turn is what is read when you ask for the documentation of a function in R."
  },
  {
    "objectID": "slides/packages/index.html#man-for-datasets",
    "href": "slides/packages/index.html#man-for-datasets",
    "title": "R packages",
    "section": "man/ for datasets",
    "text": "man/ for datasets\n\n\n\n\nWe will get to datasets later but while I am talking about documentation you should also document your datasets, if you have any. It is very similar to functional documentation, my dataset is the publicly available ToothGrowth dataset and I have created a R file called data.R where I will add documentation.\n\n\n\nhead(ToothGrowth)\n\n\n\n\n\nlen\nsupp\ndose\n\n\n\n\n4.2\nVC\n0.5\n\n\n11.5\nVC\n0.5\n\n\n7.3\nVC\n0.5\n\n\n5.8\nVC\n0.5\n\n\n6.4\nVC\n0.5\n\n\n10.0\nVC\n0.5\n\n\n\n\n\n\n\n\nHere we see the head of the ToothGrowth dataset.\ndata.R:#' The Effect of Vitamin C on Tooth Growth in Guinea Pigs\n#'\n#' The response is the length of odontoblasts (cells responsible for tooth growth)\n#'   in 60 guinea pigs. Each animal received one of three dose levels of vitamin C\n#'   (0.5, 1, and 2 mg/day) by one of two delivery methods, orange juice or ascorbic\n#'   acid (a form of vitamin C and coded as VC).\n#'\n#' @usage ToothGrowth\n#'\n#' @format A data frame with 60 observations on 3 variables.\n#' \\describe{\n#'   \\item{len}{Tooth length}\n#'   \\item{supp}{Supplement type (VC or OJ).}\n#'   \\item{dose}{Dose in milligrams/day}\n#' }\n#' @source \\url{https://www.elsevier.com/books/the-statistics-of-bioassay/bliss/978-1-4832-5662-7}\n\"ToothGrowth\"\nAnd here we see the documentation, which I have put in data.R. Just like previously this is then parsed by roxygen2 when I give the command and ToothGrowth.Rd is created. First title, then description, the usage in this case is just the dataset, and the @format describes the data, not @params that described our functions parameters. At the very end we see just the name of the dataset, which lives in ToothGrowth.RData."
  },
  {
    "objectID": "slides/packages/index.html#vignettes",
    "href": "slides/packages/index.html#vignettes",
    "title": "R packages",
    "section": "vignettes/",
    "text": "vignettes/\n\n\n\nA more complete guide to your package\n\nFor user/you\nExamples and use cases\n\nknitr & rmarkdown\n\nknitr: add r code to markdown\n\nvignettes/package-vignette.Rmd\n\nusethis::use_vignette(\"typicalr-vignette\")\n\nVignettes are a long-form guide, or manual, to the package that details what the functions in the package can do. It can also show and give examples of what the package is designed to do, using multiple functions in sequence. If functional documentation shows just a part, think of the vignette as a book chapter showing what your package can do. It can look very different if you intend it for your users or for yourself to read at a later date. You can use many things to create the vignette, but like with roxygen2 probably the easiest is to use knitr and rmarkdown.\n\n\ntypicalr-vignette.Rmd\n  ---\n  title: \"Vignette Title\"\n  author: \"Vignette Author\"\n  date: \"2024-05-29\"\n  output: rmarkdown::html_vignette\n  vignette: &gt;\n    %\\VignetteIndexEntry{Vignette Title}\n    %\\VignetteEngine{knitr::rmarkdown}\n    %\\VignetteEncoding{UTF-8}\n  ---\n\n\n\nWhat we are seeing here is the top metadata of a template for a vignette that I created using usethis::use_vignette(\"typicalr-vignette\") which created typicalr-vignette.Rmd and the vignettes/ directory. It also edits DESCRIPTION, adding knitr and rmarkdown to suggests, and adding VignetteBuilder: knitr. You are free to edit any part of the rmarkdown file but should not change the structure of the metadata. Only add the title in both places where it says “Vignette title” and your name as author. You can also change the output to pdf vignette for example. Luckily you have already gone through rmarkdown, so we dont need to talk about that, =)."
  },
  {
    "objectID": "slides/packages/index.html#vignettes-1",
    "href": "slides/packages/index.html#vignettes-1",
    "title": "R packages",
    "section": "vignettes/",
    "text": "vignettes/\n\n\n\nA more complete guide to your package\n\nFor user/you\nExamples and use cases\n\nknitr & rmarkdown\n\nknitr: add r code to markdown\n\nvignettes/package-vignette.Rmd\n\nusethis::use_vignette(\"typicalr-vignette\")\n\ntypicalr-vignette.Rmd\n  ---\n  title: \"typicalr\"\n  author: \"Sebastian DiLorenzo\"\n  date: \"2024-05-29\"\n  output: rmarkdown::html_vignette\n  vignette: &gt;\n    %\\VignetteIndexEntry{typicalr}\n    %\\VignetteEngine{knitr::rmarkdown}\n    %\\VignetteEncoding{UTF-8}\n  ---"
  },
  {
    "objectID": "slides/packages/index.html#namespace",
    "href": "slides/packages/index.html#namespace",
    "title": "R packages",
    "section": "NAMESPACE",
    "text": "NAMESPACE\npackage1 names         package2 names\n\n\nThe NAMESPACE makes sure your package works well with other packages, so it is mostly important for submitting to repository, CRAN. It makes sure your code and the code of other packages doesn’t interfere with each other. I like to think of it as a venn diagram, where each circle is a space filled with names. What the NAMESPACE does is remove the overlap, so if your function uses a function from package1, it wont accidentally use a function with the same name from package2. It does this by specifying which space a function should look for the name of a function it needs.\n\n\n\n@imports and @importsFrom\n\nDefines how/where a function in one package finds a function in another\n@imports pkg\n@importsFrom pkg function\n\n@export\n\nDefines which functions are available to user\nDo not export data\n\n\n\nIt does this using imports and exports. Like the other documentation, we can use roxygen2 to create our NAMESPACE. Using the imports tag, it doesn’t matter if our user has loaded a package with a function with the same name as one of our functions are using, because our function will know to use the one specified in imports. Exports helps by saying that only these functions of my package are available outside. If you export all your functions, it increases the risk of being incompatible with other packages, so good practice is to export as few as possible. If you are not going to share your package, just export every function."
  },
  {
    "objectID": "slides/packages/index.html#namespace-1",
    "href": "slides/packages/index.html#namespace-1",
    "title": "R packages",
    "section": "NAMESPACE",
    "text": "NAMESPACE\ncall_me.R:\n#' Output \"Call me \" followed by input.\n#'\n#' @param x A character or characters.\n#' @return The string \"Call me \" and \\code{x}. I'll write this\n#'    to display how to section with tags.\n#' @examples\n#' call_me(\"Maeby\")\n#' @export\ncall_me &lt;- function(x) {\n  paste(\"Call me \",x,sep=\"\")\n}\nutility.R:\n#' @import knitr\nNULL\n\nRevisiting call_me.R, I have now added the @export tag, and in the utility.R I have @import knitr, just as an example, using the NULL object since there has to be something there.\n\n\nNAMESPACE:\n# Generated by roxygen2: do not edit by hand\n\nexport(call_me)\nimport(knitr)\n\nSo when I run devtools::document(), just like when we generated the other documentation, this will generate the NAMESPACE for us. Notice that this is a very minimal example and roxygen2 actually looks at what you are exporting so there are added benefits here where you are just writing @export but roxygen2 is correctly exporting it as a S3 or S4 class etc."
  },
  {
    "objectID": "slides/packages/index.html#namespace-2",
    "href": "slides/packages/index.html#namespace-2",
    "title": "R packages",
    "section": "NAMESPACE",
    "text": "NAMESPACE\nImport in DESCRIPTION and in NAMESPACE!?\n\nA final note on the NAMESPACE is that at a glance we are now importing packages both in the DESCRIPTION and in the NAMESPACE. This is more an accident of naming as they are doing a bit different things.\n\n\n\nDESCRIPTION Imports:\n\n“My package needs this package to work”\n\nNAMESPACE @import\n\n“When my package uses this function, use the one from the package in the NAMESPACE”\n\nAdditional effects:\n\nNAMESPACE removes need for ::\n\npackage::function() or function()\n\n\n\n\nWhen you import a function in DESCRIPTION you are saying that “My package needs this package to work”, when you import a function in NAMESPACE you are saying “When my package uses this function, use the one from the package in the NAMESPACE” even if there exist functions with the same name. An added benefit is that if you just import a package in DESCRIPTION you need to specify in your code which package it is from as it is not attached but if you import it from NAMESPACE this need is removed. Finally: Realise that writing package::function() removes the need to import functions to NAMESPACE and is best, but it takes a while to write of course."
  },
  {
    "objectID": "slides/packages/index.html#data",
    "href": "slides/packages/index.html#data",
    "title": "R packages",
    "section": "data/",
    "text": "data/\n\n\nPackage types:\n\nFunctional\n\nPerforms a or several functions\nContains no or small datasets, &lt;1 MB\n\nDataset\n\nContains an interesting dataset\nEasy to import\nFew or no functions\n\n\n\nIncluding data is good if there is some information intrinsic to some of your functions or to provide examples of usage. In some packages it can be the main reason for the package, for example a R package carrying some census data which is easy for people to load. Unless your package is such a data package you should strive to keep it less than 1 MB.\n\n\nData types:\n\nBinary data, .Rdata or .rda\n\ndata/ folder\nA single object with the same name as the data file\n\nFunction data\n\nR/sysdata.rda\nData that your functions need\n\nRaw data, .xlsx,.csv etc\n\ninst/extdatafolder\n\n\n\nYou can have three types of data in R, binary data is an R object saved to data/ directory with the same name as the object. These can be slightly larger files. Data that your functions need, for example in life sciences you might save the positions of the centromeres within a package that plots the genome, or for a plotting program you may want to save a list of colors, this is usually saved in R/sysdata.rda. The objects saved there will be available to your functions by name within the package. If you want to include raw data, usually you should try not to or convert it to binary data, you can save those in inst/extdata.\n\n\n\n# Create data in package automatically\nusethis::use_data(object, package)\n\n# Manually\nsave(object, file=\"path/to/package/data/object.Rdata\")\n\n# Access raw data\nsystem.file(\"extdata\",\"filename.csv\", package=\"packagename\")\n\nHere we see some code where we use usethis to save a object directly to data/ directory with the correct name. This is the same thing basically as using the save command and pointing to the correct location, with correct filename. If you want to access data belonging to a package you can use the system.file command in R."
  },
  {
    "objectID": "slides/packages/index.html#tests",
    "href": "slides/packages/index.html#tests",
    "title": "R packages",
    "section": "tests/",
    "text": "tests/\n\n\n\nWhat to test?\nThat the return value is what is expected given a certain input\nWhy test?\nImproved development stability\nWorking in group/open source\nWorking on big package\n\n\n\nTests or unit tests formally checks that we get the correct result from a function given a specific input. This can be good when working on big and/or complex packages or together with other people as it directly tells you if a change has been made that has changed the expected behavior of the package.\n\n\n\nHow to test?\nUses testthat package for testing and usethis package for setup \nInitialize with use_testthat()\nCreate test for a function with use_test(\"call_me\")\nTestfile: tests/testthat/test-call_me.R\nRun test with devtools::test() or check()\n\ntests/testthat/test-call_me.R:\ntest_that(\"multiplication works\", {\n  expect_equal(2 * 2, 4)\n})\n\nThis is the standard template created when use_test() is called."
  },
  {
    "objectID": "slides/packages/index.html#src",
    "href": "slides/packages/index.html#src",
    "title": "R packages",
    "section": "src/",
    "text": "src/\n\n\n\nCompiled code\n\nRcpp\nrJava\n\nScripts\n\ninst/\nDependencies\n\n\n\nI wont go deeply into this, but I want it to be something you are aware of. R isn’t the fastest language, so sometimes you may want to put for example C or C++ in your package for certain functions. There are two ways to go about this. Either you can integrate, using packages such as Rcpp, or rJava and others, or you just straight up put code such as .py files in inst/python. This should be avoided as it creates additional dependencies on the user. So lets look at an example of how to set up your package to use Rcpp, which is probably the easiest and most common.\n\n\nusethis::use_rcpp()\n\nEdit DESCRIPTION\n#' @useDynLib packagename\n#' @importFrom Rcpp sourceCpp\n\n.cpp file in src/\n\n\n\nsrc/filename.cpp:\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n\n// This is a simple example of exporting a C++ function to R. You can\n// source this function into an R session using the Rcpp::sourceCpp\n// function (or via the Source button on the editor toolbar). Learn\n// more about Rcpp at:\n//\n//   http://www.rcpp.org/\n//   http://adv-r.had.co.nz/Rcpp.html\n//   http://gallery.rcpp.org/\n//\n\n// [[Rcpp::export]]\nNumericVector timesTwo(NumericVector x) {\n  return x * 2;\n}\n\nFirst you can call usethis::use_rcpp() which automates the processes of adding information to your DESCRIPTION and telling you to add two tags for documentation somewhere in your packages code. Then we create a c++ file, from Rstudio preferable, in our src/ folder. It will look as shown here by default. The only important parts are the header and the rcpp::export located above the example function."
  },
  {
    "objectID": "slides/packages/index.html#src-1",
    "href": "slides/packages/index.html#src-1",
    "title": "R packages",
    "section": "src/",
    "text": "src/\n\n\n\nCompiled code\n\nRcpp\nrJava\n\nScripts\n\ninst/\nDependencies\n\n\n\n\nusethis::use_rcpp()\n\nEdit DESCRIPTION\n#' @useDynLib packagename\n#' @importFrom Rcpp sourceCpp\n\n.cpp file in src/\npkgbuild::compile_dll()\ndevtools::document()\nBuild & Reload\nAdd documentation to .cpp\n\n\n\nR/RcppExports.R:\n# Generated by using Rcpp::compileAttributes() -&gt; do not edit by hand\n# Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393\n\ntimesTwo &lt;- function(x) {\n    .Call('_typicalr_timesTwo', PACKAGE = 'typicalr', x)\n}\n\nTo get this to R code we first build the documentation, which exports the function, and your tags for using rcpp, to NAMESPACE, and then Build & Reload in Rstudio, I am sure there are ways to do this with devtools as well. At this stage the cpp function is callable in R, through the RcppExports.R file that has been created in R/ directory, which looks like this. Just like with our normal functions we can add roxygen documentation for this in the cpp file."
  },
  {
    "objectID": "slides/packages/index.html#cran-and-r-cmd-check",
    "href": "slides/packages/index.html#cran-and-r-cmd-check",
    "title": "R packages",
    "section": "CRAN and R CMD check",
    "text": "CRAN and R CMD check\n\n\n\nComprehensive R Archive Network\n\nR package repository\nSign of quality\n\nR CMD check\n\nMore than 50 individual checks\nThree messages:\n\nERROR: Always fix.\nWARNING: Should probably fix. Definitely for CRAN submit.\nNOTE: Try to solve to CRAN submit, else do not bother.\n\ndevtools::check()\n\n\n\n\n\n\n\nR CMD check is a command that checks your package for common problems. From filenames and permissions to information in DESCRIPTION and NAMESPACE and whether you can install it. Note that this can only check if it is installable in your current environment, not on other operating systems. It also checks that your package is compatible with CRAN, such as not having the same name as a package that already exists there and that the required information in DESCRIPTION is present. It also checks your actual code, making sure that there are no problems or dependencies that are not met. There are three types of messages that R CMD CHECK can complain about. Errors are always bad, and you should fix them no matter what. Warnings are pretty bad, but there may be some false positives. You should try to fix them especially if you are submitting the package to CRAN. Notes you can take or leave, but if you are a perfectionist you should aspire to fix even these. As with most other commands, devtools has a function for this called check() which performs R CMD check and some additional operations such as automatically updating the documentation and bundling the package before checking."
  },
  {
    "objectID": "slides/packages/index.html#rstudio-and-github",
    "href": "slides/packages/index.html#rstudio-and-github",
    "title": "R packages",
    "section": "Rstudio and Github",
    "text": "Rstudio and Github\n\n\n\ngit\n\nVersion control\nWorking in groups\nRstudio integration\n\nGitHub\n\nUnoffical repository\ndevtools::install_github()\nR Package development environment\nIssues\n\n\n\n\n\n\n\nThat was all I was going to say about the different pieces of a package. There are more but I think those are the main parts and you can dive into the others if you are making an advanced package. Now let’s talk a little about hosting your package. Using version control, such as git, is a good way to work on your package, especially if you are working on it in a group. This is because it keeps track of changes and conflicts so that if multiple people are working on the same file no bugs appear. You can also setup Rstudio to work with git and GitHub. A package hosted on GitHub can be directly installed using devtools::install_github() and what you see more and more nowadays is that a stable release is on CRAN whereas development versions are on GitHub. It is also a great place for others to contribute to your code and to report issues they have with your package."
  },
  {
    "objectID": "slides/packages/index.html#github-actions",
    "href": "slides/packages/index.html#github-actions",
    "title": "R packages",
    "section": "Github Actions",
    "text": "Github Actions\n\nWhat it can do\n\nIntegrated with your GitHub repository\nAutomates R CMD check\nTest on multiple operating systems\n\nHow it works\n\nAdd a file with instructions to .github/workflows/workflow-name.yaml\nTriggered by action, for example push\nMost common R related workflows available in github r-libs repository\n\n\n\n\nLets talk a bit more about setting up GitHub actions. There is an extra assignment in the lab where you set this up for your R package. To get it working you need to have enabled the permissions for your GitHub account to use workflow scopes. Once you have that you create a yaml file of instructions in a directory where GitHub knows to look for such things. Then when you push this to GitHub and your repository updates, it will additionally run whichever tests you have specified."
  },
  {
    "objectID": "slides/packages/index.html#summary",
    "href": "slides/packages/index.html#summary",
    "title": "R packages",
    "section": "Summary",
    "text": "Summary\n\n\n\nWhat is an R package?\nPossible package states \nPackage structure:\n\nCode | r/\nMetadata | DESCRIPTION\nDocumentation | man/\nVignettes\nImport & Export | NAMESPACE\nData | data/\nTests | tests/\nCompiled code | src/ \n\n\nCRAN and R CMD check\nRstudio and Github \n\n\n http://r-pkgs.had.co.nz/"
  },
  {
    "objectID": "slides/packages/index.html#section-1",
    "href": "slides/packages/index.html#section-1",
    "title": "R packages",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/ml/index.html#biological-data-are-high-dimensional",
    "href": "slides/ml/index.html#biological-data-are-high-dimensional",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Biological data are high dimensional",
    "text": "Biological data are high dimensional"
  },
  {
    "objectID": "slides/ml/index.html#types-of-data-analysis",
    "href": "slides/ml/index.html#types-of-data-analysis",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Types of data analysis",
    "text": "Types of data analysis"
  },
  {
    "objectID": "slides/ml/index.html#some-peculiarities-of-frequentist-statistics",
    "href": "slides/ml/index.html#some-peculiarities-of-frequentist-statistics",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Some peculiarities of Frequentist statistics",
    "text": "Some peculiarities of Frequentist statistics\n\n\n\nbased on Maximum Likelihood principle\nfocus too much on summary statistics\n\n\n\\[\\rm{L}\\,(\\,x_i \\,|\\, \\mu,\\sigma^2\\,) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp^{\\displaystyle -\\frac{\\sum\\limits_{i=1}^N (x_i-\\mu)^2}{2\\sigma^2}}\\]\n\n\n\\[\\frac{\\partial \\rm{L}\\,(\\,x_i \\,|\\, \\mu,\\sigma^2\\,)}{\\partial\\mu} = 0; \\,\\, \\frac{\\partial \\rm{L}\\,(\\,x_i \\,|\\, \\mu,\\sigma^2\\,)}{\\partial\\sigma^2} = 0\\]\n\n\n\\[\\mu = \\frac{1}{N}\\sum_{i=0}^N x_i \\,\\,\\rm{-}\\,\\rm{mean \\, estimator}\\]\n\\[\\sigma^2 = \\frac{1}{N}\\sum_{i=0}^N (x_i-\\mu)^2 \\,\\,\\rm{-}\\,\\rm{variance \\, estimator}\\]\n\n\n\n Summary statistics do not always reasonbly describe data (example: Anscombes quartet)"
  },
  {
    "objectID": "slides/ml/index.html#frequentist-statistics-focus-to-much-on-p-values",
    "href": "slides/ml/index.html#frequentist-statistics-focus-to-much-on-p-values",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Frequentist statistics: focus to much on p-values",
    "text": "Frequentist statistics: focus to much on p-values\n\n\n\nFC&lt;-1.02; x_mean&lt;-5; x_sd&lt;-1; N_vector&lt;-seq(from=100,to=10000,by=100); pvalue_t&lt;-vector(); pvalue_lm&lt;-vector()\nfor(N in N_vector)\n{\n  x1 &lt;- rnorm(N, x_mean, x_sd); x2 &lt;- rnorm(N, x_mean*FC, x_sd)\n  t_test_res&lt;-t.test(x1, x2); pvalue_t &lt;- append(pvalue_t, t_test_res$p.value)\n\n  x &lt;- rnorm(N, 0, 1); y &lt;- 0.1*x+2*rnorm(N, 0, 1)\n  lm_res &lt;- summary(lm(y~x)); pvalue_lm &lt;- append(pvalue_lm, lm_res$coefficients[2,4])\n}\npar(mfrow=c(2,2)); par(mar = c(5, 5, 1, 1))\nboxplot(x1, x2, names=c(\"X1\",\"X2\"), ylab=\"Value\", col=\"darkred\"); mtext(\"Fold change FC = 1.02\")\nplot(pvalue_t~N_vector,type='o',xlab=\"N\",ylab=\"p-value\",col=\"darkgreen\"); mtext(\"P-value of two-group t-test\")\nplot(y~x, xlab=\"X\", ylab=\"Y\"); abline(lm(y~x), col=\"blue\", lwd=2); mtext(\"Y = 0.1*X + 2*rnorm(N, 0, 1)\")\nplot(pvalue_lm~N_vector,type='o',xlab=\"N\",ylab=\"p-value\",col=\"darkgreen\"); mtext(\"P-value of linear regression\")\n\n\n\n\n\n\n\n\n\n\n\nQuestionable whether p-value is a best metric for ranking features (biomarkers)"
  },
  {
    "objectID": "slides/ml/index.html#frequentist-statistics-struggles-with-high-dimensional-data",
    "href": "slides/ml/index.html#frequentist-statistics-struggles-with-high-dimensional-data",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Frequentist statistics struggles with high-dimensional data",
    "text": "Frequentist statistics struggles with high-dimensional data\n\n\n\nn &lt;- 20 # number of samples\np &lt;- 2  # number of features / dimensions\nY &lt;- rnorm(n)\nX &lt;- matrix(rnorm(n * p), n, p)\nsummary(lm(Y ~ X))\n\n\nCall:\nlm(formula = Y ~ X)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.0522 -0.6380  0.1451  0.3911  1.8829 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)  0.14950    0.22949   0.651    0.523\nX1          -0.09405    0.28245  -0.333    0.743\nX2          -0.11919    0.24486  -0.487    0.633\n\nResidual standard error: 1.017 on 17 degrees of freedom\nMultiple R-squared:  0.02204,   Adjusted R-squared:  -0.09301 \nF-statistic: 0.1916 on 2 and 17 DF,  p-value: 0.8274\n\n\n\nGoing to higher dimensions →\n\n\n\n\nn &lt;- 20 # number of samples\np &lt;- 10 # number of features / dimensions\nY &lt;- rnorm(n)\nX &lt;- matrix(rnorm(n * p), n, p)\nsummary(lm(Y ~ X))\n\n\nCall:\nlm(formula = Y ~ X)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.0255 -0.4320  0.1056  0.4493  1.0617 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)  \n(Intercept)  0.54916    0.26472   2.075   0.0679 .\nX1           0.30013    0.21690   1.384   0.1998  \nX2           0.68053    0.27693   2.457   0.0363 *\nX3          -0.10675    0.26010  -0.410   0.6911  \nX4          -0.21367    0.33690  -0.634   0.5417  \nX5          -0.19123    0.31881  -0.600   0.5634  \nX6           0.81074    0.25221   3.214   0.0106 *\nX7           0.09634    0.24143   0.399   0.6992  \nX8          -0.29864    0.19004  -1.571   0.1505  \nX9          -0.78175    0.35408  -2.208   0.0546 .\nX10          0.83736    0.36936   2.267   0.0496 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8692 on 9 degrees of freedom\nMultiple R-squared:  0.6592,    Adjusted R-squared:  0.2805 \nF-statistic: 1.741 on 10 and 9 DF,  p-value: 0.2089\n\n\n\n\nGoing to even higher dimensions →\n\n\n\n\nn &lt;- 20 # number of samples\np &lt;- 20 # number of features / dimensions\nY &lt;- rnorm(n)\nX &lt;- matrix(rnorm(n * p), n, p)\nsummary(lm(Y ~ X))\n\n\nCall:\nlm(formula = Y ~ X)\n\nResiduals:\nALL 20 residuals are 0: no residual degrees of freedom!\n\nCoefficients: (1 not defined because of singularities)\n            Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)  1.34889        NaN     NaN      NaN\nX1           0.66218        NaN     NaN      NaN\nX2           0.76212        NaN     NaN      NaN\nX3          -1.35033        NaN     NaN      NaN\nX4          -0.57487        NaN     NaN      NaN\nX5           0.02142        NaN     NaN      NaN\nX6           0.40290        NaN     NaN      NaN\nX7           0.03313        NaN     NaN      NaN\nX8          -0.31983        NaN     NaN      NaN\nX9          -0.92833        NaN     NaN      NaN\nX10          0.18091        NaN     NaN      NaN\nX11         -1.37618        NaN     NaN      NaN\nX12          2.11438        NaN     NaN      NaN\nX13         -1.75103        NaN     NaN      NaN\nX14         -1.55073        NaN     NaN      NaN\nX15          0.01112        NaN     NaN      NaN\nX16         -0.50943        NaN     NaN      NaN\nX17         -0.47576        NaN     NaN      NaN\nX18          0.31793        NaN     NaN      NaN\nX19          1.43615        NaN     NaN      NaN\nX20               NA         NA      NA       NA\n\nResidual standard error: NaN on 0 degrees of freedom\nMultiple R-squared:      1, Adjusted R-squared:    NaN \nF-statistic:   NaN on 19 and 0 DF,  p-value: NA"
  },
  {
    "objectID": "slides/ml/index.html#equidistant-points-in-high-dimensions",
    "href": "slides/ml/index.html#equidistant-points-in-high-dimensions",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Equidistant points in high dimensions",
    "text": "Equidistant points in high dimensions\n\nn &lt;- 1000; p &lt;- c(2, 32, 512); pair_dist &lt;- list()\nfor(i in 1:length(p)) {\n  X &lt;- matrix(rnorm(n * p[i]), n, p[i])\n  pair_dist[[i]] &lt;- as.vector(dist(X));\n  pair_dist[[i]] &lt;- pair_dist[[i]] / max(pair_dist[[i]])\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData points in high dimensions: \n\nmove away from each other \nbecome equidistant and similar \n\nImpossible to see differences between cases and controls"
  },
  {
    "objectID": "slides/ml/index.html#regularizations-lasso",
    "href": "slides/ml/index.html#regularizations-lasso",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Regularizations: LASSO",
    "text": "Regularizations: LASSO\n\\[Y = \\beta_1X_1+\\beta_2X_2+\\epsilon\\]\n\n\\[\\textrm{OLS} = (Y-\\beta_1X_1-\\beta_2X_2)^2\\]\n\n\n\\[\\textrm{Penalized OLS} = (Y-\\beta_1X_1-\\beta_2X_2)^2 + \\lambda(|\\beta_1|+|\\beta_2|)\\]"
  },
  {
    "objectID": "slides/ml/index.html#regularizations-are-priors-in-bayesian-statistics",
    "href": "slides/ml/index.html#regularizations-are-priors-in-bayesian-statistics",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Regularizations are priors in Bayesian statistics",
    "text": "Regularizations are priors in Bayesian statistics\n\\[\\small Y = \\beta_1X_1+\\beta_2X_2+\\epsilon; \\,\\,\\, Y \\sim N(\\,\\beta_1X_1+\\beta_2X_2, \\sigma^2\\,) \\equiv \\rm{L}\\,(\\,\\rm{Y} \\,|\\, \\beta_1,\\beta_2\\,)\\]\n\nMaximum Likelihood principle: maximize probability to observe data given parameters: \\[\\small \\rm{L}\\,(\\,\\rm{Y} \\,|\\, \\beta_1,\\beta_2\\,) = \\frac{1}{\\sqrt{2\\pi\\sigma²}} \\exp^{\\displaystyle -\\frac{(Y-\\beta_1X_1-\\beta_2X_2)^2}{2\\sigma²}}\\]\n\n\n\nBayes theorem: maximize posterior probability of observing parameters given data: \\[\\small \\rm{Posterior}(\\rm{params} \\,|\\, \\rm{data})=\\frac{L(\\rm{data} \\,|\\, \\rm{params})*\\rm{Prior}(\\rm{params})}{\\int{L(\\rm{data} \\,|\\, \\rm{params})*\\rm{Prior}(\\rm{params}) \\, d(\\rm{params})}}\\]\n\n\n\n\\[\\small \\rm{Posterior}(\\,\\beta_1,\\beta_2\\,|\\, \\rm{Y}\\,) \\sim \\rm{L}\\,(\\,\\rm{Y} \\,|\\,\\beta_1,\\beta_2\\,)*\\rm{Prior}(\\beta_1,\\beta_2) \\sim \\exp^{-\\frac{(Y-\\beta_1X_1-\\beta_2X_2)^2}{2\\sigma²}}*\\exp^{-\\lambda(|\\beta_1|+|\\beta_2|)} \\\\\n\\small -\\log{\\left[\\rm{Posterior}(\\, \\beta_1,\\beta_2 \\,|\\, \\rm{Y}\\,)\\right]} \\sim (Y-\\beta_1X_1-\\beta_2X_2)^2 + \\lambda(|\\beta_1|+|\\beta_2|)\\]"
  },
  {
    "objectID": "slides/ml/index.html#markov-chain-monte-carlo-mcmc-introduction",
    "href": "slides/ml/index.html#markov-chain-monte-carlo-mcmc-introduction",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Markov Chain Monte Carlo (MCMC): introduction",
    "text": "Markov Chain Monte Carlo (MCMC): introduction\n\n\n\n\nIntegration via Monte Carlo sampling\n\n\n\n\n\\[\\small I = 2\\int\\limits_2^4{x dx}=2\\frac{x^2}{2} \\Big|_2^4 = 16 - 4 = 12\\]\n\n\n\nf &lt;- function(x){return(2*x)}; a &lt;- 2; b &lt;- 4; N &lt;- 10000; count &lt;- 0\nx &lt;- seq(from = a, to = b, by = (b-a) / N); y_max &lt;- max(f(x))\nfor(i in 1:N)\n{\n  x_sample &lt;- runif(1, a, b); y_sample &lt;- runif(1, 0, y_max)\n  if(y_sample &lt;= f(x_sample)){count &lt;- count + 1}\n}\npaste0(\"Integral by Monte Carlo: I = \", (count / N) * (b - a) * y_max)\n\n[1] \"Integral by Monte Carlo: I = 11.9248\"\n\n\n\n\n\n\n\n\nMarkov Chain Monte Carlo (MCMC)\n\n\n\n\\[\\small \\rm{Hastings \\,\\, ratio} = \\frac{\\rm{Posterior}\\,(\\,\\rm{params_{next}} \\,|\\, \\rm{data}\\,)}{\\rm{Posterior}\\,(\\,\\rm{params_{previous}} \\,|\\, \\rm{data}\\,)}\\]\n\n\n\nIf Hastings ratio &gt; u [0, 1], then accept, else reject \nHastings ratio does not contain the intractable integral from Bayes theorem"
  },
  {
    "objectID": "slides/ml/index.html#markov-chain-monte-carlo-mcmc-from-scratch-in-r",
    "href": "slides/ml/index.html#markov-chain-monte-carlo-mcmc-from-scratch-in-r",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Markov Chain Monte Carlo (MCMC) from scratch in R",
    "text": "Markov Chain Monte Carlo (MCMC) from scratch in R\n\n\n\nExample from population genetics\n\n\n\n\\[\\small L(n \\, | \\, f) = \\prod_g{\\left[ {2\\choose g} f^g (1-f)^{2-g}  \\right]^{n_g}}\\]\n\n\n\\[\\small \\frac{\\partial \\log\\left[L(n | f)\\right]}{\\partial f} = 0 \\, \\Rightarrow \\hat{f}=\\frac{n_1+2n_2}{2(n_0+n_1+n_2)}\\]\n\n\n\\[\\small \\rm{Prior}(f, \\alpha, \\beta) = \\frac{1}{B(\\alpha, \\beta)} f^{\\alpha-1} (1-f)^{\\beta-1}\\]\n\n\n\n\nN &lt;- 100; n &lt;- c(25, 50, 25) # Observed genotype data for N individuals\nf_MLE &lt;- (n[2] + 2*n[3]) / (2 * sum(n)) # MLE of allele frequency\n\n# Define log-likelihood function (log-binomial distribution)\nLL &lt;- function(n, f){return((n[2] + 2*n[3])*log(f) + (n[2] + 2*n[1])*log(1-f))}\n# Define log-prior function (log-beta distribution)\nLP &lt;- function(f, alpha, beta){return(dbeta(f, alpha, beta, log = TRUE))}\n\n# Run MCMC Metropolis - Hastings sampler\nf_poster &lt;- vector(); alpha &lt;- 0.5; beta &lt;- 0.5; f_cur &lt;- 0.1 # initialization\nfor(i in 1:1000)\n{\n  f_next &lt;- abs(rnorm(1, f_cur, 0.1)) # make random step for allele frequency\n  \n  LL_cur &lt;- LL(n, f_cur); LL_next &lt;- LL(n, f_next)\n  LP_cur &lt;- LP(f_cur, alpha, beta); LP_next &lt;- LP(f_next, alpha, beta)\n  hastings_ratio &lt;- LL_next + LP_next - LL_cur - LP_cur\n  \n  if(hastings_ratio &gt; log(runif(1))){f_cur &lt;- f_next}; f_poster[i] &lt;- f_cur\n}"
  },
  {
    "objectID": "slides/ml/index.html#moving-from-statistics-to-machine-learning",
    "href": "slides/ml/index.html#moving-from-statistics-to-machine-learning",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Moving from statistics to machine learning",
    "text": "Moving from statistics to machine learning\n\n\n\nStatistics is more analytical (pen & paper)\n\n\n\\[\\rm{L}\\,(\\,x_i \\,|\\, \\mu,\\sigma^2\\,) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp^{\\displaystyle -\\frac{\\sum\\limits_{i=1}^N (x_i-\\mu)^2}{2\\sigma^2}}\\]\n\n\n\\[\\frac{\\partial \\rm{L}\\,(\\,x_i \\,|\\, \\mu,\\sigma^2\\,)}{\\partial\\mu} = 0; \\,\\, \\frac{\\partial \\rm{L}\\,(\\,x_i \\,|\\, \\mu,\\sigma^2\\,)}{\\partial\\sigma^2} = 0\\]\n\n\n\\[\\mu = \\frac{1}{N}\\sum_{i=0}^N x_i \\,\\,\\rm{-}\\,\\rm{mean \\, estimator}\\]\n\\[\\sigma^2 = \\frac{1}{N}\\sum_{i=0}^N (x_i-\\mu)^2 \\,\\,\\rm{-}\\,\\rm{variance \\, estimator}\\]\n\n\n\n\nMachine Learning is more algorithmic (ex. K-means)\n\n\n\n\nK = 3; set.seed(123); c = X[sample(1:dim(X)[1],K),]; par(mfrow=c(2,2),mai=c(0.8,1,0,0))\nplot(X, xlab = \"X\", ylab = \"Y\", pch = 19); points(c, col = \"blue\", cex = 3, pch = 19)\nfor(t in 1:3)\n{\n  l &lt;- vector()\n  for(i in 1:dim(X)[1])\n  {\n    d &lt;- vector(); for(j in 1:K){d[j] &lt;- sqrt((X[i,1]-c[j,1])^2 + (X[i,2]-c[j,2])^2)} \n    l[i] &lt;- which.min(d)\n  }\n  plot(X, xlab=\"X\", ylab=\"Y\", col=l, pch=19); points(c, col=\"blue\", cex=3, pch=19)\n  s = list(); for(i in unique(l)){s[[i]] &lt;- colMeans(X[l==i,])}; c = Reduce(\"rbind\", s)\n}"
  },
  {
    "objectID": "slides/ml/index.html#statistics-vs.-machine-learning-prediction",
    "href": "slides/ml/index.html#statistics-vs.-machine-learning-prediction",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Statistics vs. machine learning: prediction",
    "text": "Statistics vs. machine learning: prediction"
  },
  {
    "objectID": "slides/ml/index.html#how-does-machine-learning-work",
    "href": "slides/ml/index.html#how-does-machine-learning-work",
    "title": "Mathematical statistics and machine learning in R",
    "section": "How does machine learning work?",
    "text": "How does machine learning work?\n\n\n\n\nMachine Learning typically involves five basic steps:  1. Split data set into train, validation and test subsets \n\n\nFit the model on the train subset \n\n\n\n\nValidate your model on the validation subset \n\n\n\n\nRepeat train - validation split many times and tune hyperparameters \n\n\n\n\nTest the accuracy of the optimized model on the test subset."
  },
  {
    "objectID": "slides/ml/index.html#toy-example-of-machine-learning",
    "href": "slides/ml/index.html#toy-example-of-machine-learning",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Toy example of machine learning",
    "text": "Toy example of machine learning\n\n\n\nN &lt;- 100\nx &lt;- rnorm(N)\ny &lt;- 2 * x + rnorm(N)\ndf &lt;- data.frame(x, y)\nplot(y ~ x, data = df, col = \"blue\")\nlegend(\"topleft\", \"Data points\", fill = \"blue\", bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\ntrain &lt;- df[sample(1:dim(df)[1], 0.7 * dim(df)[1]), ]\ntest &lt;- df[!rownames(df) %in% rownames(train), ]\ndf$col &lt;- ifelse(rownames(df) %in% rownames(test), \"red\", \"blue\")\nplot(y ~ x, data = df, col = df$col)\nlegend(\"topleft\", c(\"Train\",\"Test\"), fill=c(\"blue\",\"red\"), bty=\"n\")\nabline(lm(y ~ x, data = train), col = \"blue\")"
  },
  {
    "objectID": "slides/ml/index.html#toy-example-model-validation",
    "href": "slides/ml/index.html#toy-example-model-validation",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Toy example: model validation",
    "text": "Toy example: model validation\n\n\n\ntest_predicted &lt;- as.numeric(predict(lm(y ~ x, data = train), newdata = test))\nplot(test$y ~ test_predicted, ylab = \"True y\", xlab = \"Pred y\", col = \"red\")\nabline(lm(test$y ~ test_predicted), col = \"darkgreen\")\n\n\n\n\n\n\n\n\n\n\n\nsummary(lm(test$y ~ test_predicted))\n\n\nCall:\nlm(formula = test$y ~ test_predicted)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.80597 -0.78005  0.07636  0.52330  2.61924 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     0.02058    0.21588   0.095    0.925    \ntest_predicted  0.89953    0.08678  10.366 4.33e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.053 on 28 degrees of freedom\nMultiple R-squared:  0.7933,    Adjusted R-squared:  0.7859 \nF-statistic: 107.4 on 1 and 28 DF,  p-value: 4.329e-11\n\n\n Thus the model explains 79% of variation on the test subset."
  },
  {
    "objectID": "slides/ml/index.html#from-linear-models-to-artificial-neural-networks-anns",
    "href": "slides/ml/index.html#from-linear-models-to-artificial-neural-networks-anns",
    "title": "Mathematical statistics and machine learning in R",
    "section": "From linear models to artificial neural networks (ANNs)",
    "text": "From linear models to artificial neural networks (ANNs)\n\n\n\nANN: a mathematical function Y = f(X) with a special architecture\n\n\n\nCan be non-linear depending on activation function \n\n\n\n\n\n\n\n\nBackward propagation (gradient descent) for minimizing error\n\n\n\n\nUniversal Approximation Theorem"
  },
  {
    "objectID": "slides/ml/index.html#gradient-descent",
    "href": "slides/ml/index.html#gradient-descent",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Gradient descent",
    "text": "Gradient descent\n\n\n\n\\[y_i = \\alpha + \\beta x_i + \\epsilon, \\,\\, i = 1 \\ldots n\\]\n\\[E(\\alpha, \\beta) = \\frac{1}{n}\\sum_{i=1}^n(y_i - \\alpha - \\beta x_i)^2\\]\n\n\n\\[\\hat{\\alpha}, \\hat{\\beta} = \\rm{argmin} \\,\\, E(\\alpha, \\beta)\\]\n\n\n\\[\\frac{\\partial E(\\alpha, \\beta)}{\\partial\\alpha} = -\\frac{2}{n}\\sum_{i=1}^n(y_i - \\alpha - \\beta x_i)\\]\n\\[\\frac{\\partial E(\\alpha, \\beta)}{\\partial\\beta} = -\\frac{2}{n}\\sum_{i=1}^n x_i(y_i - \\alpha - \\beta x_i)\\]\n\n\nNumeric implementation of gradient descent:\n\\[\\alpha_{i+1} = \\alpha_i - \\eta \\left. \\frac{\\partial E(\\alpha, \\beta)}{\\partial\\alpha} \\right\\vert_{\\alpha=\\alpha_i,\\beta=\\beta_i}\\]\n\\[\\beta_{i+1} = \\beta_i - \\eta \\left. \\frac{\\partial E(\\alpha, \\beta)}{\\partial\\beta} \\right\\vert_{\\alpha=\\alpha_i,\\beta=\\beta_i}\\]"
  },
  {
    "objectID": "slides/ml/index.html#coding-gradient-descent-from-scratch-in-r",
    "href": "slides/ml/index.html#coding-gradient-descent-from-scratch-in-r",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Coding gradient descent from scratch in R",
    "text": "Coding gradient descent from scratch in R\n\n\n\nn &lt;- 100 # sample size\nx &lt;- rnorm(n) # simulated expanatory variable\ny &lt;- 3 + 2 * x + rnorm(n) # simulated response variable\nsummary(lm(y ~ x))\n\n\nCall:\nlm(formula = y ~ x)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9073 -0.6835 -0.0875  0.5806  3.2904 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  2.89720    0.09755   29.70   &lt;2e-16 ***\nx            1.94753    0.10688   18.22   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9707 on 98 degrees of freedom\nMultiple R-squared:  0.7721,    Adjusted R-squared:  0.7698 \nF-statistic:   332 on 1 and 98 DF,  p-value: &lt; 2.2e-16\n\n\n Let us now reconstruct the intercept and slope from gradient descent\n\n\n\nalpha &lt;- vector(); beta &lt;- vector()\nE &lt;- vector(); dEdalpha &lt;- vector(); dEdbeta &lt;- vector()\neta &lt;- 0.01; alpha[1] &lt;- 1; beta[1] &lt;- 1 # initialize alpha and beta\nfor(i in 1:1000)\n{\n  E[i] &lt;- (1/n) * sum((y - alpha[i] - beta[i] * x)^2)  \n  dEdalpha[i] &lt;- - sum(2 * (y - alpha[i] - beta[i] * x)) / n\n  dEdbeta[i] &lt;- - sum(2 * x * (y - alpha[i] - beta[i] * x)) / n\n  \n  alpha[i+1] &lt;- alpha[i] - eta * dEdalpha[i]\n  beta[i+1] &lt;- beta[i] - eta * dEdbeta[i]\n}\nprint(paste0(\"alpha = \", tail(alpha, 1),\", beta = \", tail(beta, 1)))\n\n[1] \"alpha = 2.89719694937354, beta = 1.94752837381973\""
  },
  {
    "objectID": "slides/ml/index.html#ann-from-scratch-in-r-problem-formulation",
    "href": "slides/ml/index.html#ann-from-scratch-in-r-problem-formulation",
    "title": "Mathematical statistics and machine learning in R",
    "section": "ANN from scratch in R: problem formulation",
    "text": "ANN from scratch in R: problem formulation\n\n\n\n\nd &lt;- c(0, 0, 1, 1)  # true labels\nx1 &lt;- c(0, 0, 1, 1) # input variable x1\nx2 &lt;- c(0, 1, 0, 1) # input variable x2\n\ndata.frame(x1 = x1, x2 = x2, d = d)\n\n\n\n\n\nx1\nx2\nd\n\n\n\n\n0\n0\n0\n\n\n0\n1\n0\n\n\n1\n0\n1\n\n\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\\[y(w_1,w_2)=\\phi(w_1x_1+w_2x_2)\\]\n\n\n\\[\\phi(s)=\\frac{1}{1+e^{\\displaystyle -s}} \\,\\,\\rm{-}\\,\\rm{sigmoid}\\]\n\n\n\\[\\phi^\\prime(s)=\\phi(s)\\left(1-\\phi(s)\\right)\\]"
  },
  {
    "objectID": "slides/ml/index.html#ann-from-scratch-in-r-implementation-in-code",
    "href": "slides/ml/index.html#ann-from-scratch-in-r-implementation-in-code",
    "title": "Mathematical statistics and machine learning in R",
    "section": "ANN from scratch in R: implementation in code",
    "text": "ANN from scratch in R: implementation in code\n\n\n\nphi &lt;- function(x){return(1/(1 + exp(-x)))} # activation function\n\nmu &lt;- 0.1; N_epochs &lt;- 10000\nw1 &lt;- 0.1; w2 &lt;- 0.5; E &lt;- vector()\nfor(epochs in 1:N_epochs)\n{\n  #Forward propagation\n  y &lt;- phi(w1 * x1 + w2 * x2 - 3) # we use a fixed bias -3\n  \n  #Backward propagation\n  E[epochs] &lt;- (1 / (2 * length(d))) * sum((d - y)^2)\n  dE_dw1 &lt;- - (1 / length(d)) * sum((d - y) * y * (1 - y) * x1)\n  dE_dw2 &lt;- - (1 / length(d)) * sum((d - y) * y * (1 - y) * x2)\n  w1 &lt;- w1 - mu * dE_dw1\n  w2 &lt;- w2 - mu * dE_dw2\n}\nplot(E ~ seq(1:N_epochs), xlab=\"Epochs\", ylab=\"Error\", col=\"red\")\n\n\n\n\n\n\n\n\n\n\n\\[E(w_1,w_2)=\\frac{1}{2N}\\sum_{i=1}^N\\left(d_i-y_i(w_1,w_2)\\right)^2\\]\n\n\n\\[w_{1,2}=w_{1,2}-\\mu\\frac{\\partial E(w_1,w_2)}{\\partial w_{1,2}}\\]\n\n\n\\[\\frac{\\partial E}{\\partial w_1} = -\\frac{1}{N}\\sum_{i=1}^N (d_i-y_i)*y_i*(1-y_i)*x_{1i}\\]\n\\[\\frac{\\partial E}{\\partial w_2} = -\\frac{1}{N}\\sum_{i=1}^N (d_i-y_i)*y_i*(1-y_i)*x_{2i}\\]\n\n\n\ny\n\n[1] 0.04742587 0.05752359 0.95730271 0.96489475\n\n\nWe nearly reconstruct true labels d = (0, 0, 1, 1)"
  },
  {
    "objectID": "slides/ml/index.html#decision-tree-from-scratch-in-r-problem-formulation",
    "href": "slides/ml/index.html#decision-tree-from-scratch-in-r-problem-formulation",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Decision tree from scratch in R: problem formulation",
    "text": "Decision tree from scratch in R: problem formulation\n\n\n\nX&lt;-data.frame(height=c(183,167,178,171),weight=c(78,73,85,67))\ny&lt;-as.factor(c(\"Female\", \"Male\", \"Male\", \"Female\"))\ndata.frame(X, sex = y)\n\n\n\n\n\nheight\nweight\nsex\n\n\n\n\n183\n78\nFemale\n\n\n167\n73\nMale\n\n\n178\n85\nMale\n\n\n171\n67\nFemale\n\n\n\n\n\n\n\n\nlibrary(\"rpart\"); library(\"rpart.plot\")\nfit&lt;-rpart(y~height+weight,data=X,method=\"class\",minsplit=-1)\nrpart.plot(fit)\n\n\n\n\n\n\n\n\n\n\n\n\nLet us visualize what the classifier has learnt\n\n\n\n\ncolor &lt;- c(\"red\", \"blue\", \"blue\", \"red\")\nplot(height ~ weight, data = X, col = color, pch = 19, cex = 3)\nlegend(\"topleft\",c(\"Male\",\"Female\"),fill=c(\"blue\",\"red\"),inset=.02)\n\nabline(h = 169, lty = 2, col = \"darkgreen\", lwd = 1.5)\nabline(v = 82, lty = 2, col = \"darkgreen\", lwd = 1.5)"
  },
  {
    "objectID": "slides/ml/index.html#decision-tree-from-scratch-in-r-gini-index-and-split",
    "href": "slides/ml/index.html#decision-tree-from-scratch-in-r-gini-index-and-split",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Decision tree from scratch in R: Gini index and split",
    "text": "Decision tree from scratch in R: Gini index and split\n\n\n\n\n\ngini &lt;- function(x)\n{\n  return(1 - sum((table(x) / length(x))^2))\n}\ngini(c(1, 0, 1, 0))\n\n[1] 0.5\n\n\n\ngini(c(1, 1, 0, 1, 1))\n\n[1] 0.32\n\n\n\n\n\n\nget_best_split &lt;- function(X, y)\n{\n  mean_gini &lt;- vector(); spl_vals &lt;- vector(); spl_names &lt;- vector()\n  for(j in colnames(X)) # for each variable in X data frame\n  {\n    spl &lt;- vector() # vector of potential split candidates\n    sort_X &lt;- X[order(X[, j]), ]; sort_y &lt;- y[order(X[, j])] # sort by variable\n    for(i in 1:(dim(X)[1]-1)) # for each observation of variable in X data frame\n    {\n      spl[i] &lt;- (sort_X[i, j] + sort_X[(i + 1), j]) / 2 # variable consecutive means\n      g1_y &lt;- sort_y[sort_X[, j] &gt; spl[i]] # take labels for group above split\n      g2_y &lt;- sort_y[sort_X[, j] &lt; spl[i]] # take labels for group below split\n      mean_gini &lt;- append(mean_gini, (gini(g1_y) + gini(g2_y))/2) # two groups mean Gini\n      spl_vals &lt;- append(spl_vals, spl[i])\n      spl_names &lt;- append(spl_names, j)\n    }\n  }\n  min_spl_val &lt;- spl_vals[mean_gini == min(mean_gini)][1] # get best split variable\n  min_spl_name &lt;- spl_names[mean_gini == min(mean_gini)][1] # get best split value\n  sort_X &lt;- X[order(X[, min_spl_name]), ] # sort X by best split variable\n  sort_y &lt;- y[order(X[, min_spl_name])] # sort y by best split variable\n  g1_y &lt;- sort_y[sort_X[, min_spl_name] &gt; min_spl_val] # labels above best split\n  g2_y &lt;- sort_y[sort_X[, min_spl_name] &lt; min_spl_val] # labels below best split\n  if(gini(g1_y) == 0){sex &lt;- paste0(\"Above: \", as.character(g1_y))}\n  else if(gini(g2_y) == 0){sex &lt;- paste0(\"Below: \", as.character(g2_y))}\n  \n  return(list(spl_name = min_spl_name, spl_value = min_spl_val, sex = sex))\n}\nget_best_split(X, y)\n\n$spl_name\n[1] \"height\"\n\n$spl_value\n[1] 169\n\n$sex\n[1] \"Below: Male\""
  },
  {
    "objectID": "slides/ml/index.html#decision-tree-from-scratch-in-r-code-implementation",
    "href": "slides/ml/index.html#decision-tree-from-scratch-in-r-code-implementation",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Decision tree from scratch in R: code implementation",
    "text": "Decision tree from scratch in R: code implementation\n\n\n\nAfter we have found the best split, let us check what group we can split further: get_new_data function\n\n\n\nget_new_data &lt;- function(X, y)\n{\n  spl_name &lt;- get_best_split(X, y)$spl_name\n  spl_val &lt;- get_best_split(X, y)$spl_value\n  \n  # Sort X and y by the variable of the best split\n  sort_X &lt;- X[order(X[, spl_name]), ]; sort_y &lt;- y[order(X[, spl_name])]\n  \n  # get X and y for the first group of samples above the best split value\n  g1_y &lt;- sort_y[sort_X[, spl_name] &gt; spl_val]\n  g1_X &lt;- sort_X[sort_X[, spl_name] &gt; spl_val,]\n  \n  # get X and y for the second group of samples below the best split value\n  g2_y &lt;- sort_y[sort_X[, spl_name] &lt; spl_val]\n  g2_X &lt;- sort_X[sort_X[, spl_name] &lt; spl_val,]\n  \n  # return new data (subset of X and y) for a group with Gini index &gt; 0\n  if(gini(g1_y) &gt; 0){return(list(new_X = g1_X, new_y = g1_y))}\n  else if(gini(g2_y) &gt; 0){return(list(new_X = g2_X, new_y = g2_y))}\n  else{return(0)}\n}\nget_new_data(X, y)\n\n$new_X\n  height weight\n4    171     67\n3    178     85\n1    183     78\n\n$new_y\n[1] Female Male   Female\nLevels: Female Male\n\n\n\n\n\n\nWe can train a decision tree of max_depth = 2\n\n\n\n\ndecision_tree &lt;- function(X, y, max_depth = 2)\n{\n  new_X &lt;- X; new_y &lt;- y\n  df &lt;- data.frame(matrix(ncol = 5, nrow = max_depth))\n  colnames(df) &lt;- c(\"spl_num\", \"spl_name\", \"sign\", \"spl_val\", \"label\")\n  for(i in 1:max_depth)\n  {\n    best_split_output &lt;- get_best_split(new_X, new_y)\n    sex &lt;- unlist(strsplit(best_split_output$sex,\": \"))\n    df[i, \"spl_num\"] &lt;- i\n    df[i, \"spl_name\"] &lt;- best_split_output$spl_name\n    df[i, \"sign\"] &lt;- ifelse(sex[1] == \"Below\", \"&lt;\", \"&gt;\")\n    df[i, \"spl_val\"] &lt;- best_split_output$spl_value\n    df[i, \"label\"] &lt;- sex[2]\n    \n    new_data_output &lt;- get_new_data(new_X, new_y)\n    if(length(new_data_output) != 1)\n    {\n      new_X &lt;- new_data_output$new_X\n      new_y &lt;- new_data_output$new_y\n    }\n    else\n    {\n      print(\"All terminal nodes have perfect purity\")\n      break\n    }\n  }\n  return(df)\n}\ndecision_tree(X, y)\n\n[1] \"All terminal nodes have perfect purity\"\n\n\n\n\n\n\nspl_num\nspl_name\nsign\nspl_val\nlabel\n\n\n\n\n1\nheight\n&lt;\n169.0\nMale\n\n\n2\nweight\n&gt;\n81.5\nMale"
  },
  {
    "objectID": "slides/ml/index.html#decision-tree-from-scratch-in-r-prediction",
    "href": "slides/ml/index.html#decision-tree-from-scratch-in-r-prediction",
    "title": "Mathematical statistics and machine learning in R",
    "section": "Decision tree from scratch in R: prediction",
    "text": "Decision tree from scratch in R: prediction\n\n\n\nFinally, after we have trained the decision tree, we can try to make predictions, and check whether we can reconstruct the labels of the data points\n\n\n\npredict_decision_tree &lt;- function(X, y)\n{\n  # Train a decision tree\n  t &lt;- decision_tree(X, y, max_depth = 2)\n  \n  # Parse the output of decision tree and code it via if, else if and else\n  pred_labs &lt;- vector()\n  for(i in 1:dim(X)[1])\n  {\n    if(eval(parse(text=paste0(X[i,t$spl_name[1]],t$sign[1],t$spl_val[1]))))\n    {\n      pred_labs[i] &lt;- t$label[1]\n    }\n    else if(eval(parse(text=paste0(X[i,t$spl_name[2]],t$sign[2],t$spl_val[2]))))\n    {\n      pred_labs[i] &lt;- t$label[2]\n    }\n    else{pred_labs[i] &lt;- ifelse(t$label[2] == \"Male\", \"Female\", \"Male\")}\n  }\n\n  return(cbind(cbind(X, y), pred_labs))\n}\npredict_decision_tree(X, y)\n\n[1] \"All terminal nodes have perfect purity\"\n\n\n\n\n\n\nheight\nweight\ny\npred_labs\n\n\n\n\n183\n78\nFemale\nFemale\n\n\n167\n73\nMale\nMale\n\n\n178\n85\nMale\nMale\n\n\n171\n67\nFemale\nFemale\n\n\n\n\n\n\n\n\n\n\nRandom Forest has two key differences:\n\ntrain multiple decision trees (bagging)\ntrain trees on fractions of input features"
  },
  {
    "objectID": "slides/ml/index.html#section",
    "href": "slides/ml/index.html#section",
    "title": "Mathematical statistics and machine learning in R",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/git/index.html#overview",
    "href": "slides/git/index.html#overview",
    "title": "git and R",
    "section": "Overview",
    "text": "Overview\n\n\n\nWhat is git and why should I use it?\ngit set-up\ngit for yourself\ngit with github\nSummary\n\n\n \n\n\n\nMaybe start with a show of hands. “How many have heard the word git before?” “How many have used git before?” “How many had a github account before the course?”\nThroughout I will show how to do things from RStudio, since this is an R course. In git with github I will not only show how to integrate github for yourself but also with collaborators."
  },
  {
    "objectID": "slides/git/index.html#what-is-git-and-why-should-i-use-it",
    "href": "slides/git/index.html#what-is-git-and-why-should-i-use-it",
    "title": "git and R",
    "section": "What is git and why should I use it?",
    "text": "What is git and why should I use it?\n\n\n\n\n\n\nTrack changes\nRevert changes\nReproducibility\nBackups\nWorking with others\n\n\n\n\nBasically, say you have a folder with a bunch of files. And you want to track what changes you have made to every file, kind of like a word or google slide document with track changes. As you are tracking these changes you also have the possibility to revert these changes and go back in time to an earlier state of the files.\nWhy would you want to do this? It is very useful for working reproducibly to have a complete log of what you have done, it is good for backup, especially if you are also connecting and synchronizing your collection of files with some service such as github, more on that later. It is also very good when you want to work with others in a highly structured way, making sure that many people can work on the same thing without messing it up.\nThere are other advantages of course but I do not want to overload you, so in this lecture we will be focusing on basic git usage and there are loads of online resources to take you further than that."
  },
  {
    "objectID": "slides/git/index.html#what-is-git-and-why-should-i-use-it-1",
    "href": "slides/git/index.html#what-is-git-and-why-should-i-use-it-1",
    "title": "git and R",
    "section": "What is git and why should I use it?",
    "text": "What is git and why should I use it?\n\nVersion control\n\nIn software development, version control is a class of systems responsible for managing changes to computer programs or other collections of information such that revisions have a logical and consistent organization.\nhttps://en.wikipedia.org/wiki/Comparison_of_version-control_software\n\n\nRepository\n\nA collection of files under version control.\n\n\nGit is version control system, tracking changes for all files in a repository. This is not the only way to get version control of your files."
  },
  {
    "objectID": "slides/git/index.html#git-set-up",
    "href": "slides/git/index.html#git-set-up",
    "title": "git and R",
    "section": "git set-up",
    "text": "git set-up\n\nChecking configuration\n\nusethis::git_sitrep()\n\n\nBefore the course started you received an email that asked you to have a github account and git available on commandline. Since this is an R focused course we will use Rstudio to check, and in some cases set, some of your configurations.\nYou do not have to do this in R or Rstudio, you can also do this with other git commands from terminal.\nTo do this we will use the usethis library. git_sitrep() is a great tool for checking what configurations you have set.\nDemo git_sitrep"
  },
  {
    "objectID": "slides/git/index.html#git-set-up-1",
    "href": "slides/git/index.html#git-set-up-1",
    "title": "git and R",
    "section": "git set-up",
    "text": "git set-up\n\nChecking configuration\n\nusethis::git_sitrep()\nGit config (global)\n• Name: 'Sebastian-D'\n• Email: 'dilorenzo.sebastian@gmail.com'\n• Global (user-level) gitignore file: &lt;unset&gt;\n• Vaccinated: FALSE\nℹ See `?git_vaccinate` to learn more\n• Default Git protocol: 'https'\n• Default initial branch name: &lt;unset&gt;\nGitHub\n• Default GitHub host: 'https://github.com'\n• Personal access token for 'https://github.com': '&lt;discovered&gt;'\n• GitHub user: 'Sebastian-D'\n• Token scopes: 'repo, user, workflow'\n• Email(s): 'dilorenzo.sebastian@gmail.com (primary)', 'sebastian.dilorenzo@scilifelab.uu.se'\nGit repo for current project\n• Active usethis project: '/Users/sd/Library/CloudStorage/Box-Box/Work/NBIS_CommMan'\nℹ Active project is not a Git repo\n\n\nLets forcus on that our git global config has a name, which should be the same as the github username, an email associated with both my local git and my github, you can see your default protocol which is usually https unless you have some great reason for having SSH.\nIn the github section we can also see that we have a personal access token or PAT, and that token has certain scopes related to it. I will get back to this in a moment."
  },
  {
    "objectID": "slides/git/index.html#git-set-up-2",
    "href": "slides/git/index.html#git-set-up-2",
    "title": "git and R",
    "section": "git set-up",
    "text": "git set-up\n\nSetting global configuration\n\nusethis::use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.com\")\n\n\nuse_git_config(user.name = “Jane Doe”, user.email = “jane@example.com”)\nIf you want to use commandline: git config –global –list git config –global user.name ‘Jane Doe’ git config –global user.email ‘jane@example.com’"
  },
  {
    "objectID": "slides/git/index.html#git-set-up-3",
    "href": "slides/git/index.html#git-set-up-3",
    "title": "git and R",
    "section": "git set-up",
    "text": "git set-up\n\nPersonal Access Token (PAT)\n\nCredentials\nScope\n\n“What is this PAT allowed to modify?”\n\nNo password prompt when uploading/downloading data.\n\n\n#Takes you to github.com create new token.\nusethis::create_github_token()\n\n#Use to set your new token in your configuration\ngitcreds::gitcreds_set()\n\n\nWhen we interact with a remote Git server, such as GitHub, we have to include credentials in the request. This proves we are a specific GitHub user, who’s allowed to do whatever we’re asking to do. What we are allowed to do with a certain PAT is the scope of the PAT.\nDEMO create_github_token\nOnce we have created our token we can save it in a password manager if you are using that. Then set it with our configuration with gitcreds_set(). Let’s do this now, then check out gitcreds_sitrep().\nusethis::create_github_token() gitcreds::gitcreds_set() credentials::set_github_pat(“my_pat”)"
  },
  {
    "objectID": "slides/git/index.html#git-for-yourself",
    "href": "slides/git/index.html#git-for-yourself",
    "title": "git and R",
    "section": "git for yourself",
    "text": "git for yourself\n\n\nNow that we hopefully are all set-up, lets finally take a look at actually working with git. As a user, git is a folder and collection of files on your computer that you have initiated git version control on. A repository.\nTo revert: git reset HEAD~"
  },
  {
    "objectID": "slides/git/index.html#git-for-yourself-1",
    "href": "slides/git/index.html#git-for-yourself-1",
    "title": "git and R",
    "section": "git for yourself",
    "text": "git for yourself\n\nWorkflow:\n\nMake some changes.\n\n\n\ngit add the new or changed files.\n\n\n\n\ngit commit the current state of repository.\n\n\nAs you make changes to the files you can save the current state of the files. This is called a commit. You can and should give the commit some message describing what you have done. “Fixed bug A”, “Created function B”, “Added a bunch of new images”. It is these commits then that you can revert to as necessary. DEMO RSTUDIO"
  },
  {
    "objectID": "slides/git/index.html#git-for-yourself-2",
    "href": "slides/git/index.html#git-for-yourself-2",
    "title": "git and R",
    "section": "git for yourself",
    "text": "git for yourself\n\nUseful commands:\n\ngit status lists changes in your repository.\n\n\n\ngit diff shows the difference between a file and its last commit state.\n\n\n\n\ngit reset go to a previous commit state.\n\n\n\n\nusethis::use_git(), initialize git in a project that did not have git activated.\n\n\ngit diff git status git reset HEAD~ usethis::use_git()\nDEMO"
  },
  {
    "objectID": "slides/git/index.html#git-with-github",
    "href": "slides/git/index.html#git-with-github",
    "title": "git and R",
    "section": "git with github",
    "text": "git with github\n\n\n\ngit clone, copy the github repository to a local repository.\n\n\n\n\nCreate a repository on github from your current RStudio git repository: usethis::use_github()\n\n\n\n\ngit push your local file changes to the github repository.\n\n\n\n\ngit pull the github repositories file changes to your local repository.\n\n\nSo what is github? In its very essence, github is a hosting service, a place where you can have your git repositories. By having them on github many people can collaborate on one code project at the same time. It also functions as a backup of your repository, so if something goes amiss with your local repository, you can always delete it and grab the backup from github.\nYou can go many ways about connecting your local git repository to github. You can create the repository on github first and then create a local copy repository. You can also take a local repository and create a github repository from it.\nLets look at that as an example.\nConnect existing repository to a new github repo: usethis::use_github()\nClone a repo using rstudio File &gt; New Project &gt; Version Control &gt; Git\npush/pull with github\nDEMO"
  },
  {
    "objectID": "slides/git/index.html#git-with-github-1",
    "href": "slides/git/index.html#git-with-github-1",
    "title": "git and R",
    "section": "git with github",
    "text": "git with github\n\nWorking with others workflow\n1. pull changes made by others from github repo.\n2. Settle eventual merge conflicts.\n3. Make own changes.\n4. add and commit changes.\n5. Repeat 3 and 4 as necessary.\n6. push changes to github, sharing them with others.\n\n\nAssuming you already have a github repository and a cloned local repository."
  },
  {
    "objectID": "slides/git/index.html#summary",
    "href": "slides/git/index.html#summary",
    "title": "git and R",
    "section": "Summary",
    "text": "Summary\n\n\ngit and github are great for structured, reproducible, collaborative work.\n\n\n\nCreate a folder.\nMake it a RStudio project.\nMake it a git repository.\nConnect it to github.\nProfit.\n\n\n\ncommit often, push/pull less often.\n\n\nI wasn’t going to tell you more than this right now, but there is a lot more to say. But I think you need to go in and get your hands dirty with this before adding more topics or you will be overburdened. Because of this and because I imagine the level of prior git knowledge can vary greatly in class I have put a lot of extra exercises with explanatory information in the lab."
  },
  {
    "objectID": "slides/git/index.html#section",
    "href": "slides/git/index.html#section",
    "title": "git and R",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                     \nplatform aarch64-apple-darwin20\nos       darwin20              \nmajor    4                     \nminor    4.0                   \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/demo/index.html#introduction",
    "href": "slides/demo/index.html#introduction",
    "title": "Demo Slides",
    "section": "Introduction",
    "text": "Introduction\n\n\n\n\n\n\nNote\n\n\nThis is a demo to showcase the RaukR presentation design guide, usage and capabilities of this presentation system. This presentation is created using quarto. This presentation uses the javascript library revealjs as the underlying framework."
  },
  {
    "objectID": "slides/demo/index.html#getting-started",
    "href": "slides/demo/index.html#getting-started",
    "title": "Demo Slides",
    "section": "Getting started",
    "text": "Getting started\n\nIn RStudio, File &gt; New File &gt; Quarto Presentation\nAdd YAML matter to the top if not already there.\n\n---\ntitle: \"This is a title\"\nformat:\n  revealjs\n---\n\nClick the Render button for a rendered preview.\nOr use quarto::quarto_render() in R:\n\n\nquarto::quarto_render(\"slide.qmd\")\n\n\nOr use quarto render in the terminal:\n\n\nquarto render slide.qmd"
  },
  {
    "objectID": "slides/demo/index.html#slides",
    "href": "slides/demo/index.html#slides",
    "title": "Demo Slides",
    "section": "Slides",
    "text": "Slides\nSlide separators\nSlides are separated by ##. Incremental content on is separated by . . . like below.\nHide or not count a slide:\n## Slide Title {visibility=\"hidden\"}\n## Slide Title {visibility=\"uncounted\"}\n. . .\nSlide notes\nAny content inside class .notes on a slide are notes. This is only visible in presenter mode (by pressing s).\n. . .\nKeyboard shortcuts\n\nPress ?? for help.\n\n\nHere are some slide notes. Press s again to exit presenter mode."
  },
  {
    "objectID": "slides/demo/index.html#layout",
    "href": "slides/demo/index.html#layout",
    "title": "Demo Slides",
    "section": "Layout",
    "text": "Layout\nThe slide content can be organized into columns which can be nested if needed.\n:::{.columns}\n:::{.column width=\"50%\"}\n&lt;div style=\"background-color:#fdebd0\"&gt;Left content&lt;/div&gt;\n:::\n\n:::{.column width=\"50%\"}\n&lt;div style=\"background-color:#eaf2f8\"&gt;Right content&lt;/div&gt;\n\n:::{.column width=\"60%\"}\n&lt;div style=\"background-color:#d0ece7\"&gt;Inner left&lt;/div&gt;\n:::\n:::{.column width=\"40%\"}\n&lt;div style=\"background-color:#f2d7d5\"&gt;Inner right&lt;/div&gt;\n:::\n\n:::\n:::\n\n\n\nLeft content\n\n\n\nRight content\n\n\n\nInner left\n\n\n\n\nInner right"
  },
  {
    "objectID": "slides/demo/index.html#panel-tabs",
    "href": "slides/demo/index.html#panel-tabs",
    "title": "Demo Slides",
    "section": "Panel tabs",
    "text": "Panel tabs\n\nTab ATab B\n\n\nContent for Tab A\n\n\nContent for Tab B"
  },
  {
    "objectID": "slides/demo/index.html#text-formatting",
    "href": "slides/demo/index.html#text-formatting",
    "title": "Demo Slides",
    "section": "Text Formatting",
    "text": "Text Formatting\nRendering of normal text, numbers and symbols.\nABCDEFGHIJKLMNOPQRSTUYWXYZÅÄÖ\nabcdefghijklmnopqrstuvwxyzåäö\n0123456789\n!“#%&/()$@*^~&lt;&gt;-:;,_±|?+=\n!\"#%&/\\()$@*^~&lt;&gt;-:;,_±|?+="
  },
  {
    "objectID": "slides/demo/index.html#text-formatting-1",
    "href": "slides/demo/index.html#text-formatting-1",
    "title": "Demo Slides",
    "section": "Text formatting",
    "text": "Text formatting\n\n\nHeadings can be defined as shown below.\n## Level 2 heading  \n### Level 3 heading  \n#### Level 4 heading  \n##### Level 5 heading  \n###### Level 6 heading\nLevel 3 heading\nLevel 4 heading\nLevel 5 heading\nLevel 6 heading\nLevel 1 usage is not recommended. Use level 2 for slide titles. Use level 3 and below for other titles.\n\nText scaling classes\n[Largest text]{.largest}\n[Larger text]{.larger}\n[Large text]{.large}\nNormal text.  \n[Small text]{.small}\n[Smaller text]{.smaller}\n[Smallest text]{.smallest}\nLargest text\nLarger text\nLarge text\nNormal text\nSmall text\nSmaller text\nSmallest text"
  },
  {
    "objectID": "slides/demo/index.html#text-formatting-2",
    "href": "slides/demo/index.html#text-formatting-2",
    "title": "Demo Slides",
    "section": "Text Formatting",
    "text": "Text Formatting\n\n\nHorizontal alignment of text can be adjusted as shown below.\n[Left aligned text]{.left}\n[Center aligned text]{.center}\n[Right aligned text]{.right}\nLeft aligned text\nCenter aligned text\nRight aligned text\n::: {.blockquote}\nThis line is quoted\n:::\n\nThis line is quoted\n\n\nA horizontal line can be created using ---\n\nThis is **Bold text** This is Bold text\nThis is *Italic text* This is Italic text\n~~Strikethrough~~ text Strikethrough text\nThis is subscript H~2~O H2O\nThis is superscript 2^10 210\nThis is a [badge]{.badge .badge-primary}\nThis is a badge\nThis is a [badge]{.badge .badge-secondary}\nThis is a badge\nThis is a [link](r-project.org) This is a link"
  },
  {
    "objectID": "slides/demo/index.html#text-formatting-3",
    "href": "slides/demo/index.html#text-formatting-3",
    "title": "Demo Slides",
    "section": "Text formatting",
    "text": "Text formatting\nFit text to full width.\n::: {.r-fit-text}\nAttention\n:::\n\nAttention"
  },
  {
    "objectID": "slides/demo/index.html#text-formatting-4",
    "href": "slides/demo/index.html#text-formatting-4",
    "title": "Demo Slides",
    "section": "Text formatting",
    "text": "Text formatting\nIn reports, .aside pushes content into the margin while in revealjs, it is pushed to the bottom.\n::: {.aside}\nContent inside aside.\n:::\n\n\nContent inside aside."
  },
  {
    "objectID": "slides/demo/index.html#lists",
    "href": "slides/demo/index.html#lists",
    "title": "Demo Slides",
    "section": "Lists",
    "text": "Lists\n\n\nUnordered List\n- Bullet 1\n- Bullet 2\n  - Sub-bullet 2.1\n\nBullet 1\nBullet 2\n\nSub-bullet 2.1\n\n\n\nIncremental List\n:::{.incremental}\n1. Incremental Bullet 1\n2. Incremental Bullet 2\n3. Incremental Bullet 3\n:::\n\n\nIncremental Bullet 1\nIncremental Bullet 2\nIncremental Bullet 3\n\n\nFor more options, see here."
  },
  {
    "objectID": "slides/demo/index.html#custom-css-styling",
    "href": "slides/demo/index.html#custom-css-styling",
    "title": "Demo Slides",
    "section": "Custom CSS styling",
    "text": "Custom CSS styling\n\nYou can style text using any custom CSS\nThis is a block level element\n\n::: {style=\"color: red\"}\nThis paragraph is red.\n:::\n\nThis paragraph is red.\n\n\nThis is a span. ie; A word or one line.\n\n[This text is blue]{style=\"color: blue\"}\nThis text is blue"
  },
  {
    "objectID": "slides/demo/index.html#callouts",
    "href": "slides/demo/index.html#callouts",
    "title": "Demo Slides",
    "section": "Callouts",
    "text": "Callouts\n\n\n::: {.callout-note}\nThis is a callout.\n:::\n\n::: {.callout-warning}\nThis is a callout.\n:::\n\n::: {.callout-important}\nThis is a callout.\n:::\n\n::: {.callout-tip}\nThis is a callout.\n:::\n\n::: {.callout-caution}\nThis is a callout.\n:::\n\n\n\n\n\n\n\nNote\n\n\nThis is a callout.\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThis is a callout.\n\n\n\n\n\n\n\n\n\nImportant\n\n\nThis is a callout.\n\n\n\n\n\n\n\n\n\nTip\n\n\nThis is a callout.\n\n\n\n\n\n\n\n\n\nCaution\n\n\nThis is a callout.\n\n\n\n\n\n\n\nCallOut blocks are documented here"
  },
  {
    "objectID": "slides/demo/index.html#callouts-1",
    "href": "slides/demo/index.html#callouts-1",
    "title": "Demo Slides",
    "section": "Callouts",
    "text": "Callouts\nVariants of callout\n\n\n::: {.callout-note icon=false}\nIcon is disabled\n:::\n\n::: {.callout-note appearance=\"simple\"}\nAppearance is simple\n:::\n\n::: {.callout-note appearance=\"minimal\"}\nAppearance is minimal\n:::\n\n::: {.callout-note appearance=\"simple\"}\n## Custom title\nSimple appearance and a custom title\n:::\n\n::: {.callout-note appearance=\"minimal\"}\n## Custom title\nMinimal appearance and a custom title\n:::\n\n\n\n\nNote\n\n\nIcon is disabled\n\n\n\n\n\n\n\n\n\nAppearance is simple\n\n\n\n\n\n\nAppearance is minimal\n\n\n\n\n\n\n\n\n\nCustom title\n\n\nSimple appearance and a custom title\n\n\n\n\n\n\nCustom title\n\n\nMinimal appearance and a custom title"
  },
  {
    "objectID": "slides/demo/index.html#callouts-2",
    "href": "slides/demo/index.html#callouts-2",
    "title": "Demo Slides",
    "section": "Callouts",
    "text": "Callouts\n::: {.callout-note}\n\nThis contains code\n\n## Callout with code\n\n```\nSys.Date()\n```\n\n:::\n\n\n\n\n\n\nCallout with code\n\n\nThis contains code\nSys.Date()"
  },
  {
    "objectID": "slides/demo/index.html#code-formatting",
    "href": "slides/demo/index.html#code-formatting",
    "title": "Demo Slides",
    "section": "Code formatting",
    "text": "Code formatting\nInline code\n\nCode can be defined inline where `this` looks like this.\nR code can be executed inline `r Sys.Date()` producing 2024-05-29.\n\n== != && ++ |&gt; &lt;&gt; &lt;- &lt;= &lt;~ /= |=&gt; -&gt;&gt;"
  },
  {
    "objectID": "slides/demo/index.html#code-formatting-1",
    "href": "slides/demo/index.html#code-formatting-1",
    "title": "Demo Slides",
    "section": "Code formatting",
    "text": "Code formatting\n\n\nCode chunks\nCode can also be defined inside chunks.\n```\nThis is code\n```\nThis is code\nR code is executed inside code blocks like this\n```{r}\nSys.Date()\n```\nwhich shows the code and output.\n\nSys.Date()\n\n[1] \"2024-05-29\"\n\n\n\nThe code and results can be hidden by\n```{r}\n#| echo: false\n#| results: hide\ndata(iris)\n```\n\ndata(iris)\nhead(iris[1:3,1:2])\n\n\n\n\n\nSepal.Length\nSepal.Width\n\n\n\n\n5.1\n3.5\n\n\n4.9\n3.0\n\n\n4.7\n3.2\n\n\n\n\n\n\nThese are called chunk attributes. For more options, see here and complete list here."
  },
  {
    "objectID": "slides/demo/index.html#code-sizing",
    "href": "slides/demo/index.html#code-sizing",
    "title": "Demo Slides",
    "section": "Code sizing",
    "text": "Code sizing\nSizing pre-formatted inline code\n\n\n[`Sys.Date()`]{.largest}\n[`Sys.Date()`]{.larger}\n[`Sys.Date()`]{.large}\n`Sys.Date()`\n[`Sys.Date()`]{.small}\n[`Sys.Date()`]{.smaller}\n[`Sys.Date()`]{.smallest}\nSys.Date()\nSys.Date()\nSys.Date()\nSys.Date()\nSys.Date()\nSys.Date()\nSys.Date()\n\nSizing pre-formatted code block\n::: {.small}\n```\nSys.Date()\n```\n:::\n\nSys.Date()\n\n\nSys.Date()\n\n\nSys.Date()"
  },
  {
    "objectID": "slides/demo/index.html#code-sizing-1",
    "href": "slides/demo/index.html#code-sizing-1",
    "title": "Demo Slides",
    "section": "Code sizing",
    "text": "Code sizing\nSizing source code\n\n\n```{r}\n#| eval: false\n#| class-source: small\nSys.Date()\n```\n\n\nSys.Date()\n\n\nSys.Date()\n\n\nSys.Date()\n\n\n\nSizing output code\n\n\n```{r}\n#| class-source: small\n#| classes: small\nSys.Date()\n```\n\n\nSys.Date()\n\n[1] \"2024-05-29\"\n\n\n\nSys.Date()\n\n[1] \"2024-05-29\"\n\n\n\nSys.Date()\n\n[1] \"2024-05-29\""
  },
  {
    "objectID": "slides/demo/index.html#code-highlighting",
    "href": "slides/demo/index.html#code-highlighting",
    "title": "Demo Slides",
    "section": "Code highlighting",
    "text": "Code highlighting\n\n\n```{r}\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"2-3\"\n\niris %&gt;%\n  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+\n  geom_point(size=2)+\n  labs(x=\"Sepal Length\",y=\"Sepal Width\")+\n  theme_report()\n```\n\niris %&gt;%\n  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+\n  geom_point(size=2)+\n  labs(x=\"Sepal Length\",y=\"Sepal Width\")+\n  theme_report()\n\n\n```{r}\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"2|3|5\"\n\niris %&gt;%\n  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+\n  geom_point(size=2)+\n  labs(x=\"Sepal Length\",y=\"Sepal Width\")+\n  theme_report()\n```\n\niris %&gt;%\n  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+\n  geom_point(size=2)+\n  labs(x=\"Sepal Length\",y=\"Sepal Width\")+\n  theme_report()\n\n\n\nFor more code highlighting documentation, see here."
  },
  {
    "objectID": "slides/demo/index.html#images-markdown",
    "href": "slides/demo/index.html#images-markdown",
    "title": "Demo Slides",
    "section": "Images • Markdown",
    "text": "Images • Markdown\nUsing Markdown\n\n\nUsing regular markdown.\n![](assets/image.jpg)\n\nThe dimensions are based on image and/or fill up the entire width.\n\nControl image dimensions.\n![](assets/image.jpg){width=50%}\n![](assets/image.jpg){width=20%}\n \nFor more image documentation, see here."
  },
  {
    "objectID": "slides/demo/index.html#images-markdown-layout",
    "href": "slides/demo/index.html#images-markdown-layout",
    "title": "Demo Slides",
    "section": "Images • Markdown • Layout",
    "text": "Images • Markdown • Layout\nFigure layout\n::: {layout-ncol=3}\n![Caption for figure 1](assets/image.jpg){#fig-layout-1}\n\n![Caption for figure 2](assets/image.jpg){#fig-layout-2}\n\n![Caption for figure 3](assets/image.jpg){#fig-layout-3}\n:::\n\n\n\n\n\n\n\n\n\nFigure 1: Caption for figure 1\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Caption for figure 2\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Caption for figure 3"
  },
  {
    "objectID": "slides/demo/index.html#images-markdown-layout-1",
    "href": "slides/demo/index.html#images-markdown-layout-1",
    "title": "Demo Slides",
    "section": "Images • Markdown • Layout",
    "text": "Images • Markdown • Layout\nAbsolute positioning\n![](assets/image.jpg){.absolute top=250 left=0 height=\"450\"}\n![](assets/image.jpg){.absolute top=200 right=50 height=\"250\"}\n![](assets/image.jpg){.absolute bottom=0 right=200 height=\"200\"}"
  },
  {
    "objectID": "slides/demo/index.html#images-html",
    "href": "slides/demo/index.html#images-html",
    "title": "Demo Slides",
    "section": "Images • HTML",
    "text": "Images • HTML\nUsing Raw HTML\nThis image is 30% size. &lt;img src=\"assets/image.jpg\" style=\"width:30%;\"/&gt;"
  },
  {
    "objectID": "slides/demo/index.html#images-r",
    "href": "slides/demo/index.html#images-r",
    "title": "Demo Slides",
    "section": "Images • R",
    "text": "Images • R\nUsing R\nR chunks in RMarkdown can be used to control image display size using the argument out.width.\nThis image is displayed at a size of 200 pixels.\n```{r}\n#| out-width: \"200px\"\nknitr::include_graphics(\"assets/image.jpg\")\n```"
  },
  {
    "objectID": "slides/demo/index.html#math-expressions",
    "href": "slides/demo/index.html#math-expressions",
    "title": "Demo Slides",
    "section": "Math expressions",
    "text": "Math expressions\nSome examples of rendering equations.\n\n\n$e^{i\\pi} + 1 = 0$\n\n$$\\frac{E \\times X^2 \\prod I}{2+7} = 432$$\n\n$$\\sum_{i=1}^n X_i$$\n\n$$\\int_0^{2\\pi} \\sin x~dx$$\n\n\\(e^{i\\pi} + 1 = 0\\) \\[\\frac{E \\times X^2 \\prod I}{2+7} = 432\\] \\[\\sum_{i=1}^n X_i\\] \\[\\int_0^{2\\pi} \\sin x~dx\\]"
  },
  {
    "objectID": "slides/demo/index.html#math-expressions-1",
    "href": "slides/demo/index.html#math-expressions-1",
    "title": "Demo Slides",
    "section": "Math expressions",
    "text": "Math expressions\nSome examples of rendering equations.\n\n\n$\\left( \\sum_{i=1}^{n}{i} \\right)^2 = \\left( \\frac{n(n-1)}{2}\\right)^2 = \\frac{n^2(n-1)^2}{4}$\n\n$\\begin{eqnarray} X & \\sim & \\mathrm{N}(0,1)\\\\ Y & \\sim & \\chi^2_{n-p}\\\\ R & \\equiv & X/Y \\sim t_{n-p} \\end{eqnarray}$\n\n$\\begin{eqnarray} P(|X-\\mu| &gt; k) & = & P(|X-\\mu|^2 &gt; k^2)\\\\ & \\leq & \\frac{\\mathbb{E}\\left[|X-\\mu|^2\\right]}{k^2}\\\\ & \\leq & \\frac{\\mathrm{Var}[X]}{k^2} \\end{eqnarray}$\n\n\\(\\left( \\sum_{i=1}^{n}{i} \\right)^2 = \\left( \\frac{n(n-1)}{2}\\right)^2 = \\frac{n^2(n-1)^2}{4}\\)\n\\(\\begin{eqnarray} X & \\sim & \\mathrm{N}(0,1)\\\\ Y & \\sim & \\chi^2_{n-p}\\\\ R & \\equiv & X/Y \\sim t_{n-p} \\end{eqnarray}\\)\n\\(\\begin{eqnarray} P(|X-\\mu| &gt; k) & = & P(|X-\\mu|^2 &gt; k^2)\\\\ & \\leq & \\frac{\\mathbb{E}\\left[|X-\\mu|^2\\right]}{k^2}\\\\ & \\leq & \\frac{\\mathrm{Var}[X]}{k^2} \\end{eqnarray}\\)"
  },
  {
    "objectID": "slides/demo/index.html#tables-kable",
    "href": "slides/demo/index.html#tables-kable",
    "title": "Demo Slides",
    "section": "Tables • kable",
    "text": "Tables • kable\nThe most simple table using kable from R package knitr.\n\nknitr::kable(head(iris),'html')\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa"
  },
  {
    "objectID": "slides/demo/index.html#tables-kableextra",
    "href": "slides/demo/index.html#tables-kableextra",
    "title": "Demo Slides",
    "section": "Tables • kableExtra",
    "text": "Tables • kableExtra\nMore advanced table using kableExtra and formattable.\n\n iris[c(1:2,51:52,105:106),] %&gt;%\n  mutate(Sepal.Length=color_bar(\"lightsteelblue\")(Sepal.Length)) %&gt;%\n  mutate(Sepal.Width=color_tile(\"white\",\"orange\")(Sepal.Width)) %&gt;%\n  mutate(Species=cell_spec(Species,\"html\",color=\"white\",bold=T,\n    background=c(\"#8dd3c7\",\"#fb8072\",\"#bebada\")[factor(.$Species)])) %&gt;%\n  kable(\"html\",escape=F) %&gt;%\n  kable_styling(bootstrap_options=c(\"striped\",\"hover\",\"responsive\"),full_width=F) %&gt;%\n  column_spec(5,width=\"3cm\")\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n51\n7.0\n3.2\n4.7\n1.4\nversicolor\n\n\n52\n6.4\n3.2\n4.5\n1.5\nversicolor\n\n\n105\n6.5\n3.0\n5.8\n2.2\nvirginica\n\n\n106\n7.6\n3.0\n6.6\n2.1\nvirginica"
  },
  {
    "objectID": "slides/demo/index.html#tables-gt",
    "href": "slides/demo/index.html#tables-gt",
    "title": "Demo Slides",
    "section": "Tables • gt",
    "text": "Tables • gt\nTables using the gt package. Grammar of tables with extensive customization options.\n\n\n\nlibrary(gt)\n\niris %&gt;%\n    group_by(Species) %&gt;%\n    slice(1:2) %&gt;%\n    gt() %&gt;%\n    cols_label(\n      Sepal.Length = \"Sepal Length\", Sepal.Width = \"Sepal Width\",\n      Petal.Length = \"Petal Length\", Petal.Width = \"Petal Width\"\n    ) %&gt;%\n    tab_source_note(\n        source_note = md(\"Source: Iris data. Anderson, 1936; Fisher, 1936)\")\n    )\n\n\n\n\n\n\n\n\n\n\nSepal Length\nSepal Width\nPetal Length\nPetal Width\n\n\n\n\nsetosa\n\n\n5.1\n3.5\n1.4\n0.2\n\n\n4.9\n3.0\n1.4\n0.2\n\n\nversicolor\n\n\n7.0\n3.2\n4.7\n1.4\n\n\n6.4\n3.2\n4.5\n1.5\n\n\nvirginica\n\n\n6.3\n3.3\n6.0\n2.5\n\n\n5.8\n2.7\n5.1\n1.9\n\n\n\nSource: Iris data. Anderson, 1936; Fisher, 1936)"
  },
  {
    "objectID": "slides/demo/index.html#tables-interactive-dt",
    "href": "slides/demo/index.html#tables-interactive-dt",
    "title": "Demo Slides",
    "section": "Tables • Interactive • DT",
    "text": "Tables • Interactive • DT\nInteractive table using R package DT.\n\nlibrary(DT)\nDT::datatable(iris[1:20,],options=list(pageLength=7))"
  },
  {
    "objectID": "slides/demo/index.html#tables-interactive-reactable",
    "href": "slides/demo/index.html#tables-interactive-reactable",
    "title": "Demo Slides",
    "section": "Tables • Interactive • reactable",
    "text": "Tables • Interactive • reactable\nInteractive tables with reactable.\n\nlibrary(reactable)\n\nreactable(iris[sample(1:150,6),],\n  striped = TRUE, highlight = TRUE, filterable = TRUE\n)"
  },
  {
    "objectID": "slides/demo/index.html#static-plots-base-plot",
    "href": "slides/demo/index.html#static-plots-base-plot",
    "title": "Demo Slides",
    "section": "Static plots • Base Plot",
    "text": "Static plots • Base Plot\nPlots using base R.\n\n{par(mar=c(5,5,0,0))\n  plot(x=iris$Sepal.Length,y=iris$Sepal.Width,\n      col=c(\"coral\",\"steelblue\",\"forestgreen\")[iris$Species],\n      xlab=\"Sepal Length\",ylab=\"Sepal Width\",pch=19)\n  legend(x=7,y=4.47,legend=c(\"setosa\",\"versicolor\",\"virginica\"),\n       col=c(\"coral\",\"steelblue\",\"forestgreen\"),pch=19)}"
  },
  {
    "objectID": "slides/demo/index.html#static-plots-ggplot2",
    "href": "slides/demo/index.html#static-plots-ggplot2",
    "title": "Demo Slides",
    "section": "Static plots • ggplot2",
    "text": "Static plots • ggplot2\nPlotting using ggplot2.\n\niris %&gt;%\n  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+\n  geom_point(size=2)+\n  labs(x=\"Sepal Length\",y=\"Sepal Width\")+\n  theme_bw(base_size=18)"
  },
  {
    "objectID": "slides/demo/index.html#interactive-plots-highcharter",
    "href": "slides/demo/index.html#interactive-plots-highcharter",
    "title": "Demo Slides",
    "section": "Interactive plots • highcharter",
    "text": "Interactive plots • highcharter\nR package highcharter is a wrapper around javascript library highcharts.\n\nlibrary(highcharter)\nh &lt;- iris %&gt;%\n  hchart(\"scatter\",hcaes(x=\"Sepal.Length\",y=\"Sepal.Width\",group=\"Species\")) %&gt;%\n  hc_xAxis(title=list(text=\"Sepal Length\"),crosshair=TRUE) %&gt;%\n  hc_yAxis(title=list(text=\"Sepal Width\"),crosshair=TRUE) %&gt;%\n  hc_chart(zoomType=\"xy\",inverted=FALSE) %&gt;%\n  hc_legend(verticalAlign=\"top\",align=\"right\") %&gt;% hc_size(height=300,width=500)\n\nhtmltools::tagList(list(h))"
  },
  {
    "objectID": "slides/demo/index.html#interactive-plots-plotly",
    "href": "slides/demo/index.html#interactive-plots-plotly",
    "title": "Demo Slides",
    "section": "Interactive plots • plotly",
    "text": "Interactive plots • plotly\nR package plotly provides R binding around javascript plotting library plotly.\n\nlibrary(plotly)\np &lt;- iris %&gt;%\n  plot_ly(x=~Sepal.Length,y=~Sepal.Width,color=~Species,width=550,height=400) %&gt;%\n  add_markers()\np"
  },
  {
    "objectID": "slides/demo/index.html#interactive-plots-ggplotly",
    "href": "slides/demo/index.html#interactive-plots-ggplotly",
    "title": "Demo Slides",
    "section": "Interactive plots • ggplotly",
    "text": "Interactive plots • ggplotly\nplotly also has a function called ggplotly which converts a static ggplot2 object into an interactive plot.\n\nlibrary(plotly)\np &lt;- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,col=Species))+\n  geom_point()+\n  labs(x=\"Sepal Length\",y=\"Sepal Width\")+\n  theme_bw(base_size=12)\n\nplotly::ggplotly(p,width=460,height=360)"
  },
  {
    "objectID": "slides/demo/index.html#interactive-plots-ggiraph",
    "href": "slides/demo/index.html#interactive-plots-ggiraph",
    "title": "Demo Slides",
    "section": "Interactive plots • ggiraph",
    "text": "Interactive plots • ggiraph\nR package ggiraph converts a static ggplot2 object into an interactive plot.\n\nlibrary(ggiraph)\np &lt;- ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,colour=Species))+\n      geom_point_interactive(aes(tooltip=paste0(\"&lt;b&gt;Petal Length:&lt;/b&gt; \",Petal.Length,\"\\n&lt;b&gt;Sepal Length: &lt;/b&gt;\",Sepal.Length,\"\\n&lt;b&gt;Species: &lt;/b&gt;\",Species)),size=2)+\n  theme_bw()\ntooltip_css &lt;- \"background-color:#f8f9f9;padding:10px;border-style:solid;border-width:2px;border-color:#125687;border-radius:5px;\"\nggiraph(code=print(p),hover_css=\"cursor:pointer;stroke:black;fill-opacity:0.3\",zoom_max=5,tooltip_extra_css=tooltip_css,tooltip_opacity=0.9,height_svg=2,width_svg=4,width=0.6)"
  },
  {
    "objectID": "slides/demo/index.html#interactive-time-series-dygraphs",
    "href": "slides/demo/index.html#interactive-time-series-dygraphs",
    "title": "Demo Slides",
    "section": "Interactive time series • dygraphs",
    "text": "Interactive time series • dygraphs\nR package dygraphs provides R bindings for javascript library dygraphs for time series data.\n\nlibrary(dygraphs)\nlungDeaths &lt;- cbind(ldeaths, mdeaths, fdeaths)\ndygraph(lungDeaths,main=\"Deaths from Lung Disease (UK)\") %&gt;%\n  dyOptions(colors=c(\"#66C2A5\",\"#FC8D62\",\"#8DA0CB\"))"
  },
  {
    "objectID": "slides/demo/index.html#network-graph",
    "href": "slides/demo/index.html#network-graph",
    "title": "Demo Slides",
    "section": "Network graph",
    "text": "Network graph\nR package networkD3 allows the use of interactive network graphs from the D3.js javascript library.\n\nlibrary(networkD3)\ndata(MisLinks,MisNodes)\nforceNetwork(Links=MisLinks,Nodes=MisNodes,Source=\"source\",\n             Target=\"target\",Value=\"value\",NodeID=\"name\",\n             Group=\"group\",opacity=0.4,\n             height=300,width=500)"
  },
  {
    "objectID": "slides/demo/index.html#interactive-maps-leaflet",
    "href": "slides/demo/index.html#interactive-maps-leaflet",
    "title": "Demo Slides",
    "section": "Interactive maps • leaflet",
    "text": "Interactive maps • leaflet\nR package leaflet provides R bindings for javascript mapping library; leafletjs.\n\nlibrary(leaflet)\nleaflet(height=300,width=800) %&gt;%\n  addTiles(urlTemplate='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png') %&gt;%\n  #addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;%\n  addMarkers(lat=57.639327,lng=18.288534,popup=\"RaukR\") %&gt;%\n  setView(lat=57.639327,lng=18.288534,zoom=15)"
  },
  {
    "objectID": "slides/demo/index.html#linking-plots-crosstalk",
    "href": "slides/demo/index.html#linking-plots-crosstalk",
    "title": "Demo Slides",
    "section": "Linking Plots • crosstalk",
    "text": "Linking Plots • crosstalk\nR package crosstalk allows crosstalk enabled plotting libraries to be linked. Through the shared ‘key’ variable, data points can be manipulated simultaneously on two independent plots.\n\nlibrary(crosstalk)\nshared_quakes &lt;- SharedData$new(quakes[sample(nrow(quakes), 100),])\nlf &lt;- leaflet(shared_quakes,height=300) %&gt;%\n        addTiles(urlTemplate='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png') %&gt;%\n        addMarkers()\npy &lt;- plot_ly(shared_quakes,x=~depth,y=~mag,size=~stations,height=300) %&gt;%\n        add_markers()\ndiv(div(lf,style=\"float:left;width:49%\"),div(py,style=\"float:right;width:49%\"))"
  },
  {
    "objectID": "slides/demo/index.html#observablejs",
    "href": "slides/demo/index.html#observablejs",
    "title": "Demo Slides",
    "section": "ObservableJS",
    "text": "ObservableJS\n\nQuarto supports ObservableJS for interactive visualisations in the browser.\n\n\n\nPass data from R to OJS\n\nirism &lt;- iris\ncolnames(irism) &lt;- gsub(\"[.]\",\"_\",tolower(colnames(irism)))\nojs_define(ojsd = irism)\n\n\nojsdata = transpose(ojsd)\n\n\n\n\n\n\n\nDisplay as a table\n\nviewof filtered_table = Inputs.table(ojsdata)"
  },
  {
    "objectID": "slides/demo/index.html#observablejs-1",
    "href": "slides/demo/index.html#observablejs-1",
    "title": "Demo Slides",
    "section": "ObservableJS",
    "text": "ObservableJS\n\n\nDefine inputs\n\nviewof x = Inputs.select(Object.keys(ojsdata[0]), {\n  value: \"sepal_length\", multiple: false, label: \"X axis\"\n  })\n\n\n\n\n\n\n\nviewof y = Inputs.select(Object.keys(ojsdata[0]), {\n  value: \"sepal_width\", multiple: false, label: \"Y axis\"\n  })\n\n\n\n\n\n\n\nDisplay plot\n\nPlot.plot({\n  marks: [\n    Plot.dot(ojsdata, {\n      x: x, y: y, fill: \"species\",\n      title: (d) =&gt; `${d.species} \\n Petal length: ${d.petal_length} \\n Sepal length: ${d.sepal_length}`\n    })\n  ], grid: true\n})\n\n\n\n\n\n\n\n\nObservableJS in quarto documentation."
  },
  {
    "objectID": "slides/demo/index.html#diagrams",
    "href": "slides/demo/index.html#diagrams",
    "title": "Demo Slides",
    "section": "Diagrams",
    "text": "Diagrams\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]\n```\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]\n\n\n\n\n\n\n\n\nDiagram documentation."
  },
  {
    "objectID": "slides/demo/index.html#colourful",
    "href": "slides/demo/index.html#colourful",
    "title": "Demo Slides",
    "section": "Colourful",
    "text": "Colourful\nThis slide has a colourful background\n##  Colourful {background-color=\"#ABEBC6\"}"
  },
  {
    "objectID": "slides/demo/index.html#big-image",
    "href": "slides/demo/index.html#big-image",
    "title": "Demo Slides",
    "section": "Big Image",
    "text": "Big Image\nThis slide has a background image\n##  Big Image {background-image=\"assets/image.jpg\"}"
  },
  {
    "objectID": "slides/demo/index.html#general-tips",
    "href": "slides/demo/index.html#general-tips",
    "title": "Demo Slides",
    "section": "General tips",
    "text": "General tips\n\nTo set custom title slide cover image\n\ntitle-slide-attributes:\n  data-background-image: \"assets/images/cover.jpg\"\n\nTo add custom end slide picture, set page title\n\n##  {background-image=\"assets/images/cover.jpg\"}\n\nAdd custom css under YAML css: \"styles.css\""
  },
  {
    "objectID": "slides/demo/index.html#general-tips-1",
    "href": "slides/demo/index.html#general-tips-1",
    "title": "Demo Slides",
    "section": "General tips",
    "text": "General tips\n\nIf content overflows the slide in vertical direction, add class .scrollable\n\n\n\n\n                                               sysname \n                                               \"Linux\" \n                                               release \n                                  \"5.15.0-107-generic\" \n                                               version \n\"#117~20.04.1-Ubuntu SMP Tue Apr 30 10:35:57 UTC 2024\" \n                                              nodename \n                                        \"38843d560d9e\" \n                                               machine \n                                              \"x86_64\" \n                                                 login \n                                             \"unknown\" \n                                                  user \n                                                \"root\" \n                                        effective_user \n                                                \"root\" \n\n\n\n\nExport HTML to PDF using PDF export mode by pressing e\nFor complete Quarto revealjs documentation, click here"
  },
  {
    "objectID": "slides/demo/index.html#section",
    "href": "slides/demo/index.html#section",
    "title": "Demo Slides",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/coding/index.html#learning-outcomes",
    "href": "slides/coding/index.html#learning-outcomes",
    "title": "Best Coding Practices",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nAfter this module:\n\nYou will be aware of different coding styles.\n\n\n\nYou will know what styles are good 🦸 and bad 🦹 and why.\n\n\n\n\nYou will be reminded about dividing a problem before your start conquering(coding).\n\n\n\n\nYou will understand when it is time to write a function.\n\n\n\n\nYou will have a basic understanding of using github copilot with RStudio 🤖.\n\n\n\n\nYour code will reach new level of awesomeness! 🆒."
  },
  {
    "objectID": "slides/coding/index.html#todays-topics",
    "href": "slides/coding/index.html#todays-topics",
    "title": "Best Coding Practices",
    "section": "Todays topics",
    "text": "Todays topics\n\n\nStyle — _howTo_style.yourCode?\nStructure — how to think 🤔 about the code and manufacture your own building 🚧 blocks\n\n\n\nDocumentation — how to use quarto for reproducibility, convenience and code integration 📖\n\n\n\n\nDebugging — my code does not run 😞\nProfiling — now it does run but… out of memory 💣\nOptimization — making things better 👷"
  },
  {
    "objectID": "slides/coding/index.html#what-is-coding-style",
    "href": "slides/coding/index.html#what-is-coding-style",
    "title": "Best Coding Practices",
    "section": "What is Coding Style?",
    "text": "What is Coding Style?\n\n\n\nNaming conventions — assigning names to variables\nCode formatting — placement of braces, use of white space characters etc.\n\n\n\n\n\nFrom: Behind The Lines 2010-09-23. By Oliver Widder, Webcomics Geek And Poke."
  },
  {
    "objectID": "slides/coding/index.html#naming-conventions",
    "href": "slides/coding/index.html#naming-conventions",
    "title": "Best Coding Practices",
    "section": "Naming Conventions",
    "text": "Naming Conventions\nA syntactically valid name:\n\nConsists of:\n\nletters: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\ndigits: 0123456789\nperiod: .\nunderscore: _\n\nBegins with a letter or the period (.), if . should not followed by a number\nCannot be one of the reserved words: if, else, repeat, while, function, for, in, next, break, TRUE, FALSE, NULL, Inf, NaN, NA, NA_integer_, NA_real_, NA_complex_, NA_character_\nAlso cannot be: c, q, t, C, D, I as they are reserved function names."
  },
  {
    "objectID": "slides/coding/index.html#naming-style",
    "href": "slides/coding/index.html#naming-style",
    "title": "Best Coding Practices",
    "section": "Naming Style",
    "text": "Naming Style\nVariable names that are legal are not necessarily a good style and they may be dangerous 💀:\n\nF\nT\n\n[1] FALSE\n[1] TRUE\n\n\n\nF + T  \n\n[1] 1\n\n\n\nF &lt;- 3  \nF + T  \n\n[1] 4\n\n\ndo not do this!\n\nunless you are a politician 🕴…\nAvoid T and F as variable names."
  },
  {
    "objectID": "slides/coding/index.html#customary-variable-names",
    "href": "slides/coding/index.html#customary-variable-names",
    "title": "Best Coding Practices",
    "section": "Customary Variable Names",
    "text": "Customary Variable Names\n\n\nAlso, there is a number of variable names that are traditionally used to name particular variables:\n\nusr — user\npwd — password\nx, y, z — vectors\nw — weights\nf, g — functions\nn — number of rows\np — number of columns\ni, j, k — indexes\ndf — data frame\ncnt — counter\nM, N, W — matrices\ntmp — temporary variables\n\n\nSometimes these are domain-specific:\n\np, q — allele frequencies in genetics,\nN, k — number of trials and number of successes in stats\n\nTry to avoid using these in this way to avoid possible confusion."
  },
  {
    "objectID": "slides/coding/index.html#different-notations",
    "href": "slides/coding/index.html#different-notations",
    "title": "Best Coding Practices",
    "section": "Different Notations",
    "text": "Different Notations\nPeople use different notation styles throughout their code:\n\n\nsnake_notation_looks_like_this\n\n\n\n\ncamelNotationLooksLikeThis\n\n\n\n\nperiod.notation.looks.like.this\n\n\n\nBut many also use…\n\n\n\nLousyNotation_looks.likeThis\n\n\n\nTry to be consistent and stick to one of them. Bear in mind period.notation is used by S3 classes to create generic functions, e.g. plot.my.object. A good-enough reason to avoid it?\n\n\nIt is also important to maintain code readability by having your variable names:\n\ninformative, e.g. genotypes vs. fsjht45jkhsdf4\n\n\n\n\nConsistent across your code — the same naming convention\n\n\n\n\nNot too long, e.g. weight vs. phenotype.weight.measured"
  },
  {
    "objectID": "slides/coding/index.html#special-variable-names",
    "href": "slides/coding/index.html#special-variable-names",
    "title": "Best Coding Practices",
    "section": "Special Variable Names",
    "text": "Special Variable Names\n\nThere are built-in variable names:\n\nLETTERS: the 26 upper-case letters of the Roman alphabet\nletters: the 26 lower-case letters of the Roman alphabet\nmonth.abb: the three-letter abbreviations for the English month names\nmonth.name: the English names for the months of the year\npi: the ratio of the circumference of a circle to its diameter\n\nVariable names beginning with period are hidden: .my_secret_variable 👻 will not be shown but can be accessed\n\n\n.the_hidden_answer &lt;- 42\nls()\n\n[1] \"F\" \"T\"\n\n\n\nbut with a bit of effort you can see them:\n\nls(all.names = TRUE)\n\n[1] \".main\"               \".QuartoInlineRender\" \".Random.seed\"       \n[4] \".the_hidden_answer\"  \"F\"                   \"T\""
  },
  {
    "objectID": "slides/coding/index.html#structure-your-code",
    "href": "slides/coding/index.html#structure-your-code",
    "title": "Best Coding Practices",
    "section": "Structure Your Code",
    "text": "Structure Your Code\nDecompose the problem 🧩 🧩!\n  \nsource: Wikimedia Commons\n\n\n\ndivide et impera / top-down approach — split your BIG problem into a number of small sub-problems recursively and, at some level, encapsulate your code in functional blocks (functions)\n\n\n\n\na function should be performing a small task, it should be a logical program unit\n\n\n\nwhen should I write a function ❓\n\n\n\none screen 💻 rule (resolution…),\nre-use twice rule of 👍."
  },
  {
    "objectID": "slides/coding/index.html#how-to-write-functions",
    "href": "slides/coding/index.html#how-to-write-functions",
    "title": "Best Coding Practices",
    "section": "How to write functions",
    "text": "How to write functions\n\navoid accessing and modifying globals\n\navoid 🚫 a &lt;&lt;- 42\nand 🆗 use a closure instead\n\n\n\n\nnew_counter &lt;- function() {\n  i &lt;- 0\n  function() {\n    # do something useful, then ...\n    i &lt;&lt;- i + 1\n    i\n  }\n}\n\ncounter1 &lt;- new_counter(); counter2 &lt;- new_counter()\ncounter1(); counter1(); counter2()\n\n[1] 1\n[1] 2\n[1] 1\n\n\nSource: Stackoverflow"
  },
  {
    "objectID": "slides/coding/index.html#how-to-write-functions-1",
    "href": "slides/coding/index.html#how-to-write-functions-1",
    "title": "Best Coding Practices",
    "section": "How to write functions",
    "text": "How to write functions\n\nuse data as the very first argument for %&gt;% pipes sake:\n\nmyfun &lt;- function(x, arg) 🆗\nmyfun &lt;- function(arg, x) 🙅\n\n\n\n\nset arguments to defaults — better too many args than too few:\n\nmyfun &lt;- function(x, seed = 42) 🆗\nmyfun &lt;- function(x, ...) 🚯\n\n\n\n\n\nremember that global defaults can be changed by options"
  },
  {
    "objectID": "slides/coding/index.html#wrapper-function",
    "href": "slides/coding/index.html#wrapper-function",
    "title": "Best Coding Practices",
    "section": "Wrapper function",
    "text": "Wrapper function\nIf you are re-using functions written by someone else — write a wrapper function around them\n\n\n\nmy_awesome_plot &lt;- function(x, ...) {\n  plot(x, col='red', pch=19, cex.axis=.7, ...)\n}\n\n\n\nmy_awesome_plot(1:5, col = 'blue')\n\nError in localWindow(xlim, ylim, log, asp, ...): formal argument \"col\" matched by multiple actual arguments\n\nmy_awesome_plot(1:5, las = 1)"
  },
  {
    "objectID": "slides/coding/index.html#how-to-write-functions-2",
    "href": "slides/coding/index.html#how-to-write-functions-2",
    "title": "Best Coding Practices",
    "section": "How to write functions",
    "text": "How to write functions\n\nshowing progress and messages is good, but let the others turn this functionality off\n\n\n\nif you are calling other functions, consider using ...\n\n\n\n\n  source: http://www.xkcd/com/292"
  },
  {
    "objectID": "slides/coding/index.html#github-copilot-rstudio",
    "href": "slides/coding/index.html#github-copilot-rstudio",
    "title": "Best Coding Practices",
    "section": "Github copilot ❤️ RStudio",
    "text": "Github copilot ❤️ RStudio\n\n source: https://github.com/edu/students"
  },
  {
    "objectID": "slides/coding/index.html#section-1",
    "href": "slides/coding/index.html#section-1",
    "title": "Best Coding Practices",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                     \nplatform aarch64-apple-darwin20\nos       darwin20              \nmajor    4                     \nminor    4.0                   \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "labs/tidyverse/index.html",
    "href": "labs/tidyverse/index.html",
    "title": "Tidy work in Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nWelcome to the hands-on workshop “Tidy Work in Tidyverse”. Most of the functions necessary to complete the tutorials and challenges were covered in the lecture. However, sometimes the tasks require that you check the docs or search online. Our solutions are not the only possible ones! Let us know if you can do better or solve things in a different way!\nIf stuck, look at hints, next do some google searches and, if still stuck, turn to a TA.\nIt is a lot of material, we know! Do not feel bad if you do not solve all the tasks. If you completed Challenge 3, you have used all the most important features of tidyverse! Good luck!"
  },
  {
    "objectID": "labs/tidyverse/index.html#general-exercises",
    "href": "labs/tidyverse/index.html#general-exercises",
    "title": "Tidy work in Tidyverse",
    "section": "1 General exercises",
    "text": "1 General exercises\nDatasets are available here.\n\n1.1 Pipes\n\n1.1.1 Chunk 1\nRewrite the following code chunks as pipes (Load package magrittr because tidyverse supports only the %&gt;% pipe!):\n\nmy_cars &lt;- mtcars[, c(1:4, 10)]\nmy_cars &lt;- my_cars[my_cars$disp &gt; mean(my_cars$disp), ]\nmy_cars &lt;- colMeans(my_cars)\n\nThis is our solution:\n\n\nCode\nmtcars %&gt;%\n  select(c(1:4, 10)) %&gt;%\n  filter(disp &gt; mean(disp)) %&gt;%\n  colMeans() -&gt; my_cars\n\n\nWhat is wrong with our solution?\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nIt is better to have the result assigned on the left hand side: result &lt;- expression. In this case the expression is the whole pipe.\nOur ‘expression -&gt; result’ is correct but can easily be missed when reading the code.\n\n\n\n\n\n\n1.1.2 Chunk 2\nThe summary(x) function is a bit special: when you type summary(x) in the console, print is called in an implicit way. Pipe call does not do such implicite call, so you will have to invoke print in an explicit way. But the %T&gt;% does unbranch for one call only, you will have to make printing of the summary a one single composed call using {}. Try to wrap your mind around this. If in doubt, turn to a TA.\n\nsummary(cars)\ncolSums(cars)\n\n\n\nCode\ncars %T&gt;% {print(summary(.))} %&gt;% colSums()\n\n\n\n\n1.1.3 Chunk 3\nRewrite the following correlations using pipes.\n\ncor(mtcars$gear, mtcars$mpg)\n\n\n\nCode\nmtcars %$% cor(gear, mpg)\n\n\n\ncor(mtcars)\n\n\n\nCode\nmtcars %&gt;% cor()\n\n\n\n\n1.1.4 Chunk 4\nGiven is the dim_summary(nrows, ncols) function which takes nrows and ncols as arguments and prints this info:\n\ndim_summary &lt;- function(nrows, ncols) {\n  print(\n    paste0('Matrix M has: ', nrows, ' rows and ', ncols, ' columns.')\n  )\n}\n\nRewrite each of the code chunks below using pipes:\n\ndistr1 &lt;- rnorm(16)\nM &lt;- matrix(distr1, ncol = 4)\nplot(M)\nM &lt;- M + sample(M)\ndim_summary(nrows = nrow(M), ncols = ncol(M))\n\n\ndistr2 &lt;- rnorm(16)\nN &lt;- matrix(distr2, ncol = 4)\ncolnames(N) &lt;- (letters[1:4])\nsummary(N)\nN &lt;- N + 0\n\n\nP &lt;- M %x% t(N)\nheatmap(P)\ncolnames(P) &lt;- letters[1:dim(P)[2]]\ncor(P[ ,'a'], P[ ,'i'])\n\n\n\n\n\n\n\nTip\n\n\n\nBeware of a class of functions, called replacement functions. These beasts are of the form: function(arguments) &lt;- value and rownames(x) &lt;- c('a', 'b', 'c') is a good example of such beast. When writing pipes, we have bear in mind that whole function &lt;- is the name of the replacement function and thus we have to use it as such in the pipe enquoted using backticks. Yes, we know… but you wont see this too often.\n\n\n\n\n\n\n\n\nTip\n\n\n\nSometimes, it may not be possible to put everything into one single pipe and the results of running two or more pipes have to be used in the final pipe.\n\n\n\n\nCode\ndim_summary &lt;- function(nrows, ncols) {\n  print(paste0('Matrix M has: ', nrows, ' rows and ', ncols, ' columns.'))\n}\n\nM &lt;- rnorm(16) %&gt;%\n  matrix(ncol = 4) %T&gt;%\n  plot() %&gt;%\n  `+`(., sample(.)) %T&gt;%\n  {dim_summary(nrow(.), ncol(.))}\n\nN &lt;- rnorm(16) %&gt;%\n  matrix(ncol = 4) %&gt;%\n  `colnames&lt;-`(letters[1:4]) %T&gt;%\n  summary() %&gt;% `+`(., 0)\n\nP &lt;- M %&gt;%\n  `%x%`(., t(N)) %T&gt;%\n  heatmap() %&gt;%\n  `colnames&lt;-`(letters[1:dim(.)[2]]) %&gt;%\n  as_data_frame() %$%\n  cor(a, i)\n\n\n\n\n\n1.2 Tibbles\n\n1.2.1 Task 1\n\nConvert the mtcars dataset to a tibble vehicles.\nSelect the number of cylinders (cyl) variable using:\n\nthe [[index]] accessor,\nthe [[string]] accessor,\nthe $ accessor.\n\nDo the same selection as above, but using pipe and placeholders (use all three ways of accessing a variable).\nPrint the tibble.\nPrint the 30 first rows of the tibble.\nChange the default behavior of printing a tibble so that at least 15 and at most 30 rows are printed.\nWhat is the difference between the tibble.print_max and dplyr.print_min? Is there any? Test it.\nConvert vehicles back to a data.frame called automobiles.\n\n\n\nCode\n# 1\nvehicles &lt;- mtcars %&gt;% as_tibble()\n\n# 2\nvehicles[['cyl']]\nvehicles[[2]]\nvehicles$cyl\n\n# 3\nvehicles %T&gt;%\n  {print(.[['cyl']])} %T&gt;%\n  {print(.[[2]])} %&gt;%\n  .$cyl\n\n# 4\nvehicles\n\n# 5\nvehicles %&gt;% head(n = 30)\n\n# 6\noptions(tibble.print_min = 15, tibble.print_max = 30)\n\n# 7\n# In theory there should be no difference. dplyr imports tibble from the tibble package\n# and dplyr.width, dplyr.print_min and dplyr.print_min are passed down to the tibble.\n# But test both behaviours. First with only the tibble package loaded, later with dplyr # loaded.\n\n# 8\nautomobiles &lt;- as.data.frame(vehicles)\n\n\n\n\n1.2.2 Task 2\nCreate the following tibble using tribble():\n\n\n\n  \n\n\n\n\n\nCode\ntab &lt;- tribble(\n  ~id, ~event, ~date,\n  1, 'success', '24-04-2017',\n  2, 'failed', '25-04-2017',\n  3, 'failed', '25-04-2017',\n  4, 'success', '27-04-2017'\n)\n\n\n\n\n1.2.3 Task 3\nCompare the performance of as.data.frame(), as_data_frame() and as_tibble() on a 100 x 30 matrix filled with some random integers. Use package microbenchmark. Fill in your result here in the Tidyverse Lab sheet, Tibbles – performance.\n\n\nCode\ntst &lt;- replicate(30, sample(100), simplify = TRUE)\ncolnames(tst) = paste0(rep('col', times = dim(tst)[2]), 1:dim(tst)[2])\nmicrobenchmark::microbenchmark(\n  as.data.frame(tst),\n  as_data_frame(tst),\n  as_tibble(tst)\n)\n\n\n\n\n1.2.4 Task 4\nDo you think tibbles are lazy? Try to create a tibble that tests whether lazy evaluation applies to tibbles too.\n\n\nCode\ntibble(x = sample(1:10, size = 10, replace = T), y = log10(x))\n\n\n\n\n\n1.3 Parsing\nParse the following vectors using parse_ functions:\n\nvec1 &lt;- c(1, 7.2, 3.84, -5.23) – parse it as double (any problems? why?).\nNow, parse the same vector c(1, 7.2, 3.84, -5.23) as integer. What happens?\nCan you still parse it as integer somehow?\nParse as double vec2 &lt;- c('2', '3,45', '?', '-7,28')\nParse correctly vec3 &lt;- c('2', '3,45', '?', '-7.28')\nParse the following guessing the parser: vec4 &lt;- c('barrel: 432.7$', 'liter: 15.42PLN', 'gallon costs approx 32.1SEK', 'sunny, wind gusts up till 55m/s')\nCan you parse vec4 as number? Do it if you can.\nParse vec5 &lt;- \"25 Dec 2015\" as date (hint: ?parse_date()).\nParse 10_Jul_1410 as date.\n\n\n\nCode\nvec1 &lt;- c(1, 7.2, 3.84, -5.23)\nvec2 &lt;- c('2', '3,45', '?', '-7,28')\nvec3 &lt;- c('2', '3,45', '?', '-7.28')\nvec4 &lt;- c('barrel: 432.7$', 'liter: 15.42PLN', 'gallon costs approx 32.1SEK', 'sunny, wind gusts up till 55m/s')\nvec5 &lt;- \"25 Dec 2015\"\nparse_double(vec1)\nparse_integer(vec1)\nparse_integer(as.integer(vec1)) # Is it the best way? Hint: rounding.\nparse_double(vec2, na = '?', locale = locale(decimal_mark = ','))\nparse_number(vec3, na = '?', locale = locale(decimal_mark = '.'))\nguess_parser(vec4)\nparse_guess(vec4)\n# Yes, you can:\nparse_number(vec4)\nparse_date(vec5, format=\"%d %b %Y\")\nparse_date(\"10_Jul_1410\", format=\"%d%.%b%.%Y\")"
  },
  {
    "objectID": "labs/tidyverse/index.html#nyc-flights-challenge",
    "href": "labs/tidyverse/index.html#nyc-flights-challenge",
    "title": "Tidy work in Tidyverse",
    "section": "2 NYC flights Challenge",
    "text": "2 NYC flights Challenge\nThe nycflights13 package contains information about all flights that departed from NYC (i.e., EWR, JFK and LGA) in 2013: 336,776 flights with 16 variables. To help understand what causes delays, it also includes a number of other useful datasets: weather, planes, airports, airlines. We will use it to train working with tibbles and dplyr.\n\n2.1 Task 1: Selecting column\n\nLoad the nycflights13 package (install if necessary).\nRead about the data in the package docs.\nInspect the flights tibble.\nSelect all columns but carrier and arr_time.\nSelect carrier, tailnum and origin.\nHide columns from day through carrier.\nSelect all columns that have to do with arrival (hint: ?tidyselect).\nSelect columns based on a vector v &lt;- c(\"arr_time\", \"sched_arr_time\", \"arr_delay\").\nRename column dest to destination using:\n\nselect() and\nrename()\n\n\nWhat is the difference between the two approaches?\n\n\nCode\ninstall.packages('nycflights13')\n\nlibrary('nycflights13')\n\n?nycflights13\n\nflights\n\nflights %&gt;% select(-carrier, -arr_time)\n\nflights %&gt;% select(carrier, tailnum, origin)\n\nflights %&gt;% select(-(day:carrier))\n\nflights %&gt;% select(contains('arr_')) # or\n\nv &lt;- c(\"arr_time\", \"sched_arr_time\", \"arr_delay\")\nflights %&gt;% select(v) # ambiguous, or better\nflights %&gt;% select(all_of(v))\n\nflights %&gt;% select(destination = dest)\nflights %&gt;% rename(destination = dest)\n# select keeps only the renamed column while rename returns the whole dataset\n# with the column renamed.\n\n\n\n\n2.2 Task 2: Filtering rows\n\nFilter only the flights that arrived ahead of schedule.\n\n\n\nCode\nflights %&gt;% filter(arr_delay &lt; 0)\n\n\n\nFilter the flights that had departure delay between 10 and 33.\n\n\n\nCode\nflights %&gt;% filter(dep_delay &gt;= 10, dep_delay &lt;= 33) # or\nflights %&gt;% filter(between(dep_delay, 10, 33))\n\n\n\nFish out all flights with unknown arrival time.\n\n\n\nCode\nflights %&gt;% filter(is.na(arr_time))\n\n\n\nRetrieve rows 1234:1258 (hint: ?slice).\n\n\n\nCode\nflights %&gt;% slice(1234:1258)\n\n\n\nSample (?sample_n()) 3 random flights per day in March.\n\n\n\nCode\nnycflights13::flights %&gt;% filter(month == 3) %&gt;%\n  group_by(day) %&gt;%\n  slice_sample(n = 3)\n\n\n\nShow 5 most departure-delayed flights in January per carrier.\n\n\n\nCode\nnycflights13::flights %&gt;%\n  filter(month == 1) %&gt;%\n  group_by(carrier) %&gt;%\n  slice_max(dep_delay, n = 5)\n\n\n\nRetrieve all unique() routes and sort them by destination.\n\n\n\nCode\nnycflights13::flights %&gt;%\n  select(origin, dest) %&gt;%\n  unique() %&gt;%\n  arrange(dest)\n\nnycflights13::flights %&gt;%\n  mutate(route = paste(origin, dest, sep=\"-\")) %&gt;%\n  select(route) %&gt;%\n  unique()\n\n\n\nRetrieve all distinct() routes and sort them by destination.\n\n\n\nCode\nnycflights13::flights %&gt;%\n  select(origin, dest) %&gt;%\n  distinct() %&gt;%\n  arrange(dest)\n# or\nflights %&gt;%\n  mutate(route = paste(origin, dest, sep=\"-\"))  %&gt;%\n  distinct(route)\n\n\n\nIs unique() more efficient than distinct()?\n\n\n\nCode\nmicrobenchmark::microbenchmark(\n   unique = nycflights13::flights %&gt;%\n     select(origin, dest) %&gt;%\n     unique() %&gt;%\n     arrange(dest),\n   distinct = nycflights13::flights %&gt;%\n     distinct(origin, dest) %&gt;%\n     arrange(dest),\n   times = 10L\n)\n\n# Distinct is faster.\n\n\n\n\n2.3 Task 3: Trans(mutations)\n\nair_time is the amount of time in minutes spent in the air. Add a new column air_spd that will contain aircraft’s airspeed in mph.\nAs above, but keep only the new air_spd variable.\nUse rownames_to_column() on mtcars to add car model as an extra column.\n\n\n\nCode\nflights %&gt;% mutate(air_spd = distance/(air_time / 60))\nflights %&gt;% transmute(air_spd = distance/(air_time / 60))\nmtcars %&gt;% rownames_to_column('model')\n\n\n\n\n2.4 Task 4: Groups and counts\n\nUse group_by(), summarise() and n() to see how many planes were delayed (departure) every month.\n\n\n\nCode\nflights %&gt;%\n  filter(dep_delay &gt; 0) %&gt;%\n  group_by(month) %&gt;%\n  summarise(num_dep_delayed = n())\n\n\n\nDo the same but using tally() and count().\n\n\n\nCode\nflights %&gt;%\n  filter(dep_delay &gt; 0) %&gt;%\n  group_by(month) %&gt;%\n  tally()\n\nflights %&gt;%\n  filter(dep_delay &gt; 0) %&gt;%\n  count(month)\n\n\n\nWhat was the mean dep_delay per month?\n\n\n\nCode\nflights %&gt;%\n  group_by(month) %&gt;%\n  summarise(mean_dep_delay = mean(dep_delay, na.rm = T))\n\n\n\nCount the number of incoming delayed flights from each unique origin and sort origins by this count (descending).\n\n\n\nCode\nflights %&gt;%\n  filter(arr_delay &gt; 0) %&gt;%\n  group_by(origin) %&gt;%\n  summarise(cnt = n()) %&gt;%\n  arrange(desc(cnt))\n\n\n\nDo the same using tally()\n\n\n\nCode\nflights %&gt;%\n  filter(arr_delay &gt; 0) %&gt;%\n  group_by(origin) %&gt;%\n  tally(sort = T)\n\n\n\nUse summarise() to sum total dep_delay per month in hours.\n\n\n\nCode\nflights %&gt;%\n group_by(month) %&gt;%\n summarize(tot_dep_delay = sum(dep_delay/60, na.rm = T))\n\n\n\nUse the wt parameter of count() (works with tally() too) to achieve the same.\n\n\n\nCode\nflights %&gt;%\n group_by(month) %&gt;%\n count(wt = dep_delay/60)\n\n\n\nRun group_size() on carrier what does it return?\n\n\n\nCode\nflights %&gt;%\n    group_by(carrier) %&gt;%\n    group_size()\n\n\n\nUse n_groups() to check the number of unique origin-carrier pairs.\n\n\n\nCode\nflights %&gt;%\n    group_by(carrier) %&gt;%\n    n_groups()\n\n\n\n\n\n\n\n\nNote on ungroup\n\n\n\nDepending on the version of dplyr, you may or may need to use the ungroup() if you want to group your data on some other variables. In the newer versions, summarise and mutate drop one aggregation level.\n\nflights %&gt;%\n  group_by(origin) %&gt;%\n  mutate(mean_delay_orig = (mean(dep_delay, na.rm = T) + mean(arr_delay, na.rm = T)) / 2) %&gt;%\n  ungroup() %&gt;%\n  group_by(carrier) %&gt;%\n  mutate(mean_delay_carr = (mean(dep_delay, na.rm = T) + mean(arr_delay, na.rm = T)) / 2) %&gt;%\n  select(origin, carrier, mean_delay_orig, mean_delay_carr)\n\n\n\n\n\n2.5 Task 5: Joins\nGiven the following tibbles set1 and set2:\n\nset1 &lt;- tribble(\n  ~id, ~color,\n  'id1', 'grey',\n  'id1', 'red',\n  'id2', 'green',\n  'id3', 'blue'\n)\n\nset2 &lt;- tribble(\n  ~id, ~size,\n  'id2', 'XL',\n  'id3', 'M',\n  'id4', 'M'\n)\n\nset1\nset2\n\n\n  \n\n  \n\n\n\nPerform joins on id that result in the grey area from the Venn diagrams below. We have not talked about all possible joins, so read the docs if you do not know which join to use.\n\n\n\n\n\n\n\n\n\n\n\nCode\nleft_join(set1, set2, by = 'id')\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nright_join(set1, set2, by = 'id')\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ninner_join(set1, set2, by = 'id') # or\nsemi_join(set1, set2, by = 'id') # semi_join removes duplicates in x\n# and also returns only columns from x.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfull_join(set1, set2, by = 'id') # or\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nanti_join(set1, set2, by = 'id')"
  },
  {
    "objectID": "labs/tidyverse/index.html#tidying-data",
    "href": "labs/tidyverse/index.html#tidying-data",
    "title": "Tidy work in Tidyverse",
    "section": "3 Tidying data",
    "text": "3 Tidying data\nNow time to do some data tidying. First install a package with some untidy data:\n\n#renv::install(\"rstudio/EDAWR\")\nlibrary(EDAWR)\n\n\nTidy cases so that years are not in separate columns, but in the column called year containing a value per each year.\n\n\n\nCode\ntidy_cases &lt;- cases %&gt;%\n  pivot_longer(-country, names_to = \"year\", values_to = \"count\")\n\n\n\nNow time for the pollution dataset. Tidy it so that there separate columns for large and small pollution values.\n\n\n\nCode\ntidy_pollution &lt;- pollution %&gt;%\n  pivot_wider(city, names_from = size, values_from = amount)\n\n\n\nThe storms dataset contains the date column. Make it into 3 columns: year, month and day. Store the result as tidy_storms.\n\n\n\nCode\ntidy_storms &lt;- storms %&gt;%\n  separate(col = date,\n           into = c(\"year\", \"month\", \"day\"),\n           sep = \"-\")\n\n\n\nNow, merge year, month and day in tidy_storms into a date column again but in the “DD/MM/YYYY” format.\n\n\n\nCode\ntidy_storms %&gt;% unite(col = \"date\", 4:6, sep = \"/\")"
  },
  {
    "objectID": "labs/tidyverse/index.html#nanopore-channel-activity-challenge",
    "href": "labs/tidyverse/index.html#nanopore-channel-activity-challenge",
    "title": "Tidy work in Tidyverse",
    "section": "4 Nanopore Channel Activity Challenge",
    "text": "4 Nanopore Channel Activity Challenge\n\n4.1 Introduction\nYou will be given a fastq file coming from Oxford Nanopore MinION sequencer This file contains test reads from the chicken genome. The flow-cell used here has 512 channels, each channel consists of 4 pores and only one pore is active at a time. Once your sequence gets stuck for some reason, the device will attempt to remove it from the pore by playing with reversing polarity on that pore. If this was successful, the pore will be re-used. Your task will be to visualize reading events from the meta-data in the fastq dataset and to see how each and every channel behaved. Also, you will plot the distribution of reading times.\nDatasets are available here.\n\n\n4.2 Preparations\nFirst, we will need to load the necessary libraries. I will give you a hint – you need the following libraries:\n\nhere – not necessary, but it is an elegant way of reading the data locally from the project folder,\ntidyverse – well, quite obvious why,\nShortRead from Bioconductor – to deal with short reads in fastq,\nlubridate – to figure out reading times.\n\n\nlibrary(here)\nlibrary(tidyverse)\n#BiocManager::install(\"ShortRead\")\nlibrary(ShortRead)\nlibrary(lubridate)\n\n\n\n4.3 Reading data\nNow, let’s read the fastq data. Check ShortRead documentation to see how to read our fastq file. Also, try to use package here. If you write: data &lt;- here::here('data/my.fastq'), the my.fastq file will be read from the data folder which is a sub folder of your project root, i.e. the folder where your r script is. It is a good practice and also prevents Jenny Bryan from coming to your office and setting your computer on fire.\nNow think a bit, to plot reading events, do we need all the data in the file or only some specific part? You may want to see some few first lines of the fastq to learn about the data structure.\nDownload fastq file.\n\nraw_data &lt;- \"assets/FUL1_fastqs_GRID2.fastq\"\n\n# if file doesn't exist, download and uncompress it\nif (!file.exists(raw_data)) {\n  library(googledrive)\n  drive_deauth()\n  drive_user()\n  drive_download(\n      drive_get(as_id(\"1FCKf19JtiI-OJMKLKHfsC2X2TMuwddzJ\")),\n      path = \"assets/FUL1_fastqs_GRID2.fastq.gz\",\n      overwrite = TRUE\n  )\n  R.utils::gunzip(\"assets/FUL1_fastqs_GRID2.fastq.gz\")\n}\n\nRead fastq file.\n\nf &lt;- ShortRead::FastqFile(raw_data)\nrfq &lt;- ShortRead::readFastq(f)\nheaders &lt;- rfq@id\nclose(f)\n\n\n\n4.4 Extracting information you need\nIn this step, we are extracting data from fastq headers of each and every read in the fastq file. Not super efficient and perhaps the slowest step of the whole analyses. Can you do it better than our example solution?\nDesired output: a table (tibble/data.frame) with reads as rows and meta-data as columns.\n\n\n\n\n\n\nTip\n\n\n\nWe will use the stringr package for string manipulation. Use str_split() to explode string data into columns and str_remove_all() to get rid of unwanted characters.\n\nTo split string on a particular character, group of characters use str_split. Here we split on comma.\n\ntext &lt;- \"This text is long, or not?\"\nstr_split(text, ',')\n\nTo remove everything following a given character, e.g. comma:\n\nstr_remove_all(text, \",.*\")\n\n\nCode\ndata &lt;- dplyr::as_tibble(matrix(NA_character_, ncol = 6, nrow = length(headers)), .name_repair = 'minimal')\ncolnames(data) &lt;- c('id', 'run_id', 'sample_id', 'read', 'channel', 'start_time')\nfor (i in 1:length(headers)) {\n  data[i,] &lt;- toString(headers[[i]]) %&gt;%\n    strsplit(' ') %&gt;%\n    unlist() %&gt;%\n    str_remove_all(\".*=\") %&gt;% t()\n}\n\n\n\n\n\n\n4.5 Preparing tidy dataset\nNow, the fun part begins:\n\nAdd column start_dttm that represents start time for a given read as proper datetime object (read lubridate docs) and\nAdd column chan that is the proper numeric representation of the channel,\nGroup reads by channel,\nArrange them by time,\nAdd time to next read (NA if this was the last read) and\nSort by channel again.\n\n\n\n\n\n\n\nTip\n\n\n\nRead about lead()\n\n\n\n\nCode\ndata2 &lt;- data %&gt;%\n  mutate(start_dttm = as_datetime(start_time)) %&gt;%\n  mutate(chan=as.numeric(channel)) %&gt;%\n  group_by(chan) %&gt;%\n  arrange(start_dttm) %&gt;%\n  mutate(time_diff = lead(start_dttm) - start_dttm) %&gt;%\n  arrange(chan)\n\n\n\n\n4.6 Plotting events per channel\nHere, we want to see what was happening in each channel over time. Plot the data you have just prepared so that:\n\nEach point is the start of a new read,\nColour corresponds to the lag to the next read.\n\nCan you visualize this in a better way? Different geometry?\n\n\nCode\nggplot(data2, mapping = aes(x = start_dttm,\n                            y = as.factor(chan),\n                            col = as.numeric(time_diff)\n                            )\n       ) +\n  geom_point(size = .5) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n4.7 Distribution of time intervals\nNow, we want to see how time-to-next-read is distributed. Since it has a veeeeery long right tail, I am cutting off everything above 200 seconds (just by eyeballing).\n\nPlot time-to-next-read is distribution (you can use base-R histogram),\nCan you find a better cutoff value?\n\n\n\nCode\n# Show time-to-next read distribution\n# thr &lt;- mean(data2$time_diff, na.rm = T) + 3 * sd(data2$time_diff, na.rm = T)\ntmp &lt;- data2 %&gt;%\n  ungroup() %&gt;%\n  filter(time_diff &lt; 200) %&gt;%\n  select(time_diff)\n\nhist(as.numeric(tmp$time_diff), breaks = 1000, las=1)"
  },
  {
    "objectID": "labs/tidyverse/index.html#species-identification-challenge",
    "href": "labs/tidyverse/index.html#species-identification-challenge",
    "title": "Tidy work in Tidyverse",
    "section": "5 Species Identification Challenge",
    "text": "5 Species Identification Challenge\nIn this challenge, your task will be to analyze species composition of some samples. The samples, were actual products containing parts of plants. DNA has been isolated form the samples and an amplicon metabarcoding was performed using two sets of primers: for the ITS1 and the ITS2 region. Each sample had 3 technical replicates. Your task will be to transform BLAST output to a tidy form suitable for further analyses or visualization.\n\n5.1 Load necessary libraries\nWe will obviously need tidyverse, we will also do some string manipulations with stringr also here package is good to have.\n\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(here)\n\n\n\n5.2 Input variables\nHere, we will define our input variables. We need:\n\nfile that contains the path to the dataset,\nsample_name is a string, the name of the sample you want to analyze,\nthreshold is an integer saying what is a the minimal number of replicates that have to contain an OTU in order to call it a true positive (TP),\nstrict a logical. If set to TRUE, only the OTUs deemed TP will be shown.\n\nBelow we set some example values:\n# Change the path to your project path, where your data is\nfile &lt;- here::here(\"docs/tidyverse_Marcin/lab/assets/blast_result.csv\")\nsample_name &lt;- 'SAMPLE12'\nthreshold &lt;- 1\nstrict &lt;- F\n\n\n5.3 Reading the data\nNow, you should read the data:\n\n\nCode\nspecies_orig &lt;- read_csv(file, col_names = c(\"sample\",\"its\",\"replicate\",\"OTU\",\"size\",\"hit\",\"perc_ident\",\"score\",\"family\",\"species\")) %&gt;%\n  select(-score)\n\nhead(species_orig,n = 10)\n\n\n\n  \n\n\n\nAs you see, the following information are included in the data:\n\nsample is simply the name of the sample,\nits is either ITS1 or ITS2 and tells which set of PCR primers has been used,\nreplicate contains information on which replicate the sequences come from,\nOTU is a unique identifier of the so-called Operational Taxonomic Unit, an OTU often corresponds to one species but not always. Sometimes 2 OTUs represent the same species, sometimes 1 OTU consists of more than one species,\nsize is the number of reads that support that particular OTU,\nhit is the BLAST hit identifier. The 4 top BLAST hits are reported per OTU,\nperc_identity is the percentage identity of the sequence to the BLAST hit,\nfamily is the identified plant family,\nspecies is the identified plant species.\n\n\n\n5.4 Number of replicates per species\nCreate a new dataset species that contains an extra column n_replicates. The column contains number of replicates this particular species is present in. Do it per sample and its.\n\n\nCode\nspecies &lt;- species_orig %&gt;%\n  group_by(sample, its, species) %&gt;%\n  mutate(n_replicates = n_distinct(replicate)) %&gt;%\n  ungroup()\n\nhead(species,n = 10)\n\n\n\n  \n\n\n\n\n\n5.5 Filter out unwanted samples\nNow, your task is to filter out all but your sample_name samples from the dataset. Call the resulting dataset my_sample.\n\n\nCode\nmy_sample &lt;- species %&gt;%\n  filter(sample == sample_name)\n\n\n\n\n5.6 Missing observations\nWhat happens if a set of primers failed to amplify or if one replicate was lost? Use complete() to make sure you have NA values in such cases.\n\n\nCode\nmy_sample &lt;- my_sample %&gt;%\n  complete(its = c(\"ITS1\", \"ITS2\"),\n           replicate = c(\"R1\",\"R2\",\"R3\"))\n\n\n\n\n5.7 Sorting issue\nLook, the first sample in the table is SAMPLE10. Why not SAMPLE1? That’s a sorting issue: if sorted as character, 10 will come before 1. WE have to fix this by adding trailing zero to the values in OTU. We do not expect more than 99 OTUs in a sample, so it is ok with only one trailing 0 (otherwise the 100th sample will spoil our sorting and come out like: SAMPLE100, SAMPLE01, SAMPLE10). We will need to use regular expression:\n\nAll values in the OTU column that follow pattern “OTUdigit” we need to change to “OTU0digit”. Regular expression that matches this is OTU([0-9]$) and it should be replaced by: OTU0\\\\1. Ask your TAs to explain this if you do not know much about regular expressions and pattern matching.\n\n\nmy_sample &lt;- my_sample %&gt;%\n  mutate(OTU = str_replace(OTU,pattern = \"OTU([0-9]$)\",\n                          replacement = \"OTU0\\\\1\"))\nhead(my_sample,n = 10)\n\n\n  \n\n\n\n\n\n5.8 Supporting reads\nSometimes, an OTU generates two or more top BLAST hits that come from the same species. We have decided to sum reads in such cases. Do it!\n\n\nCode\nmy_sample &lt;- my_sample %&gt;%\n  ungroup() %&gt;%\n  group_by(sample, its, replicate, OTU, species, n_replicates) %&gt;%\n  summarise(n_reads = sum(size)) %&gt;%\n  ungroup() %&gt;%\n  group_by(its, species, OTU)\n\nhead(my_sample,n=10)\n\n\n\n  \n\n\n\n\n\n5.9 Within-OTU species diversity\nNow, we want to see how many identifications an OTU got. Implement this. Store the result in a new tibble diversity.\n\n\nCode\ndiversity &lt;- my_sample %&gt;%\n  ungroup() %&gt;%\n  group_by(its, replicate, OTU) %&gt;%\n  summarise(n_species = n())\n\nhead(diversity,n=10)\n\n\n\n  \n\n\n\n\n\n5.10 Adding diversity data\nAdd the diversity data to my_sample using appropriate join function. Also, remove the column with sample names since we are dealing with only one sample.\n\n\nCode\nmy_sample &lt;- my_sample %&gt;%\n  left_join(diversity) %&gt;%\n  select(-sample)\n\nhead(my_sample,n=10)\n\n\n\n  \n\n\n\n\nWhat columns did we join on in our example solution?\n\n\n\n5.11 Visualising the data\nCan you think of a good way of visualizing the data? Think of:\n\nType of plot you want. The simpler the better?\nWhich variables you would like to visualize? We have chosen ITS, replicate, n_reads, n_replicates, OTU, threshold, n_species and specie. Well, pretty much all of them :-)\nHow do you represent variables: colors, shapes, separate plots, sizes?\nWhat transformations do you need to apply before visualizing the data?\n\nOur example solution involves some ggplot2 magics. But would base-R be good enough for this type of plot?\n\n\n\n\n\nRed – only one species in the current OTU, blue – identification above the threshold, grey – identification below the threshold"
  },
  {
    "objectID": "labs/tidyverse/index.html#wildlife-aircraft-strikes-challenge",
    "href": "labs/tidyverse/index.html#wildlife-aircraft-strikes-challenge",
    "title": "Tidy work in Tidyverse",
    "section": "6 Wildlife Aircraft Strikes Challenge",
    "text": "6 Wildlife Aircraft Strikes Challenge\nUse the FAA report and tidyverse to learn more about aircraft incidents with wildlife. Use your imagination and NYC data science blog for inspiration!\n\n\n\nRed – only one species in the current OTU, blue – identification above the threshold, grey – identification below the threshold"
  },
  {
    "objectID": "labs/scripting/index.html",
    "href": "labs/scripting/index.html",
    "title": "Functions & Scripts",
    "section": "",
    "text": "Note\n\n\n\n\n\nWrite programs that do one thing and do it well.\nWrite programs to work together.\nWrite programs to handle text streams, because that is a universal interface.\n\n– The UNIX philosophy, Doug McIlroy\n\nIn this exercise we will write a few functions and execute R scripts from the command line and provide them with options and data."
  },
  {
    "objectID": "labs/scripting/index.html#r-functions",
    "href": "labs/scripting/index.html#r-functions",
    "title": "Functions & Scripts",
    "section": "1 R Functions",
    "text": "1 R Functions\nLet’s jump right in and create a function. Your function should have it’s own function_name, atleast two parameters one of which with a default argument, code that performs some operations on the input and a return value. I do encourage you to think about it and make your own function, rather than copying the examples. Examples should be seen more as explanatory, semantic and inspirational.\nExample:\n\nfunction_name &lt;- function(param1, param2 = \"Lucy\"){\n  if (param2 == \"Lucy\") {\n    output &lt;- paste(\"Lucy in the sky with \",param1,\"\\n\",sep=\"\")}\n  else {\n    output &lt;- paste(param1,\" in the ocean with \",param2,\"\\n\",sep=\"\")}\n  return(cat(output))\n}\n\nTest your function to make sure it gives the output you would expect given different arguments.\n\nWhat happens if you don’t assign a argument to the parameter that does not have a default?\nDid I need to use the return() function in my example?\nWhy does my example perform the cat() function in the return() function?\nTry assigning a variable to the return value of your function. variable_a &lt;- function_name(\"Tom\")\nWhat happens to the variable if the return value is the output of cat()?\n\nNow lets see the power of your function in action. Write a loop that executes your function multiple times. Functions are great for performing operations on a number of files, objects or elements in objects that fit a certain condition.\n\nfor (i in c(\"Tom\",\"Mary\",\"Mahesh\",\"Henrik\")){\n  function_name(param1=i,param2=\"Brad\")\n  function_name(param1=i,param2=\"Lucy\")\n}\n\nTom in the ocean with Brad\nLucy in the sky with Tom\nMary in the ocean with Brad\nLucy in the sky with Mary\nMahesh in the ocean with Brad\nLucy in the sky with Mahesh\nHenrik in the ocean with Brad\nLucy in the sky with Henrik\n\n\nNow let’s take a look at the special ellipsis parameter for functions. Basically the ellipsis say that a function can take additional arguments. The function should work without arguments given at the ellipsis. One great example of this is the data.frame() function.\nFrom ?data.frame\nUsage\ndata.frame(..., row.names = NULL, check.rows = FALSE,\n           check.names = TRUE, fix.empty.names = TRUE,\n           stringsAsFactors = default.stringsAsFactors())\nThe ellipsis can be used to add columns to the data.frame. Try creating a data.frame with one column and one with several. Also, try creating a data.frame with no arguments for ..., what happens?\n\ndata.frame(a=c(1,2,3))\ndata.frame(a=c(1,2,3),b=c(4,5,6))\n\nAnother example where ellipsis are often used is to pass plot arguments into a function.\nExample:\n\nmy_plot &lt;- function(...){\n  plot(c(1,2,3),c(1,2,3),...)\n}\n\nmy_plot(main=\"Great title\", xlab = \"This will be X-label of plot\", ylab=\"Y-label\")\n\n\n\n\n\n\n\n\nTry creating your own function that uses the ellipsis parameter."
  },
  {
    "objectID": "labs/scripting/index.html#r-scripts",
    "href": "labs/scripting/index.html#r-scripts",
    "title": "Functions & Scripts",
    "section": "2 R Scripts",
    "text": "2 R Scripts\nWhile many R users write and execute code interactively (in e.g. RStudio), you can run the content of a script by writing source(\"myscriptfile.R\") in the R console. This is also a convenient way to load your custom functions (and this is actually what happens when you load an installed package with library()).\nBut once you have code that works you may want to run it routinely without an interactive R environment. R scripts can be executed directly from the command line by typing Rscript myscriptfile.R.\n\nMake an R script that prints a summary of a sample (n=1000) from a normal distribution. Save it as a .R file and execute it.\n\n\n# Example of a small script\nmydata=rnorm(1000)\nprint(summary(mydata))\n\nYou can also execute your script by typing its name in the console, provided it:\n\nStarts with a hashbang line that instructs your system how to interpret it, e.g. #!/usr/bin/env Rscript\nIs an executable file e.g. through chmod +x myscriptfile.R on Unix systems. If you are on windows you are on your own =).\n\nTask:\n\nModify your script and run it without Rscript.\nGo into a different folder, can you execute it without giving the path to the script?"
  },
  {
    "objectID": "labs/scripting/index.html#passing-and-parsing-arguments",
    "href": "labs/scripting/index.html#passing-and-parsing-arguments",
    "title": "Functions & Scripts",
    "section": "3 Passing and parsing arguments",
    "text": "3 Passing and parsing arguments\nIt’s unlikely that you would need to run the exact same process over and over again without any change in what data is processed or how it’s processed. One way to control the behavior of your code is to provide arguments to it. These commonly refer to file names or settings. You can supply arguments after the name of your script where you invoke it. In R, they are available from commandArgs().\n\nAdd commandArgs() to your script. Execute the script to print the arguments. Run it with a few extra words or numbers and see what happens.\n\nYou can use commandArgs(trailingOnly = TRUE) to suppress the first few items and access your actual arguments.\n\nMake your script use the first argument provided as the mean of the normal distribution.\n\n\n#!/usr/bin/env Rscript\nfirstarg=as.numeric(commandArgs(trailingOnly = TRUE)[1])\nmydata=rnorm(1000,mean = firstarg)\nprint(summary(mydata))\n\nProcessing multiple arguments may become complicated, especially if you want to be able to use C-like long and short flags such as -o outputfile -i inputfile --distribution normal. Packages that support such options include getopt, optparse and argparser.\n\nUse the optparse package to modify your script to accept the argument -m or --mean (followed by the value) for mean value.\n\n\n#!/usr/bin/env Rscript\n\n# don't say \"Loading required package: optparse\" every time\nsuppressPackageStartupMessages(require(optparse))\n\noption_list = list(\n  make_option(c(\"-m\", \"--mean\"), default=0)\n  # you could put the next option here\n)\noptions = parse_args(OptionParser(option_list=option_list))\nmy_mean=as.numeric(options$mean)\n\nmydata=rnorm(1000,mean = my_mean)\nprint(summary(mydata))"
  },
  {
    "objectID": "labs/scripting/index.html#standard-in-and-out",
    "href": "labs/scripting/index.html#standard-in-and-out",
    "title": "Functions & Scripts",
    "section": "4 Standard in and out",
    "text": "4 Standard in and out\nA convenient feature of command line scripts is the possibility to pipe data from one script to another, thereby avoiding the need for intermediate files. You can use file('stdin') and open() to define and open the connection in R and readLines() to read one or more lines from it.\n\nMake your script parse the mean value from a text stream, and run it using the pipe e.g. echo 100 | ./myscriptfile.R.\nUsing the same script, supply the mean from a text file (containing only that) with cat.\n\n\n#!/usr/bin/env Rscript\ninput_con  &lt;- file(\"stdin\")\nopen(input_con)\noneline &lt;- readLines(con = input_con, n = 1, warn = FALSE)\nclose(input_con)\nmean=as.numeric(oneline)\nmydata=rnorm(1000,mean = mean)\nprint(summary(mydata))\n\nYou can pipe your output to another process (any script or tool that accepts a stream) by appending | next_tool_or_script_call to the call, or to a file by appending &gt; filename.\n\nWhat happens if a warning is generated by your script, e.g. with warning('Something is wrong') and you pipe the output to a file?\nWhy? \n\nYou can use write(x,file=stderr()) or write(x,file=stdout()) to explicitly divert certain output.\nWell done, you should now know the basics of creating functions and some different kinds of R scripts."
  },
  {
    "objectID": "labs/quarto/index.html",
    "href": "labs/quarto/index.html",
    "title": "Literate programming with Quarto",
    "section": "",
    "text": "Note\n\n\n\nThese are exercises to get you started with quarto. Refer to the official quarto documentation for help.\nWe aim to cover the following topics:\n\nBasic usage\nMarkdown markup\nSet up a quarto notebook\nAdd content and export to some common formats\n\nHTML and PDF reports\nRevealJS presentation\n\nQuarto projects\n\nWebsite\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(stringr)"
  },
  {
    "objectID": "labs/quarto/index.html#introduction",
    "href": "labs/quarto/index.html#introduction",
    "title": "Literate programming with Quarto",
    "section": "1 Introduction",
    "text": "1 Introduction\nCreate a quarto document by creating a text file with .qmd extension. In RStudio, go to File &gt; New File &gt; Quarto Document. You are given the option to set title, author etc as well as output format. Set the output format as html. This document that you are working in is a quarto notebook or R notebook. You can set the display mode to be Source or Visual (where text formatting is shown).\nA quarto file usually consists of a YAML header, text in markdown format and if needed some code in code chunks. All of these are optional. An empty qmd file is a valid quarto file which will render to produce a blank html document.\n\n\n1.1 YAML\nThe content on the top of the quarto document within three dashes is the YAML matter. This is optional. It is really up to the author to decide how much information needs to be entered here. Here are some common base level YAML parameters.\n---\ntitle: \"My report\"\nsubtitle: \"A subtitle for the report\"\ndescription: \"This is a longer description of this report.\"\nauthor: \"John Doe\"\ndate: \"25-Apr-2022\"\n---\n\n\n\nThe default output format is html and this can be changed or arguments for this can be adjusted by specifying this in the yaml. Here is an updated version:\n---\ntitle: \"My report\"\nsubtitle: \"A subtitle for the report\"\ndescription: \"This is a longer description of this report.\"\nauthor: \"John Doe\"\ndate: last-modified\ndate-format: \"DD-MMM-YYYY\"\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    number-sections: true\n    number-depth: 4\n---\n\n# Section 1\n\nThis is some text\n\n# Section 2\n\nHere is some more text\n\n\n\nDate is now set as last-modified which means it is automatically updated whenever the document is rendered. The date format is adjusted by setting date-format: “DD-MMM-YYYY”. In addition, the output format is now explicitly specified. The table of contents is enabled and it’s depth is set to 4. Section numbering is enabled and depth is set to 4. Try changing some of these arguments to see how it affects the output.\nHere is a more complex version:\n---\ntitle: \"My report\"\nsubtitle: \"A subtitle for the report\"\ndescription: \"This is a longer description of this report.\"\nauthor: \"John Doe\"\ndate: last-modified\ndate-format: \"DD-MMM-YYYY\"\nformat:\n  html:\n    title-block-banner: true\n    smooth-scroll: true\n    toc: true\n    toc-depth: 4\n    toc-location: right\n    number-sections: true\n    number-depth: 4\n    code-fold: true\n    code-tools: true\n    code-copy: true\n    code-overflow: wrap\n    df-print: kable\n    standalone: false\n    fig-align: left\n---\n\n# Section 1\n\nThis is some text\n\n# Section 2\n\nHere is some more text\n\n```{r}\ndate()\n```\n\n\n\n\ntitle-block-banner: true displays the blue banner\ncode-fold: true folds the code and reduces clutter\ncode-copy: true adds a copy icon in the code chunk and allows the code to be copied easily\ncode-tools: true adds options to the top right of the document to allow the user to show/hide all code chunks and view source code\ndf-print: kable sets the default method of displaying tables\nstandalone: false specifies if all assets and libraries must be integrated into the output html file as a standalone document. Standalone document may not always work with complex html files such as those with interactive graphics.\n\nFor a complete guide to YAML metadata for HTML, see here.\n\n\n1.2 Markdown text\nMarkdown is a markup language similar to HTML, but simple and human-readable. There exists several variants of markdown with slight differences. Quarto uses Pandoc flavored markdown.\nHeadings are specified as such:\n## Level 2 heading  \n### Level 3 heading  \n#### Level 4 heading  \n##### Level 5 heading  \n###### Level 6 heading\nThis *italic text* becomes italic text.\nThis **bold text** becomes bold text.\nSubscript written like this H~2~O renders as H2O.\nSuperscript written like this 2^10^ renders as 210.\nBullet points are usually specified using -\n- Point one\n- Point two\n\nPoint one\nPoint two\n\nBlock quotes can be specified using &gt;.\n&gt; This is a block quote. This\n&gt; paragraph has two lines.\n\nThis is a block quote. This paragraph has two lines.\n\nLists can also be created inside block quotes.\n&gt; 1. This is a list inside a block quote.\n&gt; 2. Second item.\n\n\nThis is a list inside a block quote.\nSecond item.\n\n\nLinks can be created using [this](https://quarto.org) which renders like this.\n\n\n1.3 Images\nImages can be displayed from a relative local location or a full URL using ![This is a caption](assets/gotland.jpg). For example:\n\n\n\nThis is a caption\n\n\nBy default, the image is displayed at full scale or until it fills the display width. The image dimension can be adjusted ![This is a caption](assets/gotland.jpg){width=40%}.\n\n\n\nThis is a caption\n\n\nFor finer control, raw HTML can be used. For example;\n&lt;img src=\"assets/gotland.jpg\" width=\"150px\"&gt;\n\n\n\n\n\n\n\nNote\n\n\n\nUsing raw HTML would only work if the output format is an HTML format.\n\n\nImages can also be displayed using R code. Chunks option out.width in RMarkdown can be used to control image display size.\nThis image is displayed at a size of 200 pixels.\n```{r}\n#| out-width: \"200px\"\nknitr::include_graphics(\"assets/gotland.jpg\")\n```\n\n\n\n\n\n\n\n\n\nThis image is displayed at a size of 75 pixels.\n```{r}\n#| out-width: \"75px\"\nknitr::include_graphics(\"assets/gotland.jpg\")\n```\n\n\n\n\n\n\n\n\n\n\n\n1.4 Code\nText can be formatted as code. Code is displayed using monospaced font. Code formatting that stands by itself as a paragraph is called block code. Block codes are specified using three backticks ``` followed by code and then three more backticks.\nThis text below\n```\nThis is generic block code.\n```\nrenders like this\nThis is generic block code.\nCode formatting can also be included in the middle of a sentence. This is called inline code formatting. Using this `This is an inline formatted code.` renders like this: This is an inline formatted code.\nThe above codes are not actually executed. They are just text formatted in a different font. Code can be executed by specifying the language along with the backticks. Block code formatted as such:\n```{r}\nstr(iris)\n```\nrenders like this:\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\nCode blocks are called chunks. The chunk is executed when this document is rendered. In the above example, the rendered output has two chunks; input and output chunks. The rendered code output is also given code highlighting based on the language. For example;\nThis code chunk\n```{r}\n#| eval: false\nggplot(dfr4,aes(x=Month,y=fraction,colour=Year,group=Year))+\n  geom_point(size=2)+\n  geom_line()+\n  labs(x=\"Month\",y=\"Fraction of support issues\")+\n  scale_colour_manual(values=c(\"#000000\",\"#E69F00\",\"#56B4E9\",\n  \"#009E73\",\"#F0E442\",\"#006699\",\"#D55E00\",\"#CC79A7\"))+\n  theme_bw(base_size=12,base_family=\"Gidole\")+\n  theme(panel.border=element_blank(),\n        panel.grid.minor=element_blank(),\n        panel.grid.major.x=element_blank(),\n        axis.ticks=element_blank())\n```\nwhen rendered (echo: true by default, but not evaluated) looks like\n\nggplot(dfr4,aes(x=Month,y=fraction,colour=Year,group=Year))+\n  geom_point(size=2)+\n  geom_line()+\n  labs(x=\"Month\",y=\"Fraction of support issues\")+\n  scale_colour_manual(values=c(\"#000000\",\"#E69F00\",\"#56B4E9\",\n  \"#009E73\",\"#F0E442\",\"#006699\",\"#D55E00\",\"#CC79A7\"))+\n  theme_bw(base_size=12,base_family=\"Gidole\")+\n  theme(panel.border=element_blank(),\n        panel.grid.minor=element_blank(),\n        panel.grid.major.x=element_blank(),\n        axis.ticks=element_blank())\n\nThe behaviour of code chunks can be adjusted using chunk parameters or execution options. The chunk has several options which can be used to control chunk properties.\nUsing eval: false prevents that chunk from being executed. eval: true which is the default, executes the chunk. Using echo: false prevents the code from that chunk from being displayed. Using output: false hides the output from that chunk. Here are some of them:\n\n\n\nOption\nDefault\nDescription\n\n\n\n\neval\ntrue\nEvaluates the code in this chunk\n\n\necho\ntrue\nDisplay the code\n\n\noutput\ntrue\ntrue, false or asis\n\n\nwarning\ntrue\nDisplay warnings from code execution\n\n\nerror\nfalse\nDisplay error from code execution\n\n\nmessage\ntrue\nDisplay messages from this chunk\n\n\ninclude\ntrue\nDisable message, warnings and all output\n\n\n\nChunk options are specified like this:\n```{r}\n#| eval: false\n#| echo: false\n#| fig-height: 6\n#| fig-width: 7\n```\nThese chunk arguments or execution options can also be set globally in the YAML matter.\n---\nexecute:\n  eval: true\n  echo: false\n---\nThere are many other execution options.\n\n\n1.5 Tables\nThis is a table with a label and a dynamically generated caption.\n```{r}\n#| label: tbl-iris\n#| tbl-cap: !expr paste0(\"The column names are \",paste(colnames(iris),collapse=\", \"))\n\nhead(iris)\n```\n\n\n\n\nTable 1: The column names are Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species\n\n\n\n\n  \n\n\n\n\n\n\nTables can be also be simple markdown.\n|#|Sepal.Length|Sepal.Width|Petal.Length|Petal.Width|Species|\n|---|---|---|---|---|---|\n|1|5.1|3.5|1.4|0.2|setosa|\n|2|4.9|3.0|1.4|0.2|setosa|\n|3|4.7|3.2|1.3|0.2|setosa|\n|4|4.6|3.1|1.5|0.2|setosa|\n\n: This is a caption {#tbl-markdown-table}\n\n\n\nTable 2: This is a caption\n\n\n\n\n\n#\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n3\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n\n\n\n\n\n\n1.6 Plots\nR Plots can be plotted like below:\n```{r}\n#| label: fig-plot-a\n#| fig-cap: This is a figure caption.\n#| fig-height: 6\n#| fig-width: 6\nplot(x=iris$Petal.Length,y=iris$Petal.Width)\n```\n\n\n\n\n\n\n\n\nFigure 1: This is a figure caption.\n\n\n\n\n\n\n\n1.7 Export\nThe quarto notebook can be exported into various format. The most common formats are HTML and PDF.\n\n1.7.1 HTML\nThe quarto document can be previewed as an HTML inside RStudio by clicking the ‘Render’ button.\nThe document can be exported from R using the quarto R package.\n\nquarto::quarto_render(\"document.qmd\")\n\nThe document can be rendered from the terminal as such:\n\nquarto render document.qmd\n\nHTML documents can be opened and viewed in any standard browser such as Chrome, Safari, Firefox etc.\n\n\n1.7.2 PDF\nA qmd document can be converted to a PDF. Behind the scenes, the markdown is converted to TeX format. The conversion to PDF needs a tool that understands TeX format and converts to PDF. This can be softwares like ‘MacTeX’, ‘MikTeX’ etc. which needs to be installed on the system beforehand. A light-weight option is to install R package tinytex.\nThe format argument in the YAML matter must be changed to pdf, and the pdf-engine option may need to be changed as needed. If using tinytex, set pdf-engine: pdflatex.\nSometimes TeX converters may need additional libraries which may need to be installed. And all features of HTML are not supported on TeX which may return errors.\nSee here for more PDF options.\nAn alternative to using TeX based PDF generation is to use Typst. Quarto support the Typst engine natively. More information about using Typst can be found in the quarto typst documentation."
  },
  {
    "objectID": "labs/quarto/index.html#report",
    "href": "labs/quarto/index.html#report",
    "title": "Literate programming with Quarto",
    "section": "2 Report",
    "text": "2 Report\nIn this example, we will recreate the parameterized report shown below:\n\n\n\n\nThe source code for the page is available on the page by clicking the code-tools icon on top right.\nThe aim of the report is to subset the iris dataset and create a report on the subsetted data. This is a parameterized report because the species to subset is provided as a parameter to the document during run time.\nThis is how the YAML metadata is organized:\n---\nsubtitle: \"Parameterized report\"\nauthor: \"John Doe\"\ndate: last-modified\nformat:\n  html:\n    title-block-banner: true\n    toc: true\n    number-sections: true\n    code-tools: true\n    fig-align: left\n\nparams:\n  name: setosa\n---\n\nSince this a parameterized report, params is defined in the YAML metadata. Parameters have to be defined with defaults. Here we have one parameter name with default value setosa. A different argument to the parameter can be passed in while rendering the document. If no parameter is passed, the default value is used.\nThe title takes this parameter to create a title with the name.\nThe output format is set to html.\nTable of contents (toc) is enabled.\ntitle-block-banner is enabled\ncode-tools creates a widget on the top right side of the document to view source code.\n\nA heading is created through code using param value.\n```{r}\n#| echo: false\n#| output: asis\ncat(\"## \",params$name)\n```\nThis code chunk is used to create a plot along with plot caption and plot numbering.\n```{r}\n#| label: fig-scatterplot\n#| fig-cap: !expr paste0(\"Scatterplot of \",params$name,\" species.\")\nggplot(iris_filtered,aes(Sepal.Length,Petal.Length,col=Species))+\n    geom_point()+\n    labs(title=params$name)\n```\n\nIt is important that the figure label starts with fig-\nThe figure caption can be generated from code using the special !expr usage\n\nIn the last chunk, an image of the species is displayed.\n\nTry to create a new report for the species versicolor\nTry to convert the document to PDF\n\nHTML outputs are documented here."
  },
  {
    "objectID": "labs/quarto/index.html#revealjs",
    "href": "labs/quarto/index.html#revealjs",
    "title": "Literate programming with Quarto",
    "section": "3 RevealJS",
    "text": "3 RevealJS\nNow, we will convert the report to a presentation using revealjs.\n\n\n\n\nThe raw code is available here.\n\nThe most important change is format: html to format: revealjs\nSlides are defined by heading ##\nSlides can be hidden using {visibility=\"hidden\"}\n\n## Title {visibility=\"hidden\"}\n\nIncremental lists can be created like this\n\n::: {.incremental}\n- Eat spaghetti\n- Drink wine\n:::\n\nColumns can be defined like this\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nLeft column\n:::\n\n::: {.column width=\"50%\"}\nRight column\n:::\n\n::::\n\nSpeaker notes are created like this:\n\n::: {.notes}\nSpeaker notes go here.\n:::\nThe presenter view is enabled by pressing the S key.\n\nThe presentation theme can be changed\n\nformat:\n  revealjs: \n    theme: dark\n\nMinor slide content can be defined as below. This content will be smaller font size and pushed to the bottom.\n\n::: aside\nSome additional commentary of more peripheral interest.\n:::\n\nCode chunks can have line highlighting\n\n```{r code-line-numbers=\"4-5\"}\nlibrary(ggplot2)\n\nggplot(iris,aes(Sepal.Length, Petal.Length))+\n  geom_point()+\n  theme_bw()\n```\n\nTabset panels\n\n::: {.panel-tabset}\n\n### Tab A\n\nContent for `Tab A`\n\n### Tab B\n\nContent for `Tab B`\n\n:::\nRevealJS features are documented here."
  },
  {
    "objectID": "labs/quarto/index.html#projects",
    "href": "labs/quarto/index.html#projects",
    "title": "Literate programming with Quarto",
    "section": "4 Projects",
    "text": "4 Projects\nSo far, the output formats have been a single document. We can also have a project composed of multiple documents and document types. In this case, the files are organised in a directory and the configuration is defined in _quarto.yml. This will be referred to as the config file. Think of this as a shared YAML metadata file for all of the documents. In addition, an index.qmd file defines the home page.\nFor a website, the minimal config looks like this\nproject:\n  type: website\nAnd for a book:\nproject:\n  type: book\nThen running quarto render renders the output into a directory named _site. The output can be changed, for example, to docs for GitHub Pages.\nproject:\n  type: website\n  output_dir: docs\nThe output format by default is HTML. This can be changed or modified by adding format to the config file or to individual qmd files. The parameters defined in the config file will be shared by all other qmd files.\nTo create a project in RStudio, go to File &gt; New Project , then select directory and then a project type such as website, blog or book. Try creating one based on what interests you. Website and blog documentation is here and books are here.\nFor more project options, see here.\n\n\n\nThis is a caption\nThis is a caption\nFigure 1: This is a figure caption."
  },
  {
    "objectID": "labs/oop/index.html",
    "href": "labs/oop/index.html",
    "title": "Object-Oriented Programming in R",
    "section": "",
    "text": "Note\n\n\n\nDuring this lab, we will go through the most important features of 3 out of the 4 existing OOP systems in R:\n\nS3,\nS4,\nR6.\n\nWhile S3 and S4 are base-R OOP systems, R6 is provided by the R6 package. Both S3 and S4 follow the functional OOP style while R6 is more similar to OOP models known from Java or C++. We will not cover the Reference Classes (a.k.a. RC) which is yet another base-R OOP model. Why? Well, it is really tricky to use and its documentation is not always complete…"
  },
  {
    "objectID": "labs/oop/index.html#s3-classes",
    "href": "labs/oop/index.html#s3-classes",
    "title": "Object-Oriented Programming in R",
    "section": "1 S3 Classes",
    "text": "1 S3 Classes\n\nWhat is the class of the object returned by the lm() function?\n\n\n\nCode\nobj &lt;- lm(speed ~ dist, data = cars) \nclass(obj)\n\n\n\nWhat basic data type is it build upon?\n\n\n\nCode\ntypeof(obj)\n\n\n\nWhat attributes does the object of the lm class have?\n\n\n\nCode\nattributes(obj)\n\n\n\nWhat is the structure of the lm object?\n\n\n\nCode\nstr(obj)\n\n\n\nDoes the lm class implement own str()?\n\n\n\nCode\nstr(obj)\n# compare to:\nstr(unclass(obj)) \n\n# Answer: no\n\n\n\nWhat is the class of a tibble? You have to load the tidyverse package and use on of the built-in datasets, e.g. mtcars as argument to as_tibble() to check the class.\n\n\n\nCode\nrequire(tidyverse)\nobj &lt;- as_tibble(mtcars)\nclass(obj)\n\n\n\nWhat is the underlying data type?\n\n\n\nCode\ntypeof(obj)\n\n\n\nIs the str() function used by tibbles the default str()?\n\n\n\nCode\nstr(obj)\nstr(unclass(obj))\n# Answer: no\n\n\n\nImplement your own class meta_frame that is a data.frame with additional attributes:\n\nCharacter attribute descr (a description),\ncreation attribute which will hold the creation date.\n\n\nCheck that it works, i.e. that it has the expected attributes and that it is a separate class.\n\nHow do you access the description field?\n\n\n\nCode\nmeta_frame &lt;- function(df, descr, creation) {\n  structure(\n    list(\n      df = df, \n      descr = descr, \n      creation = creation\n    ),\n    class = \"meta_frame\"\n  )\n}\nobj &lt;- meta_frame(mtcars, 'The mtcars dataset', '10-06-2018')\nstr(obj)\nobj$descr\n\n\n\nDesign implementation of your own S3 class protein that stores the following information (you will implement the class in the next point, now just think and draw on paper if you wish):\n\nProtein sequence,\nProtein length,\nPost-translational modification (PTM) site coords,\nPTM type that can be either of: “phosphorylation”, or “methylation”.\n\nImplement the protein class from the previous point using the constructor, validator and helper design pattern. Try to reduce the number of input arguments to: + + a sequence and\n\nA list of PTMs.\n\n\n\n\nCode\n# Constructor\nnew_protein &lt;- function(sequence, length, ptm_site, ptm_type) {\n  stopifnot(is.character(sequence))\n  stopifnot(is.integer(length))\n  stopifnot(is.numeric(ptm_site))\n  stopifnot(is.character(ptm_type))\n  structure(\n    sequence,\n    length = length,\n    ptm_site = ptm_site,\n    ptm_type = ptm_type,\n    class = \"protein\"\n  )\n}\n\n# Helper\nprotein &lt;- function(sequence, ptm) {\n  sequence &lt;- sequence\n  len &lt;- nchar(sequence)\n  ptm_site &lt;- ptm[[1]]\n  ptm_type = ptm[[2]]\n  validate_protein(new_protein(sequence, len, ptm_site, ptm_type))\n}\n\n# Validator\nvalidate_protein &lt;- function(x) {\n  sequence &lt;- x[1]\n  len &lt;- attr(x, 'length')\n  ptm_site &lt;- attr(x, 'ptm_site')\n  ptm_type &lt;- attr(x, 'ptm_type')\n  if (is.na(sequence)) {\n    stop('Sequence is missing!', call. = FALSE)\n  }\n  if (length(ptm_site) != length(ptm_type)) {\n    stop('PTM type and site differ in length!', call. = FALSE)\n  }\n  if ((sum(!ptm_type %in% c('phosphorylation', 'methylation'))) &gt; 0) {\n    stop('Invalid PTM types detected!', call. = FALSE)\n  }\n  return(x)\n}\n\n\n\nWhat would you improve in our implementation of protein. Is it really user friendly?\nWrite a generic print for the protein class. It should print e.g.:\n\n[1] \"============== Protein ==============\"\n[1] \"Sequence:ARNDKLLQWYTTARD\"\n[1] \"Length: 15 aa.\"\n[1] \"============== PTM section ==============\"\n[1] \"Site: 3\" \"Site: 5\"\n[1] \"Type: phosphorylation\" \"Type: methylation\"  \n\n\nCode\nprint.protein &lt;- function(x) {\n  sequence &lt;- unclass(x)\n  len &lt;- attr(x, 'length')\n  ptm_site &lt;- attr(x, 'ptm_site')\n  ptm_type &lt;- attr(x, 'ptm_type')\n  print(\"============== Protein ==============\")\n  print(paste0(\"Sequence:\", sequence))\n  print(paste0(\"Length: \", len, \" aa.\"))\n  print(\"============== PTM section ==============\")\n  print(paste0(\"Site: \", ptm_site))\n  print(paste0(\"Type: \", ptm_type))\n}\n\n\n\nTest that the protein class works as it should and that generic print works as well.\n\n\n\nCode\nmy_prot &lt;- protein(\"ARNDKLLQWYTTARD\", \n                   list(\n                     site = c(3, 5), \n                     type = c('phosphorylation', 'methylation')\n                    )\n                  )\nclass(my_prot)\ntypeof(my_prot)\nprint(my_prot)"
  },
  {
    "objectID": "labs/oop/index.html#s4-classes",
    "href": "labs/oop/index.html#s4-classes",
    "title": "Object-Oriented Programming in R",
    "section": "2 S4 Classes",
    "text": "2 S4 Classes\n\nRe-write the protein class in S4 (with validation!).\n\n\n\nCode\n# Generator\n.protein &lt;- setClass('protein',\n                     slots = c(\n                       sequence = 'character',\n                       length = 'numeric',\n                       ptm_site = 'numeric',\n                       ptm_type = 'character'\n                      )\n                    )\n\n# Constructor\nprotein &lt;- function(sequence, ptm) {\n  sequence &lt;- sequence\n  len &lt;- nchar(sequence)\n  ptm_site &lt;- ptm[[1]]\n  ptm_type &lt;- ptm[[2]]\n  if (is.na(sequence)) {\n    stop('Sequence is missing!', call. = FALSE)\n  }\n  if (length(ptm_site) != length(ptm_type)) {\n    stop('PTM type and site differ in length!', call. = FALSE)\n  }\n  if ((sum(!ptm_type %in% c('phosphorylation', 'methylation'))) &gt; 0) {\n    stop('Invalid PTM types detected!', call. = FALSE)\n  }\n  pt &lt;- .protein(sequence = sequence, \n           length = len, \n           ptm_site = ptm_site, \n           ptm_type = ptm_type)\n  return(pt)\n}\n\n\n\nCreate an S4 object of the protein class and check whether it works.\n\n\n\nCode\nmy_prot &lt;- protein(\"ARNDKLLQWYTTARD\", \n                   list(\n                     site = c(3, 5), \n                     type = c('phosphorylation', 'methylation')\n                    )\n                  )\nclass(my_prot)\ntypeof(my_prot)\nstr(my_prot)\n\n\n\nImplement the generic print using S4 and check that it works.\n\n\n\nCode\nsetMethod('print', 'protein', \n  function(x) {\n    sequence &lt;- x@sequence\n    len &lt;- x@length\n    ptm_site &lt;- x@ptm_site\n    ptm_type &lt;- x@ptm_type\n    print(\"============== Protein ==============\")\n    print(paste0(\"Sequence:\", sequence))\n    print(paste0(\"Length: \", len, \" aa.\"))\n    print(\"============== PTM section ==============\")\n    print(paste0(\"Site: \", ptm_site))\n    print(paste0(\"Type: \", ptm_type))\n})\n\nprint(my_prot)\n\n\n\nImplement a new S4 class ext_protein that extends protein with 3 slots:\n\nFeature type,\nFeature position, and\nFeature value.\n\n\n\n\nCode\n.ext_protein &lt;- setClass('ext_protein', \n                         contains = c('protein'),\n                         slots = c(\n                           prot = 'protein',\n                           feature_type = 'character',\n                           feature_position = 'numeric',\n                           feature_value = 'character'\n                         ))\nmy_ext_prot &lt;- .ext_protein(prot = my_prot,\n                           feature_type = 'modification',\n                           feature_position = 11,\n                           feature_value = 'absent'\n                  )\nclass(my_ext_prot)\ntypeof(my_ext_prot)\nstr(my_ext_prot)"
  },
  {
    "objectID": "labs/oop/index.html#r6-classes",
    "href": "labs/oop/index.html#r6-classes",
    "title": "Object-Oriented Programming in R",
    "section": "3 R6 Classes",
    "text": "3 R6 Classes\n\nInstall and load the R6 package,\nImplement the protein class using R6 model and check that it works as expected:\n\n\n\nCode\nrequire(R6)\nprotein &lt;- R6Class(classname = 'protein',\n                        public = list(\n                          seq = NA,\n                          length = NULL,\n                          ptm_site = NA,\n                          ptm_type = NA,\n                          initialize = function(seq = NA, ptm = NA) {\n                            self$seq &lt;- seq\n                            self$length &lt;- nchar(self$seq)\n                            self$ptm_site &lt;- ptm[[1]]\n                            self$ptm_type &lt;- ptm[[2]]\n                            # Check types\n                            stopifnot(is.character(seq))\n                            \n                            #Validate\n                            if (is.na(self$seq)) {\n                              stop('Sequence is missing!', call. = FALSE)\n                            }\n                            if (length(self$ptm_site) != length(self$ptm_type)) {\n                              stop('PTM type and site differ in length!', call. = FALSE)\n                            }\n                            if ((sum(!self$ptm_type %in% c('phosphorylation', 'methylation'))) &gt; 0) {\n    stop('Invalid PTM types detected!', call. = FALSE)\n  }\n                          }\n )\n)\n\nmy_new_prot &lt;- protein$new(seq = \"ARNDKLLQWYTTARD\", ptm = \n                   list(\n                     site = c(3, 5), \n                     type = c('phosphorylation', 'methylation')\n                    ))\nstr(my_new_prot)\n\n\nCongratulations! You are familiar with S3, S4 and R6 object models by now!"
  },
  {
    "objectID": "labs/index.html",
    "href": "labs/index.html",
    "title": "Labs",
    "section": "",
    "text": "Best Coding Practices\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDebugging, Profiling and Optimizing Code\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions & Scripts\n\n\n\nSebastian DiLorenzo, Markus Mayrhofer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLiterate programming with Quarto\n\n\n\nRoy Francis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMathematical statistics and machine learning in R\n\n\n\nNikolay Oskolkov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObject-Oriented Programming in R\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting with ggplot2\n\n\n\nRoy Francis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR packages\n\n\n\nSebastian DiLorenzo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy work in Tidyverse\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVectorization\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeb apps with Shiny\n\n\n\nRoy Francis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngit and R\n\n\n\nSebastian DiLorenzo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreticulate\n\n\n\nNina Norgren\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "labs/ggplot/index.html",
    "href": "labs/ggplot/index.html",
    "title": "Plotting with ggplot2",
    "section": "",
    "text": "Note\n\n\n\nThese are a series of exercises to help you get started and familiarize yourself with ggplot2 syntax, plot building logic and fine modification of plots. Practice using the Basics section and then move on to slightly more complex plots: a scatterplot and a heatmap."
  },
  {
    "objectID": "labs/ggplot/index.html#basics",
    "href": "labs/ggplot/index.html#basics",
    "title": "Plotting with ggplot2",
    "section": "1 Basics",
    "text": "1 Basics\nFirst step is to make sure that the necessary packages are installed and loaded.\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(patchwork)\n\nWe use the iris data to get started. This dataset has four continuous variables and one categorical variable. It is important to remember about the data type when plotting graphs.\n\ndata(\"iris\")\nhead(iris)\n\n\n  \n\n\n\n\n1.1 Building a plot\nggplot2 plots are initialized by specifying the dataset. This can be saved to a variable or it draws a blank plot.\n\nggplot(data=iris)\n\n\n\n\n\n\n\n\nNow we can specify what we want on the x and y axes using aesthetic mapping. And we specify the geometric using geoms. Note that the variable names do not have double quotes \"\" like in base plots.\n\nggplot(data=iris)+\n  geom_point(mapping=aes(x=Petal.Length,y=Petal.Width))\n\n\n\n\n\n\n\n\n\n\n1.2 Multiple geoms\nFurther geoms can be added. For example let’s add a regression line. When multiple geoms with the same aesthetics are used, they can be specified as a common mapping. Note that the order in which geoms are plotted depends on the order in which the geoms are supplied in the code. In the code below, the points are plotted first and then the regression line.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point()+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\n\n\n1.3 Using colors\nWe can use the categorical column Species to color the points. The color aesthetic is used by geom_point and geom_smooth. Three different regression lines are now drawn. Notice that a legend is automatically created.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width,color=Species))+\n  geom_point()+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\nIf we wanted to keep a common regression line while keeping the colors for the points, we could specify color aesthetic only for geom_point.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\n\n\n1.4 Aesthetic parameter\nWe can change the size of all points by a fixed amount by specifying size outside the aesthetic parameter.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species),size=3)+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\n\n\n1.5 Aesthetic mapping\nWe can map another variable as size of the points. This is done by specifying size inside the aesthetic mapping. Now the size of the points denote Sepal.Width. A new legend group is created to show this new aesthetic.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width))+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\n\n\n1.6 Discrete colors\nWe can change the default colors by specifying new values inside a scale.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width))+\n  geom_smooth(method=\"lm\")+\n  scale_color_manual(values=c(\"red\",\"blue\",\"green\"))\n\n\n\n\n\n\n\n\n\n\n1.7 Continuous colors\nWe can also map the colors to a continuous variable. This creates a color bar legend item.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\n\n\n\n\n1.8 Titles\nNow let’s rename the axis labels, change the legend title and add a title, a subtitle and a caption. We change the legend title using scale_color_continuous(). All other labels are changed using labs().\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")+\n  scale_color_continuous(name=\"New Legend Title\")+\n  labs(title=\"This Is A Title\",subtitle=\"This is a subtitle\",x=\" Petal Length\", \n       y=\"Petal Width\", caption=\"This is a little caption.\")\n\n\n\n\n\n\n\n\n\n\n1.9 Axes modification\nLet’s say we are not happy with the x-axis breaks 2,4,6 etc. We would like to have 1,2,3… We change this using scale_x_continuous().\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")+\n  scale_color_continuous(name=\"New Legend Title\")+\n  scale_x_continuous(breaks=1:8)+\n  labs(title=\"This Is A Title\",subtitle=\"This is a subtitle\",x=\" Petal Length\", \n       y=\"Petal Width\", caption=\"This is a little caption.\")\n\n\n\n\n\n\n\n\n\n\n1.10 Faceting\nWe can create subplots using the faceting functionality. Let’s create three subplots for the three levels of Species.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")+\n  scale_color_continuous(name=\"New Legend Title\")+\n  scale_x_continuous(breaks=1:8)+\n  labs(title=\"This Is A Title\",subtitle=\"This is a subtitle\",x=\" Petal Length\", \n       y=\"Petal Width\", caption=\"This is a little caption.\")+\n  facet_wrap(~Species)\n\n\n\n\n\n\n\n\n\n\n1.11 Themes\nThe look of the plot can be changed using themes. Let’s can the default theme_grey() to theme_bw().\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")+\n  scale_color_continuous(name=\"New Legend Title\")+\n  scale_x_continuous(breaks=1:8)+\n  labs(title=\"This Is A Title\",subtitle=\"This is a subtitle\",x=\" Petal Length\", \n       y=\"Petal Width\", caption=\"This is a little caption.\")+\n  facet_wrap(~Species)+\n  theme_bw()\n\n\n\n\n\n\n\n\nAll non-data related aspects of the plot can be modified through themes. Let’s modify the colors of the title labels and turn off the gridlines. The various parameters for theme can be found using ?theme.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")+\n  scale_color_continuous(name=\"New Legend Title\")+\n  scale_x_continuous(breaks=1:8)+\n  labs(title=\"This Is A Title\",subtitle=\"This is a subtitle\",x=\" Petal Length\", \n       y=\"Petal Width\", caption=\"This is a little caption.\")+\n  facet_wrap(~Species)+\n  theme_bw()+\n  theme(\n    axis.title=element_text(color=\"Blue\",face=\"bold\"),\n    plot.title=element_text(color=\"Green\",face=\"bold\"),\n    plot.subtitle=element_text(color=\"Pink\"),\n    panel.grid=element_blank()\n  )\n\n\n\n\n\n\n\n\nThemes can be saved and reused.\n\nnewtheme &lt;- theme(\n    axis.title=element_text(color=\"Blue\",face=\"bold\"),\n    plot.title=element_text(color=\"Green\",face=\"bold\"),\n    plot.subtitle=element_text(color=\"Pink\"),\n    panel.grid=element_blank())\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Sepal.Width))+\n  geom_smooth(method=\"lm\")+\n  scale_color_continuous(name=\"New Legend Title\")+\n  scale_x_continuous(breaks=1:8)+\n  labs(title=\"This Is A Title\",subtitle=\"This is a subtitle\",x=\" Petal Length\", \n       y=\"Petal Width\", caption=\"This is a little caption.\")+\n  facet_wrap(~Species)+\n  theme_bw()+\n  newtheme\n\n\n\n\n\n\n\n\n\n\n1.12 Controlling legends\nHere we see two legends based on the two aesthetic mappings.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width))\n\n\n\n\n\n\n\n\nIf we don’t want to have the extra legend, we can turn off legends individually by aesthetic.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width))+\n  guides(size=\"none\")\n\n\n\n\n\n\n\n\nWe can also turn off legends by geom.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width),show.legend=FALSE)\n\n\n\n\n\n\n\n\nLegends can be moved around using theme.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width))+\n  theme(legend.position=\"top\",\n        legend.justification=\"right\")\n\n\n\n\n\n\n\n\nLegend rows can be controlled in a finer manner.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species,size=Sepal.Width))+\n  guides(size=guide_legend(nrow=2,byrow=TRUE),\n         color=guide_legend(nrow=3,byrow=T))+\n  theme(legend.position=\"top\",\n        legend.justification=\"right\")\n\n\n\n\n\n\n\n\n\n\n1.13 Labelling\nItems on the plot can be labelled using the geom_text or geom_label geoms.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_text(aes(label=Species,hjust=0),nudge_x=0.5,size=3)\n\n\n\n\n\n\n\n\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_label(aes(label=Species,hjust=0),nudge_x=0.5,size=3)\n\n\n\n\n\n\n\n\nThe R package ggrepel allows for non-overlapping labels.\n\nlibrary(ggrepel)\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  geom_text_repel(aes(label=Species),size=3)\n\n\n\n\n\n\n\n\n\n\n1.14 Annotations\nCustom annotations of any geom can be added arbitrarily anywhere on the plot.\n\nggplot(data=iris,mapping=aes(x=Petal.Length,y=Petal.Width))+\n  geom_point(aes(color=Species))+\n  annotate(\"text\",x=2.5,y=2.1,label=\"There is a random line here\")+\n  annotate(\"segment\",x=2,xend=4,y=1.5,yend=2)\n\n\n\n\n\n\n\n\n\n\n1.15 Barplots\n\nggplot(data=iris,mapping=aes(x=Species,y=Petal.Width))+\n  geom_bar(stat=\"identity\")\n\n\n\n\n\n\n\n\n\n\n1.16 Flip axes\nx and y axes can be flipped using coord_flip.\n\nggplot(data=iris,mapping=aes(x=Species,y=Petal.Width))+\n  geom_bar(stat=\"identity\")+\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n1.17 Error Bars\nAn example of using error bars with points. The mean and standard deviation is computed. This is used to create upper and lower bounds for the error bars.\n\ndfr &lt;- iris %&gt;% group_by(Species) %&gt;% \n  summarise(mean=mean(Sepal.Length),sd=sd(Sepal.Length)) %&gt;%\n  mutate(high=mean+sd,low=mean-sd)\n\nggplot(data=dfr,mapping=aes(x=Species,y=mean,color=Species))+\n  geom_point(size=4)+\n  geom_errorbar(aes(ymax=high,ymin=low),width=0.2)"
  },
  {
    "objectID": "labs/ggplot/index.html#economist-scatterplot",
    "href": "labs/ggplot/index.html#economist-scatterplot",
    "title": "Plotting with ggplot2",
    "section": "2 Economist Scatterplot",
    "text": "2 Economist Scatterplot\nThe aim of this challenge is to recreate the plot below originally published in The Economist. The graph is a scatterplot showing the relationship between Corruption Index and Human Development Index for various countries.\n\n\n2.1 Data\nDownload the data csv file.\n data_economist.csv\nStart by reading in the data.\n\nec &lt;- read.csv(\"assets/data_economist.csv\",header=T)\nhead(ec)\n\n\n  \n\n\n\nMake sure that the fields are of the correct type. The x-axis field ‘CPI’ and the y-axis field ‘HDI’ must be of numeric type. The categorical field ‘Region’ must be of Factor type.\n\nstr(ec)\n\n'data.frame':   173 obs. of  6 variables:\n $ X       : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Country : chr  \"Afghanistan\" \"Albania\" \"Algeria\" \"Angola\" ...\n $ HDI.Rank: int  172 70 96 148 45 86 2 19 91 53 ...\n $ HDI     : num  0.398 0.739 0.698 0.486 0.797 0.716 0.929 0.885 0.7 0.771 ...\n $ CPI     : num  1.5 3.1 2.9 2 3 2.6 8.8 7.8 2.4 7.3 ...\n $ Region  : chr  \"Asia Pacific\" \"East EU Cemt Asia\" \"MENA\" \"SSA\" ...\n\n\nWe need to first modify the region column. The current levels in the ‘Region’ field are:\n\nlevels(ec$Region)\n\nNULL\n\n\nBut, the categories on the plot are different and need to be changed as follows:\nFrom                  To\nEU W. Europe          OECD\nAmericas              Americas\nAsia Pacific          Asia & Oceania\nEast EU Cemt Asia     Central & Eastern Europe\nMENA                  Middle East & North Africa\nSSA                   Sub-Saharan Africa\nSince the ‘To’ strings are a bit too long to be in one line on the legend, use \\n to break a line into two lines.\n\n\n\n\n\n\nTip\n\n\n\n\\n is the newline character in R.\n\n\nFrom                  To\nEU W. Europe          OECD\nAmericas              Americas\nAsia Pacific          Asia &\\nOceania\nEast EU Cemt Asia     Central &\\nEastern Europe\nMENA                  Middle East &\\nNorth Africa\nSSA                   Sub-Saharan\\nAfrica\nThe strings can be renamed using string replacement or substitution. But a easier way to do it is to use factor(). The arguments levels and labels in function factor() can be used to rename factors.\n\nec$Region &lt;- factor(ec$Region,levels = c(\"EU W. Europe\",\n                                \"Americas\",\n                                \"Asia Pacific\",\n                                \"East EU Cemt Asia\",\n                                \"MENA\",\n                                \"SSA\"),\n                     labels = c(\"OECD\",\n                                \"Americas\",\n                                \"Asia &\\nOceania\",\n                                \"Central &\\nEastern Europe\",\n                                \"Middle East &\\nNorth Africa\",\n                                \"Sub-Saharan\\nAfrica\"))\n\nOur new Regions should look like:\n\nlevels(ec$Region)\n\n[1] \"OECD\"                        \"Americas\"                   \n[3] \"Asia &\\nOceania\"             \"Central &\\nEastern Europe\"  \n[5] \"Middle East &\\nNorth Africa\" \"Sub-Saharan\\nAfrica\"        \n\n\n\n\n2.2 Points\nStart building up the basic plot.\n\n\n\n\n\n\nTip\n\n\n\nProvide data.frame ‘ec’ as the data and map field ‘CPI’ to the x-axis and ‘HDI’ to the y-axis. Use geom_point() to draw point geometry. To select shapes, see here. Circular shape can be drawn using 1, 16, 19, 20 and 21. Using shape ‘21’ allows us to control stroke color, fill color and stroke thickness for the points. Check out ?geom_point and look under ‘Aesthetics’ for the various possible aesthetic options. Set shape to 21, size to 3, stroke to 0.8 and fill to white.\n\n\n\nggplot(ec,aes(x=CPI,y=HDI,color=Region))+\n    geom_point(shape=21,size=3,stroke=0.8,fill=\"white\")\n\n\n\n\n\n\n\n\nNotice how ‘’ has created newlines in the Legend.\n\n\n2.3 Trendline\nNow, we add the trend line using geom_smooth. Check out ?geom_smooth and look under ‘Arguments’ for argument options and ‘Aesthetics’ for the aesthetic options.\n\nUse method ‘lm’ and use a custom formula of y~poly(x,2) to approximate the curve seen on the plot. Turn off confidence interval shading. Set line thickness to 0.6 and line color to red.\n\n\nggplot(ec,aes(x=CPI,y=HDI,color=Region))+\n  geom_point(shape=21,size=3,stroke=0.8,fill=\"white\")+\n  geom_smooth(method=\"lm\",formula=y~poly(x,2),se=F,size=0.6,color=\"red\")\n\n\n\n\n\n\n\n\nNotice that the line in drawn over the points due to the plotting order. We want the points to be over the line. So reorder the geoms. Since we provided no aesthetic mappings to geom_smooth, there is no legend entry for the trendline. We can fake a legend entry by providing an aesthetic, for example; aes(fill=\"red\"). We do not use the color aesthetic because it is already in use and would give us reduced control later on to modify this legend entry.\n\np &lt;- ggplot(ec,aes(x=CPI,y=HDI,color=Region))+\n      geom_smooth(aes(fill=\"red\"),method=\"lm\",formula=y~poly(x,2),se=F,color=\"red\",size=0.6)+\n      geom_point(shape=21,size=3,stroke=0.8,fill=\"white\")\np\n\n\n\n\n\n\n\n\n\n\n2.4 Text Labels\nNow we add the text labels. Only a subset of countries are plotted. The list of countries to label is shown below.\n\"Congo\",\"Afghanistan\",\"Sudan\",\"Myanmar\",\"Iraq\",\"Venezuela\",\"Russia\",\"Argentina\",\"Brazil\",\"Italy\",\"South Africa\",\"Cape Verde\",\"Bhutan\",\"Botswana\",\"Britian\",\"New Zealand\",\"Greece\",\"China\",\"India\",\"Rwanda\",\"Spain\",\"France\",\"United States\",\"Japan\",\"Norway\",\"Singapore\",\"Barbados\",\"Germany\"\n\nUse geom_text to subset the original data.frame to the reduced set above and plot the labels as text. See ?geom_text.\n\n\nlabels &lt;- c(\"Congo\",\"Afghanistan\",\"Sudan\",\"Myanmar\",\"Iraq\",\"Venezuela\",\"Russia\",\"Argentina\",\"Brazil\",\"Italy\",\"South Africa\",\"Cape Verde\",\"Bhutan\",\"Botswana\",\"Britian\",\"New Zealand\",\"Greece\",\"China\",\"India\",\"Rwanda\",\"Spain\",\"France\",\"United States\",\"Japan\",\"Norway\",\"Singapore\",\"Barbados\",\"Germany\")\n\np+geom_text(data=subset(ec,Country %in% labels),aes(label=Country),color=\"black\")\n\n\n\n\n\n\n\n\n\n\n2.5 Custom Font\nCustom font can be used for the labels by providing the font name to argument family like so geom_text(family=\"fontname\"). If you do not want to bother with fonts, just avoid the family argument in geom_text and skip this part.\nUsing custom fonts can be tricky business. To use a font name, it must be installed on your system and it should be imported into the R environment. This can be done using the extrafont package. Try importing one of the fonts available on your system. Not all fonts work. extrafont prefers .ttf fonts. If a font doesn’t work, try another.\n\nlibrary(extrafont)\nfont_import(pattern=\"Gidole\",prompt=FALSE)\n# load fonts for pdf\nloadfonts()\n# list available fonts in R\nfonts()\n\nThe actual font used on the Economist graph is something close to ITC Officina Sans. Since this is not a free font, I am using a free font called Gidole.\n\np+geom_text(data=subset(ec,Country %in% labels),aes(label=Country),\n            color=\"black\",family=\"Gidole\")\n\n\n\n\n\n\n\n\n\n\n2.6 Label Overlap\nTo avoid overlapping of labels, we can use a ggplot2 extension package ggrepel. We can use function geom_text_repel() from the ggrepel package. geom_text_repel() has the same arguments/aesthetics as geom_text and a few more. Skip the family=Gidole part if you do not want to change the font.\n\nlibrary(ggrepel)\np &lt;- p+geom_text_repel(data=subset(ec,Country %in% labels),aes(label=Country),\n                       color=\"black\",box.padding=unit(1,'lines'),segment.size=0.25,\n                       size=3,family=\"Gidole\")\np\n\n\n\n\n\n\n\n\n\n\n2.7 Axes\nNext step is to adjust the axes breaks, axes labels, point colors and relabeling the trendline legend text.\n\nChange axes labels to ‘Corruption Perceptions Index, 2011 (10=least corrupt)’ on the x-axis and ‘Human Development Index, 2011 (1=best)’ on the y-axis. Set breaks on the x-axis from 1 to 10 by 1 increment and y-axis from 0.2 to 1.0 by 0.1 increments.\n\n\np &lt;- p+scale_x_continuous(name=\"Corruption Perceptions Index, 2011 (10=least corrupt)\",\n                          breaks=1:10,limits=c(1,10))+\n      scale_y_continuous(name=\"Human Development Index, 2011 (1=best)\",\n                         breaks=seq(from=0,to=1,by=0.1),limits=c(0.2,1))\np\n\n\n\n\n\n\n\n\n\n\n2.8 Scale Colors\nNow we want to change the color palette for the points and modify the legend text for the trendline.\n\nUse scale_color_manual() to provide custom colors. These are the colors to use for the points: \"#23576E\",\"#099FDB\",\"#29B00E\", \"#208F84\",\"#F55840\",\"#924F3E\".\nUse scale_fill_manual to change the trendline label since it’s a fill scale. The legend entry for the trendline should read ‘R^2=52%’.\n\n\np &lt;- p+scale_color_manual(values=c(\"#23576E\",\"#099FDB\",\"#29B00E\", \"#208F84\",\"#F55840\",\"#924F3E\"))+\n       scale_fill_manual(name=\"trend\",values=\"red\",labels=expression(paste(R^2,\"=52%\")))\np\n\n\n\n\n\n\n\n\n\n\n2.9 Title\nTitle and caption can be added with labs.\n\nSet the title to ‘Corruption and human development’.\nSet the caption to ‘Sources: Transparency International; UN Human Development Report’.\n\n\np &lt;- p+labs(title=\"Corruption and human development\",\n            caption=\"Sources: Transparency International; UN Human Development Report\")\np\n\n\n\n\n\n\n\n\n\n\n2.10 Theme\nWe want to move the legend to the top and as a single row. This can be done using theme() option legend.position. See ?theme. guides() is used to set the number of rows to 1. We also set a custom font for all text elements using base_family=\"Gidole\". This can be skipped if a font change is not required.\n\np &lt;- p+guides(color=guide_legend(nrow=1))+\n       theme_bw(base_family=\"Gidole\")+\n       theme(legend.position=\"top\")\np\n\n\n\n\n\n\n\n\nNow we do some careful refining with themes.\n\nTurn off minor gridlines\nTurn off major gridlines on x-axis\nRemove the gray background\nRemove panel border\nRemove legend titles\nMake axes titles italic\nTurn off y-axis ticks\nChange x-axis ticks to color grey60\nMake plot title bold\nDecrease size of caption to size 8\n\n\np+theme(panel.grid.minor=element_blank(),\n          panel.grid.major.x=element_blank(),\n          panel.background=element_blank(),\n          panel.border=element_blank(),\n          legend.title=element_blank(),\n          axis.title=element_text(face=\"italic\"),\n          axis.ticks.y=element_blank(),\n          axis.ticks.x=element_line(color=\"grey60\"),\n          plot.title=element_text(face=\"bold\"),\n          plot.caption=element_text(hjust=0,size=8))\n\n\n\n\n\n\n\n\nAnd now our plot is ready and we can compare with the original. Close? Close enough?\n\nThe full script for this challenge is summarized here:\n\n# read data\nec &lt;- read.csv(\"assets/data_economist.csv\",header=T)\n# refactor\nec$Region &lt;- factor(ec$Region,\n                    levels = c(\"EU W. Europe\",\"Americas\",\"Asia Pacific\",\n                                \"East EU Cemt Asia\",\"MENA\",\"SSA\"),\n                     labels = c(\"OECD\",\"Americas\",\"Asia &\\nOceania\",\n                                \"Central &\\nEastern Europe\",\n                                \"Middle East &\\nNorth Africa\",\n                                \"Sub-Saharan\\nAfrica\"))\n\n# labels\nlabels &lt;- c(\"Congo\",\"Afghanistan\",\"Sudan\",\"Myanmar\",\"Iraq\",\"Venezuela\",\"Russia\",\"Argentina\",\"Brazil\",\"Italy\",\"South Africa\",\"Cape Verde\",\"Bhutan\",\"Botswana\",\"Britian\",\"New Zealand\",\"Greece\",\"China\",\"India\",\"Rwanda\",\"Spain\",\"France\",\"United States\",\"Japan\",\"Norway\",\"Singapore\",\"Barbados\",\"Germany\")\n\n# plotting\np1 &lt;- ggplot(ec,aes(x=CPI,y=HDI,color=Region))+\n      geom_smooth(aes(fill=\"red\"),method=\"lm\",formula=y~poly(x,2),se=F,color=\"red\",size=0.6)+\n      geom_point(shape=21,size=3,stroke=0.8,fill=\"white\")+\n      geom_text_repel(data=subset(ec,Country %in% labels),aes(label=Country),\n                       color=\"black\",box.padding=unit(1,'lines'),segment.size=0.25,\n                       size=3,family=\"Gidole\")+\n      scale_x_continuous(name=\"Corruption Perceptions Index, 2011 (10=least corrupt)\",\n                          breaks=1:10,limits=c(1,10))+\n      scale_y_continuous(name=\"Human Development Index, 2011 (1=best)\",\n                         breaks=seq(from=0,to=1,by=0.1),limits=c(0.2,1))+\n      scale_color_manual(values=c(\"#23576E\",\"#099FDB\",\"#29B00E\", \"#208F84\",\"#F55840\",\"#924F3E\"))+\n           scale_fill_manual(name=\"trend\",values=\"red\",labels=expression(paste(R^2,\"=52%\")))+\n      labs(title=\"Corruption and human development\",\n           caption=\"Sources: Transparency International; UN Human Development Report\")+\n      guides(color=guide_legend(nrow=1))+\n      theme_bw(base_family=\"Gidole\")+\n      theme(legend.position=\"top\",\n            panel.grid.minor=element_blank(),\n            panel.grid.major.x=element_blank(),\n            panel.background=element_blank(),\n            panel.border=element_blank(),\n            legend.title=element_blank(),\n            axis.title=element_text(face=\"italic\"),\n            axis.ticks.y=element_blank(),\n            axis.ticks.x=element_line(color=\"grey60\"),\n            plot.title=element_text(face=\"bold\"),\n            plot.caption=element_text(hjust=0,size=8))\np1"
  },
  {
    "objectID": "labs/ggplot/index.html#wsj-heatmap",
    "href": "labs/ggplot/index.html#wsj-heatmap",
    "title": "Plotting with ggplot2",
    "section": "3 WSJ Heatmap",
    "text": "3 WSJ Heatmap\nThe aim of this challenge is to recreate the plot below originally published in The Wall Street Journal. The plot is a heatmap showing the normalized number of cases of measles across 51 US states from 1928 to 2003. X-axis shows years and y-axis shows the names of states. The color of the tiles denote the number of measles cases per 100,000 people. Introduction of the measles vaccine is shown as the black line in 1963.\n\n\n3.1 Data\nDownload the data csv file.\n data_wsj.csv\nStart by reading in the data. This .csv file has two lines of comments so we need to skip 2 lines while reading in the data. We also add stringsAsFactors=F to avoid the automatic conversion of character fields to factor type.\n\nme &lt;- read.csv(\"assets/data_wsj.csv\",header=T,stringsAsFactors=F,skip=2)\nhead(me)\n\n\n  \n\n\n\nCheck the data type for the fields.\n\nstr(me)\n\n'data.frame':   3952 obs. of  53 variables:\n $ YEAR                : int  1928 1928 1928 1928 1928 1928 1928 1928 1928 1928 ...\n $ WEEK                : int  1 2 3 4 5 6 7 8 9 10 ...\n $ ALABAMA             : chr  \"3.67\" \"6.25\" \"7.95\" \"12.58\" ...\n $ ALASKA              : chr  \"-\" \"-\" \"-\" \"-\" ...\n $ ARIZONA             : chr  \"1.90\" \"6.40\" \"4.50\" \"1.90\" ...\n $ ARKANSAS            : chr  \"4.11\" \"9.91\" \"11.15\" \"13.75\" ...\n $ CALIFORNIA          : chr  \"1.38\" \"1.80\" \"1.31\" \"1.87\" ...\n $ COLORADO            : chr  \"8.38\" \"6.02\" \"2.86\" \"13.71\" ...\n $ CONNECTICUT         : chr  \"4.50\" \"9.00\" \"8.81\" \"10.40\" ...\n $ DELAWARE            : chr  \"8.58\" \"7.30\" \"15.88\" \"4.29\" ...\n $ DISTRICT.OF.COLUMBIA: chr  \"-\" \"-\" \"-\" \"4.18\" ...\n $ FLORIDA             : chr  \"0.21\" \"0.49\" \"0.42\" \"0.91\" ...\n $ GEORGIA             : chr  \"1.17\" \"5.96\" \"-\" \"8.65\" ...\n $ HAWAII              : chr  \"-\" \"-\" \"-\" \"-\" ...\n $ IDAHO               : chr  \"-\" \"0.45\" \"0.45\" \"-\" ...\n $ ILLINOIS            : chr  \"0.50\" \"0.77\" \"0.61\" \"0.81\" ...\n $ INDIANA             : chr  \"1.34\" \"2.71\" \"1.71\" \"4.11\" ...\n $ IOWA                : chr  \"0.16\" \"-\" \"-\" \"3.51\" ...\n $ KANSAS              : chr  \"0.81\" \"1.35\" \"1.41\" \"1.14\" ...\n $ KENTUCKY            : chr  \"3.08\" \"1.99\" \"5.26\" \"5.49\" ...\n $ LOUISIANA           : chr  \"1.89\" \"3.00\" \"2.33\" \"4.02\" ...\n $ MAINE               : chr  \"4.52\" \"7.40\" \"6.78\" \"9.41\" ...\n $ MARYLAND            : chr  \"10.87\" \"15.47\" \"21.43\" \"22.67\" ...\n $ MASSACHUSETTS       : chr  \"25.66\" \"28.50\" \"34.76\" \"31.28\" ...\n $ MICHIGAN            : chr  \"5.68\" \"7.59\" \"9.39\" \"8.66\" ...\n $ MINNESOTA           : chr  \"0.31\" \"0.23\" \"0.15\" \"0.12\" ...\n $ MISSISSIPPI         : chr  \"-\" \"-\" \"-\" \"-\" ...\n $ MISSOURI            : chr  \"1.19\" \"0.83\" \"1.69\" \"1.58\" ...\n $ MONTANA             : chr  \"0.18\" \"0.18\" \"0.74\" \"-\" ...\n $ NEBRASKA            : chr  \"1.60\" \"0.29\" \"0.36\" \"0.44\" ...\n $ NEVADA              : chr  \"-\" \"-\" \"-\" \"-\" ...\n $ NEW.HAMPSHIRE       : chr  \"-\" \"-\" \"-\" \"14.53\" ...\n $ NEW.JERSEY          : chr  \"3.55\" \"4.74\" \"6.68\" \"6.78\" ...\n $ NEW.MEXICO          : chr  \"14.90\" \"11.06\" \"14.90\" \"27.64\" ...\n $ NEW.YORK            : chr  \"7.60\" \"9.65\" \"8.54\" \"9.32\" ...\n $ NORTH.CAROLINA      : chr  \"47.86\" \"119.70\" \"110.90\" \"131.60\" ...\n $ NORTH.DAKOTA        : chr  \"-\" \"0.15\" \"1.20\" \"3.91\" ...\n $ OHIO                : chr  \"2.51\" \"-\" \"4.86\" \"4.40\" ...\n $ OKLAHOMA            : chr  \"4.86\" \"2.56\" \"6.27\" \"4.74\" ...\n $ OREGON              : chr  \"4.91\" \"4.91\" \"3.63\" \"2.24\" ...\n $ PENNSYLVANIA        : chr  \"6.97\" \"8.74\" \"8.12\" \"8.39\" ...\n $ RHODE.ISLAND        : chr  \"1.18\" \"0.74\" \"2.65\" \"0.15\" ...\n $ SOUTH.CAROLINA      : chr  \"42.04\" \"83.90\" \"77.46\" \"64.75\" ...\n $ SOUTH.DAKOTA        : chr  \"5.69\" \"6.57\" \"2.04\" \"2.19\" ...\n $ TENNESSEE           : chr  \"22.03\" \"16.96\" \"24.66\" \"18.86\" ...\n $ TEXAS               : chr  \"1.18\" \"0.63\" \"0.62\" \"0.37\" ...\n $ UTAH                : chr  \"0.40\" \"-\" \"0.20\" \"0.20\" ...\n $ VERMONT             : chr  \"0.28\" \"0.56\" \"1.12\" \"6.70\" ...\n $ VIRGINIA            : chr  \"-\" \"-\" \"-\" \"-\" ...\n $ WASHINGTON          : chr  \"14.83\" \"17.34\" \"15.67\" \"12.77\" ...\n $ WEST.VIRGINIA       : chr  \"3.36\" \"4.19\" \"4.19\" \"4.66\" ...\n $ WISCONSIN           : chr  \"1.54\" \"0.96\" \"4.79\" \"1.64\" ...\n $ WYOMING             : chr  \"0.91\" \"-\" \"1.36\" \"3.64\" ...\n\n\nLooking at this dataset, there is going to be quite a bit of data clean-up and tidying before we can plot it. Here are the steps we need to take:\n\nThe data needs to be transformed to long format.\nReplace all “-” with NAs\nThe number of cases across each state is a character and needs to be converted to numeric\nCollapse (sum) week-level data to year.\nAbbreviate state names\n\n\n\n3.2 Tidy Data\nConvert the wide format to long format using the function gather() from package dplyr.\n\nme1 &lt;- me %&gt;% gather(key=state,value=value,-YEAR,-WEEK)\nhead(me1)\n\n\n  \n\n\n\nNow, replace all ‘-’ with NA in the field value. We use the function str_replace() from R package stringr. Then convert the value field to numeric.\n\nme2 &lt;- me1 %&gt;% mutate(value=str_replace(value,\"^-$\",NA_character_),\n                      value=as.numeric(value))\nhead(me2)\n\n\n  \n\n\n\nSum up the week-level information to year-level information. This means rather than having\n  YEAR WEEK   state value\n1 1928    1 ALABAMA  3.67\n2 1928    2 ALABAMA  6.25\n3 1928    3 ALABAMA  7.95\n...\n5501 1957   41 ALASKA  2.16\n5502 1957   42 ALASKA  0.43\n5503 1957   43 ALASKA  1.30\n...\nwe should have one value per year per state.\n  YEAR    state value\n1 1928  ALABAMA  3.67\n2 1929  ALABAMA  3.20\n...\n5501 1957  ALASKA  2.16\n5502 1958  ALASKA  2.05\n...\nThe solution is to sum up all the cases for a state for all weeks within a year into one value for that year. This can be done using the summarise() function from package dplyr.\n\nA custom function is used to sum over weeks. If all values are NA, then result is NA. If some values are NA, the NAs are removed and the remaining numbers are summed.\nThe dots in state names are replaced by spaces and the words are converted to title case (First letter capital and rest lowercase).\nWe also convert the column names to lowercase for consistency.\n\n\nfun1 &lt;- function(x) ifelse(all(is.na(x)),NA,sum(x,na.rm=TRUE))\n\nme3 &lt;- me2 %&gt;% group_by(YEAR,state) %&gt;% \n                summarise(total=fun1(value)) %&gt;%\n                mutate(state=str_replace_all(state,\"[.]\",\" \"),\n                       state=str_to_title(state))\ncolnames(me3) &lt;- tolower(colnames(me3))\nhead(me3)\n\n\n  \n\n\n\n\nstr(me3)\n\ngropd_df [3,876 × 3] (S3: grouped_df/tbl_df/tbl/data.frame)\n $ year : int [1:3876] 1928 1928 1928 1928 1928 1928 1928 1928 1928 1928 ...\n $ state: chr [1:3876] \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n $ total: num [1:3876] 335 NA 200.8 481.8 69.2 ...\n - attr(*, \"groups\")= tibble [76 × 2] (S3: tbl_df/tbl/data.frame)\n  ..$ year : int [1:76] 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 ...\n  ..$ .rows: list&lt;int&gt; [1:76] \n  .. ..$ : int [1:51] 1 2 3 4 5 6 7 8 9 10 ...\n  .. ..$ : int [1:51] 52 53 54 55 56 57 58 59 60 61 ...\n  .. ..$ : int [1:51] 103 104 105 106 107 108 109 110 111 112 ...\n  .. ..$ : int [1:51] 154 155 156 157 158 159 160 161 162 163 ...\n  .. ..$ : int [1:51] 205 206 207 208 209 210 211 212 213 214 ...\n  .. ..$ : int [1:51] 256 257 258 259 260 261 262 263 264 265 ...\n  .. ..$ : int [1:51] 307 308 309 310 311 312 313 314 315 316 ...\n  .. ..$ : int [1:51] 358 359 360 361 362 363 364 365 366 367 ...\n  .. ..$ : int [1:51] 409 410 411 412 413 414 415 416 417 418 ...\n  .. ..$ : int [1:51] 460 461 462 463 464 465 466 467 468 469 ...\n  .. ..$ : int [1:51] 511 512 513 514 515 516 517 518 519 520 ...\n  .. ..$ : int [1:51] 562 563 564 565 566 567 568 569 570 571 ...\n  .. ..$ : int [1:51] 613 614 615 616 617 618 619 620 621 622 ...\n  .. ..$ : int [1:51] 664 665 666 667 668 669 670 671 672 673 ...\n  .. ..$ : int [1:51] 715 716 717 718 719 720 721 722 723 724 ...\n  .. ..$ : int [1:51] 766 767 768 769 770 771 772 773 774 775 ...\n  .. ..$ : int [1:51] 817 818 819 820 821 822 823 824 825 826 ...\n  .. ..$ : int [1:51] 868 869 870 871 872 873 874 875 876 877 ...\n  .. ..$ : int [1:51] 919 920 921 922 923 924 925 926 927 928 ...\n  .. ..$ : int [1:51] 970 971 972 973 974 975 976 977 978 979 ...\n  .. ..$ : int [1:51] 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 ...\n  .. ..$ : int [1:51] 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 ...\n  .. ..$ : int [1:51] 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 ...\n  .. ..$ : int [1:51] 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 ...\n  .. ..$ : int [1:51] 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 ...\n  .. ..$ : int [1:51] 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 ...\n  .. ..$ : int [1:51] 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 ...\n  .. ..$ : int [1:51] 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 ...\n  .. ..$ : int [1:51] 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 ...\n  .. ..$ : int [1:51] 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 ...\n  .. ..$ : int [1:51] 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 ...\n  .. ..$ : int [1:51] 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 ...\n  .. ..$ : int [1:51] 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 ...\n  .. ..$ : int [1:51] 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 ...\n  .. ..$ : int [1:51] 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 ...\n  .. ..$ : int [1:51] 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 ...\n  .. ..$ : int [1:51] 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 ...\n  .. ..$ : int [1:51] 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 ...\n  .. ..$ : int [1:51] 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 ...\n  .. ..$ : int [1:51] 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 ...\n  .. ..$ : int [1:51] 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 ...\n  .. ..$ : int [1:51] 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 ...\n  .. ..$ : int [1:51] 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 ...\n  .. ..$ : int [1:51] 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 ...\n  .. ..$ : int [1:51] 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 ...\n  .. ..$ : int [1:51] 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 ...\n  .. ..$ : int [1:51] 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 ...\n  .. ..$ : int [1:51] 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 ...\n  .. ..$ : int [1:51] 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 ...\n  .. ..$ : int [1:51] 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 ...\n  .. ..$ : int [1:51] 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 ...\n  .. ..$ : int [1:51] 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 ...\n  .. ..$ : int [1:51] 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 ...\n  .. ..$ : int [1:51] 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 ...\n  .. ..$ : int [1:51] 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 ...\n  .. ..$ : int [1:51] 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 ...\n  .. ..$ : int [1:51] 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 ...\n  .. ..$ : int [1:51] 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 ...\n  .. ..$ : int [1:51] 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 ...\n  .. ..$ : int [1:51] 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 ...\n  .. ..$ : int [1:51] 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 ...\n  .. ..$ : int [1:51] 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 ...\n  .. ..$ : int [1:51] 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 ...\n  .. ..$ : int [1:51] 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 ...\n  .. ..$ : int [1:51] 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 ...\n  .. ..$ : int [1:51] 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 ...\n  .. ..$ : int [1:51] 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 ...\n  .. ..$ : int [1:51] 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 ...\n  .. ..$ : int [1:51] 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 ...\n  .. ..$ : int [1:51] 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 ...\n  .. ..$ : int [1:51] 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 ...\n  .. ..$ : int [1:51] 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 ...\n  .. ..$ : int [1:51] 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 ...\n  .. ..$ : int [1:51] 3724 3725 3726 3727 3728 3729 3730 3731 3732 3733 ...\n  .. ..$ : int [1:51] 3775 3776 3777 3778 3779 3780 3781 3782 3783 3784 ...\n  .. ..$ : int [1:51] 3826 3827 3828 3829 3830 3831 3832 3833 3834 3835 ...\n  .. ..@ ptype: int(0) \n  ..- attr(*, \".drop\")= logi TRUE\n\n\nThe data is now ready for plotting.\n\n\n3.3 Tile\nWe can build up a basic ggplot and heatmap tiles can be plotted using the geom geom_tile. ‘year’ is mapped to the x-axis, ‘state’ to the y-axis and fill color for the tiles is the ‘total’ value.\n\nggplot(me3,aes(x=year,y=state,fill=total))+\n       geom_tile()\n\n\n\n\n\n\n\n\nAdd borders around the tiles. We use reorder(state,desc(state)) to reverse the order of states so that it reads A-Z from top to bottom.\n\np &lt;- ggplot(me3,aes(x=year,y=reorder(state,desc(state)),fill=total))+\n      geom_tile(color=\"white\",size=0.25)\np\n\n\n\n\n\n\n\n\n\n\n3.4 Scales\nThe extra space on left and right (gray) of the plot is removed using argument expand in scales. X-axis breaks are redefined at 10 year intervals from 1930 to 2010. Custom colors are used for the tiles: \"#e7f0fa\",\"#c9e2f6\",\"#95cbee\",\"#0099dc\",\"#4ab04a\", \"#ffd73e\",\"#eec73a\",\"#e29421\",\"#f05336\",\"#ce472e\". Since the color scale is a fill color on a continuous value and we want to supply n new colors, we use scale_fill_gradientn. Tiles with missing value is set to the color \"grey90\".\n\ncols &lt;- c(\"#e7f0fa\",\"#c9e2f6\",\"#95cbee\",\"#0099dc\",\"#4ab04a\", \"#ffd73e\",\"#eec73a\",\"#e29421\",\"#f05336\",\"#ce472e\")\n\np + scale_y_discrete(expand=c(0,0))+\n    scale_x_continuous(expand=c(0,0),breaks=seq(1930,2010,by=10))+\n    scale_fill_gradientn(colors=cols,na.value=\"grey95\")\n\n\n\n\n\n\n\n\nThe fill scale can be further refined to resemble that of the original plot.\n\ncols &lt;- c(\"#e7f0fa\",\"#c9e2f6\",\"#95cbee\",\"#0099dc\",\"#4ab04a\", \"#ffd73e\",\"#eec73a\",\"#e29421\",\"#f05336\",\"#ce472e\")\n\np &lt;- p+ scale_y_discrete(expand=c(0,0))+\n        scale_x_continuous(expand=c(0,0),breaks=seq(1930,2010,by=10))+\n        scale_fill_gradientn(colors=cols,na.value=\"grey95\",\n                             limits=c(0,4000),\n                             values=c(0,0.01,0.02,0.03,0.09,0.1,0.15,0.25,0.4,0.5,1),\n                             labels=c(\"0k\",\"1k\",\"2k\",\"3k\",\"4k\"),\n                             guide=guide_colourbar(ticks=T,nbin=50,\n                                                 barheight=.5,label=T, \n                                                 barwidth=10))\np\n\n\n\n\n\n\n\n\n\n\n3.5 Title\nWe can remove the x and y axes titles and add a plot title.\n\np &lt;- p+labs(x=\"\",y=\"\",fill=\"\",title=\"Measles\")\np\n\n\n\n\n\n\n\n\n\n\n3.6 Fixed Coords\nWe can use coord_fixed() to fix the coordinates for equal values in x and y direction. This should render perfectly square tiles.\n\np &lt;- p+coord_fixed()\np\n\n\n\n\n\n\n\n\n\n\n3.7 Annotation\nAdd the annotation line and text to denote the introduction of the vaccine. The line is at the position 1963. Custom font ‘Gidole’ is used here. This can be skipped.\n\np &lt;- p+geom_segment(x=1963,xend=1963,y=0,yend=51.5,size=.6,alpha=0.7) +\n        annotate(\"text\",label=\"Vaccine introduced\",x=1963,y=53, \n                   vjust=1,hjust=0,size=I(3),family=\"Gidole\")\np\n\n\n\n\n\n\n\n\n\n\n3.8 Theme\nHere we change the following aspects of the plot using theme:\n\nChange theme to theme_minimal to remove unnecessary plot elements.\nOptional custom font. See ‘Custom font’ section under ‘Economist Scatterplot’.\nPosition the legend to bottom center.\nSet legend font to color grey20.\nAdjust size and justification of x and y axes text\nAdjust title justification\nRemove all gridlines\n\n\np+theme_minimal(base_family=\"Gidole\")+\n  theme(legend.position=\"bottom\",\n        legend.justification=\"center\",\n        legend.direction=\"horizontal\",\n        legend.text=element_text(color=\"grey20\"),\n        axis.text.y=element_text(size=6,hjust=1,vjust=0.5),\n        axis.text.x=element_text(size=8),\n        axis.ticks.y=element_blank(),\n        title=element_text(hjust=-.07,vjust=1),\n        panel.grid=element_blank())\n\n\n\n\n\n\n\n\nOur plot is ready and we can compare it to the original version.\n\nThe full code for this challenge is here:\n\n# custom summing function\nfun1 &lt;- function(x) ifelse(all(is.na(x)),NA,sum(x,na.rm=TRUE))\n\n# read data\nme3 &lt;- read.csv(\"assets/data_wsj.csv\",header=T,\n               stringsAsFactors=F,skip=2) %&gt;%\n        gather(key=state,value=value,-YEAR,-WEEK) %&gt;%\n        mutate(value=str_replace(value,\"^-$\",NA_character_),\n                            value=as.numeric(value)) %&gt;%\n        group_by(YEAR,state) %&gt;% \n                      summarise(total=fun1(value)) %&gt;%\n                      mutate(state=str_replace_all(state,\"[.]\",\" \"),\n                             state=str_to_title(state))\n\ncolnames(me3) &lt;- tolower(colnames(me3))\n\n# custom colors\ncols &lt;- c(\"#e7f0fa\",\"#c9e2f6\",\"#95cbee\",\"#0099dc\",\"#4ab04a\", \"#ffd73e\",\"#eec73a\",\"#e29421\",\"#f05336\",\"#ce472e\")\n\n# plotting\np &lt;- ggplot(me3,aes(x=year,y=reorder(state,desc(state)),fill=total))+\n      geom_tile(color=\"white\",size=0.25)+\n      scale_y_discrete(expand=c(0,0))+\n      scale_x_continuous(expand=c(0,0),breaks=seq(1930,2010,by=10))+\n      scale_fill_gradientn(colors=cols,na.value=\"grey95\",\n                           limits=c(0,4000),\n                           values=c(0,0.01,0.02,0.03,0.09,0.1,0.15,0.25,0.4,0.5,1),\n                           labels=c(\"0k\",\"1k\",\"2k\",\"3k\",\"4k\"),\n                           guide=guide_colourbar(ticks=T,nbin=50,\n                                               barheight=.5,label=T, \n                                               barwidth=10))+\n      labs(x=\"\",y=\"\",fill=\"\",title=\"Measles\")+\n      coord_fixed()+\n      geom_segment(x=1963,xend=1963,y=0,yend=51.5,size=.9) +\n      annotate(\"text\",label=\"Vaccine introduced\",x=1963,y=53, \n               vjust=1,hjust=0,size=I(3),family=\"Gidole\")+\n      theme_minimal(base_family=\"Gidole\")+\n      theme(legend.position=c(.5,-.13),\n        legend.direction=\"horizontal\",\n        legend.text=element_text(color=\"grey20\"),\n        plot.margin=grid::unit(c(.5,0,1.5,0),\"cm\"),\n        axis.text.y=element_text(size=6,hjust=1,vjust=0.5),\n        axis.text.x=element_text(size=8),\n        axis.ticks.y=element_blank(),\n        panel.grid=element_blank(),\n        title=element_text(hjust=-.07,vjust=1),\n        panel.grid=element_blank())"
  },
  {
    "objectID": "labs/debugging/index.html",
    "href": "labs/debugging/index.html",
    "title": "Debugging, Profiling and Optimizing Code",
    "section": "",
    "text": "Note\n\n\n\nThe objective of this lab is to improve your coding skills by focusing on code debugging, benchmarking and optimization. Below, you will find a number of tasks connected to the topics covered in the Debugging, profiling and optimization lecture. Some tasks extend lectures content and require you to find some more information online. Please, note that while we are providing example solutions to many tasks, these are only examples. If you solve a task in a different way it does not matter your solution is wrong. In fact, it may be better than our solution. If in doubt, ask TA for help. We are here for you!"
  },
  {
    "objectID": "labs/debugging/index.html#debugging",
    "href": "labs/debugging/index.html#debugging",
    "title": "Debugging, Profiling and Optimizing Code",
    "section": "1 Debugging",
    "text": "1 Debugging\n\n1.1 Task: Code Correctness\nWhich of the following chunks of code are correct and which contain errors? Identify these errors.\n\n1.1.1 Chunk 1\n\ninput &lt;- sample(1:1000, size = 1000, replace = T)\ncurrmin &lt;- NULL\nfor (i in input) {\n  if (input &gt; currmin) {\n    currmin &lt;- input\n    print(paste0(\"The new minimum is: \", currmin))\n  }\n}\n\n\n\n1.1.2 Chunk 2\n\ninput &lt;- sample(1:1000, size = 1000, replac = T)\ncurrmin &lt;- NULL\nfor (i in input) {\n  if (input &lt; currmin) {\n    currmin &lt;- input\n    print(paste0(\"The new minimum is: \", currmin))\n  }\n}\n\n\n\n1.1.3 Chunk 3\n\nfor (cnt in 1:100) {\n  if (cnt &gt; 12) {\n    print(\"12+\")\n  } else {\n    print(\"Not 12+\")\n  }\n}\n\n\n\n1.1.4 Chunk 4\n\nresult &lt;- logical(10)\ninput &lt;- sample(1:10, size = 10, replace = T)\nfor (i in 0:length(input)) {\n  if (input[i] &gt;= 5) {\n    result[i] &lt;- TRUE\n  }\n}\n\n\n\n\n1.2 Task: Debugger.\nPlay with debugger as described in lecture slides.\n\n\n1.3 Task: Floating-point Arithmetics.\nCan you fix the code below so that it produces more reliable result?\n\n\n\n\n\n\nTip\n\n\n\nThink in terms of system-specific representation \\(\\epsilon\\).\n\n\nPut the value of your double \\(\\epsilon\\) into this spreadsheet (Best Coding Practises Lab sheet).\n\nvec &lt;- seq(0.1, 0.9, by=0.1)\nvec == 0.7\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\n# One way is to use epsilon\n# Check machine's floating point representation\nvec &lt;- seq(0.1, 0.9, by=0.1)\n\n# Make a custom function that uses machines' epsilon for comparing\n# values\nis_equal &lt;- function(x, y) {\n  isEqual &lt;- F\n  if (abs(x - y) &lt; unlist(.Machine)['double.eps']) {\n    isEqual &lt;- T\n  }\n  isEqual\n}\n\n# Some tests\n0.7 == 0.6 + 0.1\nis_equal(0.7, 0.6 + 0.1)\n0.7 == 0.8 - 0.1\nis_equal(0.7, 0.8 - 0.1)\n\n# Now you can use the is_equal to fix the code!"
  },
  {
    "objectID": "labs/debugging/index.html#profiling",
    "href": "labs/debugging/index.html#profiling",
    "title": "Debugging, Profiling and Optimizing Code",
    "section": "2 Profiling",
    "text": "2 Profiling\n\n2.1 Task: Filling A Large Matrix.\nCreate a 10 000 x 10 000 matrix and fill it with random numbers (from 1 to 42), first row by row and later column by column. Use proc.time to see if there is any difference. Is the measurement reliable? Record the values you got in this spreadsheet:\n\nN &lt;- 10e3 * 10e3\n\n# By row\nt1 &lt;- proc.time()\nM &lt;- matrix(sample(1:42, size = N, replace = T), nrow = sqrt(N), byrow = T)\nt2 &lt;- proc.time()\n(t2 - t1)\n\n# By column\nt1 &lt;- proc.time()\nM &lt;- matrix(sample(1:42, size = N, replace = T), nrow = sqrt(N), byrow = F)\nt2 &lt;- proc.time()\n(t2 - t1)\n\n\n\n2.2 Task: Timing Reliability.\nIn the lecture slides, you have seen how to time sampling from Normal Gaussian distribution:\n\nsystem.time(rnorm(n = 10e6))\n\nIs such single measurement reliable? Run the code 100 times, plot and record the mean and the variance of the elapsed time. Put these values (elapsed.time mean and variance) into this spreadsheet (Best Coding Practises Lab sheet).\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\ntiming &lt;- double(100)\nfor (i in 1:100) {\n  st &lt;- system.time(rnorm(n = 10e6))\n  timing[i] &lt;- st[3]\n}\nboxplot(timing) \nmean(timing)\nvar(timing)\n\n\n\n\nOptional An alternative approach or, more exactly, an alternative notation that achieves the same as the previous chunk of code but in a more compact way makes use of the replicate, a wrapper function around sapply that simplifies repeated evaluation of expressions. The drawback is you do not get the vector of the actual timing values but the results of calling system.time are already averaged for you. Try to read about the replicate and use it to re-write the code above. Put the elapsed.time into this spreadsheet (Best Coding Practises Lab sheet). How does this value compare to calling system.time within a loop in the previous chunk of code? Are the values similar?\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nst2 &lt;- system.time(replicate(n = 100, rnorm(n = 10e6)))\n\n\n\n\n\n\n2.3 Task: Microbenchmarking.\nWhile system.time might be sufficient most of the time, there is also a package microbenchmark that enables more accurate time profiling, aiming at microsecond resolution that most of modern operating systems offer. Most of the benchmarking the microbenchmark does is implemented in low-overhead C functions and also the package makes sure to:\n\nestimate granularity and resolution of timing for your particular OS,\nwarm up your processor before measuring, i.e. wake the processor up from any idle state or likewise.\n\nBegin by installing the microbenchmark package.\nNOTE! We have noticed that for, e.g. M1 and M2 architectures on newer MacBooks it does not work well!\n\n2.3.1 Checking System Time.\nCheck the current value of the platform’s timer.\n\nmicrobenchmark::get_nanotime()\n\nModify the code below so that it uses the current value of platform’s timer:\n\ntiming &lt;- double(100)\nfor (i in 1:100) {\n  st &lt;- system.time(rnorm(n = 10e6))\n  timing[i] &lt;- st[3]\n}\nboxplot(timing)\n\nPut the mean and the variance into this spreadsheet (Best Coding Practises Lab sheet, Microbenchmark – loop)\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nlibrary(microbenchmark)\ntiming &lt;- double(100)\nfor (i in 1:100) {\n  nanotime_start &lt;- get_nanotime()\n  rnorm(n = 10e6)\n  nanotime_stop &lt;- get_nanotime()\n  timing[i] &lt;- nanotime_stop - nanotime_start\n}\nmean(timing)\nvar(timing)\nboxplot(timing)\n\n\n\n\n\n\n2.3.2 Microtiming Precision.\nThere is an experimental function in the microbenchmark package that helps the package estimate granularity and resolution of your particular timing subsystem. According to the documentation, the function measures the overhead of timing a C function call rounds times and returns all non-zero timings observed.\n Run the microtiming_precision function and put the mean and the variance of the resulting vector into this spreadsheet (Best Coding Practises Lab sheet, Microbenchmark – precision)\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nprecision &lt;- microbenchmark::microtiming_precision()\nmean(precision)\nvar(precision)\n\n\n\n\nRun the function one time without assigning its value to a variable and consult the documentation. Compare the output of running the function without assigning the value to a variable, the values stored in the variable by the function upon assignment and the value specified in the documentation.\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\n# In version 1.4-4 of the package, all three ways give different results!\nmicrobenchmark::microtiming_precision()\nprecision &lt;- microbenchmark::microtiming_precision()\n?microbenchmark::microtiming_precision\n\n\n\n\n\n\n2.3.3 The Microbenchmark Way.\nFinally, let’s benchmark our rnorm example using microbenchmark:\n\nmicrobenchmark the rnorm(n = 10e6) expression,\nplot the results using both ggplot2 and a boxplot (read the microbenchmark package documentation),\nlook at the summary of the benchmark,\nhow long does it take to dispatch a simple function that does nothing compared to evaluating a constant and adding two integers?\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nrequire(microbenchmark)\nrequire(ggplot2)\nmb &lt;- microbenchmark(rnorm(n = 10e6))\nautoplot(mb)\nboxplot(mb)\nsummary(mb)\nf &lt;- function() {}\nmb2 &lt;- microbenchmark(f(), pi, 2+2)\nsummary(mb2)\nautoplot(mb2)\n\n\n\n\n\n\n\n2.4 Optional Task: More Advanced Profiling.\nNow, we will use a even more sophisticated approach to profiling.\n\n2.4.1 The Rprof way.\n\nWrite three functions that fill by row a \\(N \\times N\\) matrix \\(M\\) with randomly generated numbers from a vector given as argument bag, allow for passing random seed value as function argument with the default value of 42. After filling the matrix with values, add to each and every element of \\(M\\) the number of column the element is in and return such matrix from the function. Functions should:\nfill_alloc) – use memory allocation prior to loop in which the matrix is being filled and allocate memory using init value passed as argument and by default set to NULL,\nfill_noalloc – not use memory allocation prior to the loop,\nfill_noloop should not the loop for filling the matrix in.\n\n\n\n\n\n\n\nWarning\n\n\n\nDo not perform addition of column number in the same loop.\n\n\nFollowing this and using rnorm(1000, mean = 0, sd = 1):\n\nuse Rprof to profile the functions using the same seed and N=100,\nuse Rprof to check whether there is a difference between initializing the matrix using NULL and 0 in fill_alloc,\nwhat happens if \\(N = 10\\) compared to \\(N = 20\\) to \\(N = 100\\)?\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nfill_noloop &lt;- function(N, bag, seed = 42) {\n  set.seed(seed)\n  values &lt;- sample(bag, size = N^2, replace = T)\n  M &lt;- matrix(data = values, nrow = N, byrow = T)\n  for (col_num in 1:N) {\n    M[, col_num] &lt;- M[, col_num] + col_num\n  }\n  return(M)\n}\n\nfill_noalloc &lt;- function(N, bag, seed = 42) {\n  set.seed(seed)\n  values &lt;- sample(bag, size = N^2, replace = T)\n  M &lt;- NULL\n  cnt = 1\n  for (row in 1:N) {\n    row_tmp &lt;- c()\n    for (col in 1:N) {\n      row_tmp &lt;- c(row_tmp, values[cnt])\n      cnt &lt;- cnt + 1\n    }\n    M &lt;- rbind(M, row_tmp)\n  }\n  for (col_num in 1:N) {\n    M[, col_num] &lt;- M[, col_num] + col_num\n  }\n  return(M)\n}\n\nfill_alloc &lt;- function(N, bag, seed = 42, init = NA) {\n  set.seed(seed)\n  values &lt;- sample(bag, size = N^2, replace = T)\n  M &lt;- matrix(rep(init, times=N^2), nrow = N, byrow = T)\n  cnt = 1\n  for (row in 1:N) {\n    for (col in 1:N) {\n      M[row, col] &lt;- values[cnt]\n      cnt &lt;- cnt + 1\n    }\n  }\n  for (col_num in 1:N) {\n    M[, col_num] &lt;- M[, col_num] + col_num\n  }\n  return(M)\n}\n\n# Example of profiling one function: fill_noloop\nRprof(memory.profiling = T)\nfill_noloop(10000, c(9:0), seed = 100)\nRprof(NULL)\nsummary &lt;- summaryRprof('Rprof.out', memory='both')\nsummary$by.self\n\n# answers to the remaining questions are not given here\n\n\n\n\n\n\n\n2.5 Optimization\nHave a look at our answers from the previous task .\n\nHow can you optimize the fill_alloc even further (call the optimized version fill_alloc_opt)?\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nfill_alloc_opt &lt;- function(N, bag, seed = 42, init = NA) {\n  set.seed(seed)\n  values &lt;- sample(bag, size = N^2, replace = T)\n  M &lt;- matrix(rep(init, times=N^2), nrow = N, byrow = T)\n  cnt = 1\n  for (row in 1:N) {\n    for (col in 1:N) {\n      M[row, col] &lt;- values[cnt] + col\n      cnt &lt;- cnt + 1\n    }\n  }\n  return(M)\n}\n\n\n\n\n\nOptimize the fill_noloop to fill_noloops that does not use any loops at all.\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nfill_noloops &lt;- function(N, bag, seed = 42) {\n  values &lt;- sample(bag, size = N^2, replace = T)\n  inc &lt;- rep(x = 1:N, times = N)\n  M &lt;- matrix(data = values + inc, nrow = N, byrow = T)\n  return(M)\n}\n\n\n\n\n\n\n2.6 Optiona Task: Using the profr package.\n\nInstall and load the profr package.\nUse profr to profile fill_noloop, fill_noloops and fill_alloc_opt.\n\nPlease use the following function, if you were not able to run profr::ggplot.profr.\n\nggplot.profr &lt;- function(data, ..., minlabel = 0.1, angle=0) {\n  if (!requireNamespace(\"ggplot2\", quietly = TRUE))\n    stop(\"Please install ggplot2 to use this plotting method\")\n  data$range &lt;- diff(range(data$time))\n\n  # quiet R CMD check note\n  start &lt;- NULL\n  end &lt;- NULL\n  time &lt;- NULL\n\n  ggplot2::ggplot(as.data.frame(data)) +\n    ggplot2::geom_rect(\n      ggplot2::aes(xmin = start, xmax = end, ymin = level - 0.5, ymax = level + 0.5),\n      fill = \"grey95\", colour = \"black\", size = 0.5) +\n    ggplot2::geom_text(\n      ggplot2::aes(start + range / 60, level, label = f),\n      data = subset(data, time &gt; max(time) * minlabel),\n      size = 4, angle = angle, hjust = 0) +\n    ggplot2::scale_y_continuous(\"time\") +\n    ggplot2::scale_x_continuous(\"level\")\n}\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nlibrary(profr)\n\nRprof(\"profr_noloop.out\", interval = 0.01)\nfill_noloop(1000, rnorm(1000), seed = 42)\nRprof(NULL)\nprofile_noloop_df &lt;- parse_rprof('profr_noloop.out')\n\nRprof(\"profr_noloops.out\", interval = 0.01)\nfill_noloops(100, rnorm(1000), seed = 42)\nRprof(NULL)\nprofile_noloops_df &lt;- parse_rprof('profr_noloops.out')\n\nRprof(\"profr_alloc_opt.out\", interval = 0.01)\nfill_alloc_opt(10, rnorm(1000), seed = 42)\nRprof(NULL)\nprofile_alloc_opt_df &lt;- parse_rprof('profr_alloc_opt.out')\n\nprofr::ggplot.profr(profile_noloop_df)\nprofr::ggplot.profr(profile_noloops_df)\nprofr::ggplot.profr(profile_alloc_opt_df)\n\n\n\n\n\n\n2.7 Optional Task: Using the profvis package.\n\nInstall and load the profvis package.\nUse profvis to profile fill_noloop, and fill_alloc functions."
  },
  {
    "objectID": "labs/debugging/index.html#optimize-your-code",
    "href": "labs/debugging/index.html#optimize-your-code",
    "title": "Debugging, Profiling and Optimizing Code",
    "section": "3 Optimize Your Code",
    "text": "3 Optimize Your Code\nIn this section, we will deal with some selected ways to optimize your code.\n\n3.1 Task: Fix and Optimize This!\nGiven is a function:\n\noptimize_me &lt;- function(N = 1000, values = c(1:1e4)) {\n  N = 10; values = c(1:1e4)\n  dat1 &lt;- matrix(size = N^2)\n  for (i in 1:N) {\n    for (j in 1:N) {\n      dat1[i, j] &lt;- sample(values, 1)\n    }\n  }\n  dat0 &lt;- dat1\n  dat1[lower.tri(dat1)] &lt;- t(dat1)[lower.tri(dat1)]\n  \n  dat2 &lt;- NULL \n  for (i in 1:N) {\n    i_tmp &lt;- c()\n    for (j in 1:N) {\n      i_tmp &lt;- c(i_tmp, sample(values, 1))\n    }\n    dat2 &lt;- rbind(dat2, i_tmp)\n  }\n  dat2[lower.tri(dat2)] &lt;- t(dat2)[lower.tri(dat2)]\n \n  M &lt;- dat2\n  for (i in 1:N) {\n    for (j in 1:N) {\n      M[i, j] &lt;- dat1[i, j] * dat2[i, j]\n    }\n  }\n  for (i in 1:N) {\n    for (j in 1:N) {\n      M[i, j] &lt;- M[i, j] + values[3]\n    }\n  }\n  N &lt;- M %*% dat0\n  result &lt;- apply(N, 2, mean)\n  return(result)\n}\n\n\nWhat does it do, step-by-step?\nProfile it.\nIs dat1 &lt;- matrix(size = N^2) better than dat1 &lt;- matrix(NA, nrow=N, ncol=N)?\nCan you optimize something using BLAS?\nCan you optimize by using apply somewhere?\nCan you optimize apply further?\nWhat else can you optimize. Do it. Report speed gain and memory gain compared to the original version in this spreadsheet (Best Coding Practises Lab sheet, Optimization gains)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "In Life Sciences and Bioinformatics, the R programming language is pivotal for data transformation, statistical analyses, and crafting publication-ready visualizations. This workshop goes beyond the basics, offering participants a comprehensive understanding of the R ecosystem. We explore best coding practices, code profiling, data wrangling, generating reports from notebooks and development of web apps using R.\nSlides ▸ Labs ▸\n   \n\n\nUpdated: 03-07-2024 at 09:01:01."
  },
  {
    "objectID": "index.html#raukr-summer-school-2024",
    "href": "index.html#raukr-summer-school-2024",
    "title": "",
    "section": "",
    "text": "In Life Sciences and Bioinformatics, the R programming language is pivotal for data transformation, statistical analyses, and crafting publication-ready visualizations. This workshop goes beyond the basics, offering participants a comprehensive understanding of the R ecosystem. We explore best coding practices, code profiling, data wrangling, generating reports from notebooks and development of web apps using R.\nSlides ▸ Labs ▸\n   \n\n\nUpdated: 03-07-2024 at 09:01:01."
  },
  {
    "objectID": "home_registration.html",
    "href": "home_registration.html",
    "title": "Registration",
    "section": "",
    "text": "This workshop is aimed at both Ph.D. students and researchers within life sciences who are already using R for bioinformatics data analyses and who would like to start using R at a more advanced level. In order for you and other participants to benefit the most, you should consider yourself eligible if you are comfortable with:\n\nReading and transforming data,\nInstalling and using third-party packages and\nPlotting using standard R graphics."
  },
  {
    "objectID": "home_registration.html#entry-requirements",
    "href": "home_registration.html#entry-requirements",
    "title": "Registration",
    "section": "",
    "text": "This workshop is aimed at both Ph.D. students and researchers within life sciences who are already using R for bioinformatics data analyses and who would like to start using R at a more advanced level. In order for you and other participants to benefit the most, you should consider yourself eligible if you are comfortable with:\n\nReading and transforming data,\nInstalling and using third-party packages and\nPlotting using standard R graphics."
  },
  {
    "objectID": "home_registration.html#selection",
    "href": "home_registration.html#selection",
    "title": "Registration",
    "section": "Selection",
    "text": "Selection\nWe can accomodate ~42 participants. Selection criteria include correct entry requirements, motivation to attend the workshop as well as gender and geographical balance. We do accept international applicants, but applicants affiliated to a Swedish institution are prioritized.\nOnce the registration period concludes, we will review your application and notify you of our decision. If and when accepted, you will have three working days to notify us if you cannot participate and want to decline the acceptance. Failure to do so would imply your inability to attend, and we will proceed accordingly. Once you confirmed, our course administrator will proceed with invoicing."
  },
  {
    "objectID": "home_registration.html#fee",
    "href": "home_registration.html#fee",
    "title": "Registration",
    "section": "Fee",
    "text": "Fee\nThe fee for academic participants is 8000 SEK subsidized by academic grants. Fee for non-academic participants is 16 000 SEK.\n\n\n\n\n\n\nWarning\n\n\n\nIf you register and are admitted but fail to attend without a valid reason (sickness or urgent family matter), you will still be liable for the entire fee.\n\n\n\n\n\n\n\n\nMore info about the fee\n\n\n\nIncluded in the fee\n\nParticipation in lectures and workshops\nMingle reception with snacks and drinks\nDaily breakfast/coffee, lunch and afternoon coffee during the workshop\nOne official course dinner\nSurprise social activities\n\nNot included in the fee\n\nAccomodation\nTravel to and from Visby\nDaily dinners"
  },
  {
    "objectID": "home_registration.html#certification-credits",
    "href": "home_registration.html#certification-credits",
    "title": "Registration",
    "section": "Certification & Credits",
    "text": "Certification & Credits\nPlease refer to our FAQs."
  },
  {
    "objectID": "home_registration.html#location",
    "href": "home_registration.html#location",
    "title": "Registration",
    "section": "Location",
    "text": "Location\n\nSource: VisitSweden\nThe workshop takes place in the city of Visby nestled on the island of Gotland, Sweden. This medieval town, dating back to the 12th century, is a UNESCO world heritage site. For more information, visit Visit Sweden and Gotland Tourism."
  },
  {
    "objectID": "home_registration.html#travel",
    "href": "home_registration.html#travel",
    "title": "Registration",
    "section": "Travel",
    "text": "Travel\nVisby is accessible from mainland Sweden by flight or ferry. See Gotland tourism website for information.\nVisby airport provides connections to Stockholm, Malmö, and Gothenburg, with a flying time of approximately 1 hour from Stockholm. Bus connection from the airport to the city centre takes about 10 min. Alternatively, there are airport taxis as well.\nFerry connections are available from Stockholm (Nynäshamn) to Visby through Destination Gotland or Vikingline. The journey time from Nynäshamn to Visby is about 3 hours. The ferry terminal in Visby is walking distance from Uppsala University Campus Gotland (800m) and our suggested accomodations.\n\nSource: DestinationGotland"
  },
  {
    "objectID": "home_registration.html#venue",
    "href": "home_registration.html#venue",
    "title": "Registration",
    "section": "Venue",
    "text": "Venue\n\n\n\n\n\n\n\nThe workshop is held on Campus Gotland, Uppsala University. Here is the full address:\n\nB27 Lärosal\nCampus Gotland\nUppsala University\nCramérgatan 3\n621 57 Visby\nGotland, Sweden\n\n\n\n\n\n\n\nNote\n\n\n\nThe classroom windows may be left open in case the room gets warm. If you are easily disturbed by external noise, it might a good idea to bring noise cancelling headphones for practical labs (we are close to Visby harbor). Additional extension cables might come in handy too.\n\n\nFor visual impressions from previous workshops, visit our Gallery."
  },
  {
    "objectID": "home_registration.html#accomodation",
    "href": "home_registration.html#accomodation",
    "title": "Registration",
    "section": "Accomodation",
    "text": "Accomodation\nParticipants are responsible for arranging their own accommodation. When booking accommodation, make sure it is located at a walking distance from Campus Gotland. Here are a few suggestions below. These are also marked on the map.\n\n\n\n\n\n\n\n\n\n\nName\nAddress\n\n\n\n\nMullbärsgården B&B\nStrandgatan 27, 621 55 Visby, 550 m (8 min walk)\n\n\nVisby Logi & Vandrarhem\nHästgatan 14, 621 56 Visby, 450m (6 min walk)\n\n\nVisby Fängelse\nSkeppsbron 1, 621 57 Visby, 450m (6 min walk)\n\n\nHotell Slottsbacken\nVisborgsgatan 1, 621 57 Visby, 450m (6 min)\n\n\nClarion Hotel Visby\nStrandgatan 6, 621 57 Visby, 260m (3 min)"
  },
  {
    "objectID": "home_registration.html#meals",
    "href": "home_registration.html#meals",
    "title": "Registration",
    "section": "Meals",
    "text": "Meals\nA cafeteria is available onsite just outside the lecture hall for breakfast and lunches as well as coffee and snacks. Dinners are not included. Breakfast is not included on Weekends. For further information, see FAQs."
  },
  {
    "objectID": "home_registration.html#key-dates",
    "href": "home_registration.html#key-dates",
    "title": "Registration",
    "section": "Key dates",
    "text": "Key dates\n\n\n\n\n\n\n\n\n\n\nDate\nMilestone\n\n\n\n\n22-Feb-2024\nApplication opens\n\n\n1̶4̶-̶A̶p̶r̶-̶2̶0̶2̶4̶ 2̶3̶:̶5̶9̶\nA̶p̶p̶l̶i̶c̶a̶t̶i̶o̶n̶ d̶e̶a̶d̶l̶i̶n̶e̶\n\n\n17-Apr-2024\nNotification of acceptance/decline\n\n\n26-Apr-2024 23:59\nExtended application deadline\n\n\n30-Apr-2024\nNotification of acceptance/decline for extended deadline\n\n\n09-Jun-2024\nArrival to Visby, mingle in the evening\n\n\n10-Jun-2024 - 20-Jun-2024\nWorkshop\n\n\n20-Jun-2024\nProject presentations, certificates issued, lunch included"
  },
  {
    "objectID": "home_registration.html#register",
    "href": "home_registration.html#register",
    "title": "Registration",
    "section": "Register",
    "text": "Register\nBefore proceeding, please ensure you have read all the information on this page as well as our FAQs. Click below to access the online registration form.\nRegistration is closed"
  },
  {
    "objectID": "home_gallery.html#raukr-2019",
    "href": "home_gallery.html#raukr-2019",
    "title": "Gallery",
    "section": "Raukr 2019",
    "text": "Raukr 2019"
  },
  {
    "objectID": "home_contents.html",
    "href": "home_contents.html",
    "title": "Contents",
    "section": "",
    "text": "Topic\nPresenter\nLinks\n\n\n\n\nWEEK 1\n\n\n\n\n10-Jun-2024 (Mon)\n\n\n\n\nIntroduction to RaukR\nMarcin Kierczak, Sebastian DiLorenzo\n\n\n\nBest Coding Practices in R\nMarcin Kierczak, Sebastian DiLorenzo\nSlides, Lab\n\n\nLiterate programming with Quarto\nRoy Francis\nSlides, Lab\n\n\nDebugging, Profiling and Optimization\nMarcin Kierczak\nSlides, Lab\n\n\n11-Jun-2024 (Tue)\n\n\n\n\nObject-oriented programming\nMarcin Kierczak\nSlides, Lab\n\n\ngit with R\nSebastian DiLorenzo\nSlides, Lab\n\n\nPlotting with ggplot2\nRoy Francis\nSlides, Lab\n\n\n12-Jun-2024 (Wed)\n\n\n\n\nTidyverse\nMarcin Kierczak\nSlides, Lab\n\n\nFuturverse 1\nHenrik Bengtsson, UCSF\nWeb\n\n\n13-Jun-2024 (Thu)\n\n\n\n\nHow to repeat yourself with Purrr\nJenny Bryan, Posit\nRepo\n\n\nWeb apps with Shiny\nRoy Francis\nSlides, Lab\n\n\n14-Jun-2024 (Fri)\n\n\n\n\nR Packages\nJenny Bryan, Posit\nRepo\n\n\nreticulate: Combining R with Python\nNina Norgren\nSlides, Lab\n\n\nWEEK 2\n\n\n\n\n17-Jun-2024 (Mon)\n\n\n\n\nStatistics and machine learning in R\nNikolay Oskolkov\nSlides, Lab\n\n\nFuturverse 2\nHenrik Bengtsson, UCSF\nWeb\n\n\n18-Jun-2024 (Tue)\n\n\n\n\nProject environments using Renv\nRoy Francis\nSlides\n\n\n\n\nSlides Labs"
  },
  {
    "objectID": "home_about.html",
    "href": "home_about.html",
    "title": "About",
    "section": "",
    "text": "Marcin Kierczak\nBioinformatics Data Scientist, NBIS\nAssociate Professor in Bioinformatics, Uppsala university\n\n\n\nSebastian DiLorenzo\nBioinformatics Data Scientist, NBIS\n\n\n\nRoy Francis\nBioinformatics Data Scientist, NBIS\n\n\n\nAnnika Kollstedt\nAdministrator, NBIS"
  },
  {
    "objectID": "home_about.html#organizers",
    "href": "home_about.html#organizers",
    "title": "About",
    "section": "",
    "text": "Marcin Kierczak\nBioinformatics Data Scientist, NBIS\nAssociate Professor in Bioinformatics, Uppsala university\n\n\n\nSebastian DiLorenzo\nBioinformatics Data Scientist, NBIS\n\n\n\nRoy Francis\nBioinformatics Data Scientist, NBIS\n\n\n\nAnnika Kollstedt\nAdministrator, NBIS"
  },
  {
    "objectID": "home_about.html#contact",
    "href": "home_about.html#contact",
    "title": "About",
    "section": "Contact",
    "text": "Contact\nNBIS is a platform of the Science for Life Laboratory (SciLifeLab) and the Swedish node of Elixir. This event is organised in co-operation with Campus Gotland Uppsala University, Lund University and Stockholm University, Sweden.\nFor queries, write to us at raukr[at]nbis.se."
  },
  {
    "objectID": "home_faq.html",
    "href": "home_faq.html",
    "title": "FAQs",
    "section": "",
    "text": "1. Will I receive a certificate for completing the workshop?\n\n\n\nCertainly! Upon maintaining satisfactory attendance, demonstrating proficiency in practical exercises, and actively engaging in the collaborative group project (a collaborative effort presented by your group at the conclusion of RaukR), you will be awarded a course completion certificate.\n\n\n\n\n\n2. How many ECTS points will I earn for RaukR?\n\n\n\nWe do not explicitly specify the number of points. Instead, we document the number of training hours attended and the covered topics. The allocation of ECTS points is determined by your university. Historically, participants have encountered no issues in receiving credits for attending RaukR. If formal credits are crucial, the applicant needs to confer with the home department before registration in order to establish whether this workshop is valid for formal credits or not.\n\n\n\n\n\n3. I can’t make it to Visby on Sunday for the mingle.\n\n\n\nIt is a pity, but you will still have a chance to meet us in the morning on Monday.\n\n\n\n\n\n4. I will be late on Monday due to travel.\n\n\n\nWhile we strongly recommend timely arrival, if you anticipate being late on Monday, please inform us in advance. However, arriving later than Monday after lunch is generally discouraged unless due to unforeseen circumstances.\n\n\n\n\n\n5. I need to leave earlier. Is that acceptable?\n\n\n\nProject presentations are scheduled for the morning on the final day, and participation in presenting your project is a key criterion. If you must leave early, we can attempt to schedule your group’s presentation at an earlier time to accommodate your schedule.\n\n\n\n\n\n6. Will there be any free days during the workshop?\n\n\n\nCertainly! We recognize the need for a break. One weekend day is optional, and on the other day (usually Sunday), we organize an excursion to a delightful location on Gotland. Typically, activities start at 09:00 and conclude by 17:00.\n\n\n\n\n\n7. Should I bring my medieval outfit?\n\n\n\nYou are encouraged to embrace the viking within you. Some instructors take it quite seriously. After all, we are in Visby!\n\n\n\n\n\n8. My family is planning to follow. What should I consider?\n\n\n\nYou can of course organize your family’s accomodation along with yours. It’s likely that you will not be able to spend much time with them as the workshop is quite intense. We recommend they arrive towards the end of the workshop, and perhaps you can all extend your stay to celebrate Midsommar in Visby.\n\n\n\n\n\n9. Are there any planned social activities?\n\n\n\nAbsolutely! We have one official dinner (date to be announced) and a full-day trip on the weekend. Additionally, if students wish to organize informal gatherings like a BBQ or meet in town for a beer or ice cream, we not only encourage but warmly support such initiatives.\n\n\n\n\n\n10. I woke up feeling sick. What should I do?\n\n\n\nPlease inform us and stay in your room until you feel better. We prioritize the well-being of all participants and understand that illness may prevent participation. We will work to find a suitable solution for you to minimize the impact on your learning experience. If you require assistance, don’t hesitate to reach out.\n\n\n\n\n\n11. Do you accommodate special dietary needs and provide suitable food options?\n\n\n\nPlease provide your dietary requirements in the registration form, and we’ll communicate them to the restaurant. Lunches are buffet style with various options, and the restaurant can prepare special meals if needed to accommodate your specific dietary needs."
  },
  {
    "objectID": "home_program.html",
    "href": "home_program.html",
    "title": "Program",
    "section": "",
    "text": "Jennifer Bryan\nSoftware engineer at Posit\nData science professor\nUniversity of British Columbia\nVancouver, Canada\n\n\n\nHenrik Bengtsson\nProject lead for Futureverse\nAssociate professor in Epidemiology & Biostatistics\nUniversity of California\nSan Francisco, USA"
  },
  {
    "objectID": "home_program.html#guest-instructors",
    "href": "home_program.html#guest-instructors",
    "title": "Program",
    "section": "",
    "text": "Jennifer Bryan\nSoftware engineer at Posit\nData science professor\nUniversity of British Columbia\nVancouver, Canada\n\n\n\nHenrik Bengtsson\nProject lead for Futureverse\nAssociate professor in Epidemiology & Biostatistics\nUniversity of California\nSan Francisco, USA"
  },
  {
    "objectID": "home_program.html#syllabus",
    "href": "home_program.html#syllabus",
    "title": "Program",
    "section": "Syllabus",
    "text": "Syllabus\nWe will be covering a number of topics in R programming with focus on R features helpful in bioinformatics and computational biology data analyses workflow:\n\nReproducible research in R (Quarto, Rmarkdown, Renv)\nCollaborative work using Git and GitHub\nR code style guide & best practices\nCode debugging, optimization and profiling\nParallelization and vectorization in R\nCrafting your own functions\nObject oriented programming and R classes: S3, S4, R6 and RC\nAnatomy of an R package: Creating your own package from scratch\nTidy data flow using tidyverse\nUsing the language of graphics: ggplot2\nDeveloping web applications using Shiny\nR and Python integration using reticulate\nTeam project work - developing data analyses workflow in R using acquired skills"
  },
  {
    "objectID": "home_program.html#course-materials",
    "href": "home_program.html#course-materials",
    "title": "Program",
    "section": "Course materials",
    "text": "Course materials\nCourse materials will be made available at the beginning of the workshop and will remain open and publicly accessible online for at least a year. You can check out the materials from 2023."
  },
  {
    "objectID": "home_program.html#sessions",
    "href": "home_program.html#sessions",
    "title": "Program",
    "section": "Sessions",
    "text": "Sessions\nOur daily schedule begins with a morning session from 08:30 to 12:30, starting with breakfast from 08:30 to 09:00 and a 30-minute break at 10:30. Lunchtime is from 12:30 to 13:30. The afternoon session follows, running from 13:30 to 17:00, with a 30-minute coffee break at 15:00.\nPlease note that due to varying time zones, online guest lectures might occur after 17:00.\nThroughout the majority of sessions, our instructors and teaching assistants will be available to aid you with practical exercises and answer any queries you may have."
  },
  {
    "objectID": "home_schedule.html",
    "href": "home_schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Today"
  },
  {
    "objectID": "labs/coding/index.html",
    "href": "labs/coding/index.html",
    "title": "Best Coding Practices",
    "section": "",
    "text": "Note\n\n\n\nThe objective of this lab is to improve your coding skills by focusing on coding style, code benchmarking and optimization. Below, you will find a number of tasks connected to the topics covered in the Best Coding Practices lecture. Some tasks extend lectures content and require you to find some more information online. Please, note that while we are providing example solutions to many tasks, these are only examples. If you solve a task in a different way it does not matter your solution is wrong. In fact, it may be better than our solution. If in doubt, ask a TA for help. We are here for you!"
  },
  {
    "objectID": "labs/coding/index.html#coding-style",
    "href": "labs/coding/index.html#coding-style",
    "title": "Best Coding Practices",
    "section": "1 Coding Style",
    "text": "1 Coding Style\n\n1.1 Task: Valid Variable Names.\nWhich of the following are valid/good variable names in R. What is wrong with the ones that are invalid/bad?\n\nvar1\n3way_handshake\n.password\n__test__\nmy-matrix-M\nthree.dimensional.array\n3D.distance\n.2objects\nwz3gei92\nnext\nP\nQ\nR\nS\nT\nX\nis.larger?\n\n\n\n1.2 Task: Obscure Code.\nThe code below works, but can be improved. Do improve it!\n\nmyIterAtoR.max &lt;- 5\nsecond_iterator.max&lt;-7\ncol.NUM= 10\nrow.cnt =10\nfwzy45 &lt;- matrix(rep(1, col.NUM*row.cnt),nrow=row.cnt)\nfor(haystack in (2-1):col.NUM){\n  for(needle in 1:row.cnt) {\nif(haystack&gt;=myIterAtoR.max){\nfwzy45[haystack, needle]&lt;-NA}\n}}\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\niter_max &lt;- 5\ncol_num &lt;- 10\nrow_num &lt;- 10\nA &lt;- matrix(rep(1, col_num * row_num), nrow = row_num)\nfor (i in 1:col_num) {\n  for (j in 1:row_num) {\n    if (i &gt;= iter_max) {\n      A[i, j] &lt;- NA\n    }\n  }\n}\n\n# Can you improve the code more by eliminating loops or at least one of them?\n\n\n\n\n\n\n1.3 Task: Better Formatting.\nImprove formatting and style of the following code:\n\nsimulate_genotype &lt;- function( q, N=100 ) {\n  if( length(q)==1 ){\n    p &lt;- (1 - q)\n    f_gt &lt;- c(p^2, 2*p*q, q^2) # AA, AB, BB\n  }else{\n    f_gt&lt;-q\n  }\n  tmp &lt;- sample( c('AA','AB','BB'), size =N, prob=f_gt, replace=T )\n  return(tmp)\n}\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nsimulate_genotype &lt;- function(q, N = 100) {\n  if (length(q) == 1) {\n    p &lt;- (1 - q)\n    f_gt &lt;- c(p^2, (2 * p * q), q^2) # AA, AB, BB\n  } else {\n    f_gt &lt;- q\n  }\n  sample(c('AA', 'AB', 'BB'), \n         size = N, \n         prob = f_gt, \n         replace = TRUE)\n}\n\n\n\n\n\n\n1.4 Task: Hidden Variable.\nAssign a vector of three last months (abbreviated in English) in a year to a hidden variable my_months.\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\n# If we do not know the length of the vector\n.my_months &lt;- rev(rev(month.abb)[1:3])\n\n# or\n.my_months &lt;- month.abb[(length(month.abb)-2):length(month.abb)]\n\n\n\n\n\n\n1.5 Task: Pipeline-friendly Function.\nModify the function below so that it works with R pipes %&gt;%:\n\nmy_filter &lt;- function(threshold = 1, x, scalar = 5) {\n  x[x &gt;= threshold] &lt;- NA \n  x &lt;- x * scalar\n  return(x)\n}\n\n\n\n\n\n\n\nNecessary Packages\n\n\n\nYou need to have the magrittr or tidyverse package loaded in order to be able to use the pipe %&gt;%!\n\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nmy_filter &lt;- function(x, threshold = 1, scalar = 5) {\n  x[x &gt;= threshold] &lt;- NA \n  x * scalar\n}\n\n# Test:\nc(-5, 5) %&gt;% my_filter()\n\n\n\n\n\n\n1.6 Task: Untidy Code?\nIs the code below correct? Can it be improved?\n\nsimulate_phenotype &lt;- function(pop_params, gp_map, gtype) {\n  pop_mean &lt;- pop_params[1]\n  pop_var &lt;- pop_params[2]\n  pheno &lt;- rnorm(n = N, mean = pop_mean, sd = sqrt(pop_var))\n  effect &lt;- rep(0, times = length(N))\n  for (gt_iter in c('AA', 'AB', 'BB')) {\n    effect[gtype == gt_iter] &lt;- rnorm(n = sum(gtype == gt_iter), \n                                      mean = gp_map[gt_iter, 'mean_eff'], \n                                      sd = sqrt(gp_map[gt_iter, 'var_eff']))\n  }\n  dat &lt;- data.frame(gt = gtype, raw_pheno = pheno, effect = effect, pheno = pheno + effect)\n  return(dat)\n}\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nMaybe some small improvements can be done, but in principle the code is clean! Except that... the N is not initialized anywhere."
  },
  {
    "objectID": "labs/coding/index.html#structuring-the-code",
    "href": "labs/coding/index.html#structuring-the-code",
    "title": "Best Coding Practices",
    "section": "2 Structuring the Code",
    "text": "2 Structuring the Code\n\n2.1 Task: Computing Variance.\nWrite a modular code (function or functions) that computes the sample standard deviation given a vector of numbers. Decide how to logically structure the code. Assume there are no built-in R functions for computing mean and variance available. The formula for variance is: \\(SD = \\sqrt{\\frac{\\Sigma_{i=1}^{N}(x_i - \\bar{x})^2}{N-1}}\\). Standard deviation is \\(Var=SD^2\\).\n\n\n\n\n\n\nNote\n\n\n\nConsider that you may want to re-use some computed values in future, e.g. variance.\n\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nsample_mean &lt;- function(x) {\n  sum(x) / length(x)\n} \n\nsum_squared_deviations &lt;- function(x) {\n  tmp &lt;- (x - sample_mean(x))^2\n  sum(tmp)\n}\n\nstd_dev &lt;- function(x) {\n  sqrt(sum_squared_deviations(x) / (length(x) - 1))\n}\n\nvariance &lt;- function(x) {\n  std_dev(x)^2\n}\n\n\n\n\n\n\n2.2 Task: Writing a Wrapper Function.\nYou found two functions in two different packages: the randomSampleInt function that generates a random sample of integer numbers and the randomSampleLetter function for generating a random sample of letters. Unfortunately, the functions are called in different ways which you want to unify in order to use them interchangeably in your code. Write a wrapper function around the randomSampleLetter that will provide the same interface to the function as the randomSampleInt. Also, the randomSampleLetter cannot handle the seed. Can you add this feature to your wrapper?\n\nrandomSampleInt &lt;- function(x, verbose, length, seed = 42) {\n  if (verbose) {\n    print(paste0('Generating random sample of ', length, ' integers using seed ', seed))\n  }\n  set.seed(seed)\n  sampleInt &lt;- sample(x = x, size = length, replace = TRUE)\n  return(sampleInt)\n} \n\nrandomSampleLetter &lt;- function(N, silent=T, lett) {\n  if (!silent) {\n    print(paste0('Generating random sample of ', N, ' letters.'))\n  }\n  sample &lt;- sample(x = lett, size = N, replace = TRUE)\n  return(sample)\n}\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nrandomSampleLetterWrapper &lt;- function(x, verbose, length, seed = 42) {\n  set.seed(seed)\n  randomSampleLetter(N = length, silent = !verbose, lett = x)\n}\n\n\n\n\n\n\n2.3 Task: Customizing plot.\nWrite a wrapper around the graphics::plot function that modifies its default behavior so that it plots red crosses instead of black points. Do it in a way that enables the user to modify other function arguments.\n\n\n\n\n\n\nTip\n\n\n\nYou may want to have a look at graphics::plot.default.\n\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nmy_plot &lt;- function(x, ...) {\n  plot(x, pch = 3, col = 'red', ...) \n}\n\n\n\n\n\n\n2.4 Bonus task: Adding Arguments to a Function.\nWhat if you want to pass some additional parameters to a function and, sadly, the authors forgot to add ... to the list of function arguments. There is a way out – you can bind extra arguments supplied as alist structure to the original function arguments retrieved by formals. Try to fix the function below, so that the call red_plot(1, 1, col = 'red', pch = 19) will result in points being represented by red circles. Do use alist and formals and do not edit the red_plot itself!\n\n\n\n\n\n\nTip\n\n\n\nRead help for alist and formals.\n\n\nOriginal function:\n\nred_plot &lt;- function(x, y) { \n  plot(x, y, las=1, cex.axis=.8, ...)\n}\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\nred_plot &lt;- function(x, y) { \n  plot(x, y, las = 1, cex.axis = .8, ...)\n}\n\nred_plot(1, 1, col = 'red', pch = 19) # Does not work.\nformals(red_plot) &lt;- c(formals(red_plot), alist(... = )) # Fix.\nred_plot(1, 1, col = 'red', pch = 19) # Works!\n\n\n\n\n\n\n2.5 Bonus task: Using options.\nUse options to change the default prompt in R to hello :-) &gt;.\n\n\n\n\n\n\nTip\n\n\n\nCheck what options are stored in the hidden variable called Options.\n\n\n\n\n\n\n\n\nExample Solution\n\n\n\n\n\n\noptions(prompt = \"hello :-) &gt; \")\n.Options\noptions(prompt = \"&gt; \") # restoring the default"
  },
  {
    "objectID": "labs/demo/index.html",
    "href": "labs/demo/index.html",
    "title": "Demo Lab",
    "section": "",
    "text": "This is a quarto document"
  },
  {
    "objectID": "labs/demo/index.html#text-formatting",
    "href": "labs/demo/index.html#text-formatting",
    "title": "Demo Lab",
    "section": "1 Text formatting",
    "text": "1 Text formatting\n\n1.1 Headings\n## Level 2 heading  \n### Level 3 heading  \n#### Level 4 heading  \n##### Level 5 heading  \n###### Level 6 heading\n\n\n1.2 Character sizes\nCustom character sizes. This is an enchanced feature.\n\n\n\nMarkdown\nRendered\n\n\n\n\n[Largest text]{.largest}\nLargest text\n\n\n[Larger text]{.larger}\nLarger text\n\n\n[Large text]{.large}\nLarge text\n\n\nNormal text\nNormal text\n\n\n[Small text]{.small}\nSmall text\n\n\n[Smaller text]{.smaller}\nSmaller text\n\n\n[Smallest text]{.smallest}\nSmallest text\n\n\n\n\n\n1.3 Character styles\n\n\n\nMarkdown\nRendered\n\n\n\n\n__Bold text__\nBold text\n\n\n_Italic text_\nItalic text\n\n\n~~Strikethrough~~\nStrikethrough\n\n\nH~2~O\nH2O\n\n\nx^2\nx^2\n\n\n--\n–\n\n\n---\n—\n\n\n[link](r-project.org)\nlink\n\n\n{{&lt; kbd Shift-Ctrl-P &gt;}}\nShift-Ctrl-PShift-Ctrl-P\n\n\n\n\n\n1.4 Blockquote\n&gt; This is a block quote. This\n&gt; paragraph has two lines.\n&gt;\n&gt; 1. This is a list inside a block quote.\n&gt; 2. Second item.\n\nThis is a block quote. This paragraph has two lines.\n\nThis is a list inside a block quote.\nSecond item.\n\n\n\n\n1.5 Line block\nLine block preserves spaces and new lines.\n| This\n|     block\n|          preserves\n|                   formatting\nThis\n    block\n         preserves\n                  formatting\n\n\n1.6 Rule\nA horizontal line can be created using three or more * or -.\n***\n\n\n\n1.7 Footnote\nAn example of footnote reference 1\n\n\n1.8 Aside\n[This content lives in the right margin]{.aside}\nThis content lives in the right margin\n\n\n1.9 Badge\nBadges are defined as such:\n[badge]{.badge .badge-primary} badge\n[badge]{.badge .badge-secondary} badge"
  },
  {
    "objectID": "labs/demo/index.html#code-formatting",
    "href": "labs/demo/index.html#code-formatting",
    "title": "Demo Lab",
    "section": "2 Code formatting",
    "text": "2 Code formatting\nVerbatim code is text formatted using monospaced font intended as code. Verbatim code can be defined inline where `date()` looks like date().\nCode can also be defined inside code blocks.\n```\ndate()\n```\ndate()\nSource code, ie; code that is highlighted or executed in a quarto document is not covered here."
  },
  {
    "objectID": "labs/demo/index.html#code-execution",
    "href": "labs/demo/index.html#code-execution",
    "title": "Demo Lab",
    "section": "3 Code execution",
    "text": "3 Code execution\nCode can be defined inline where `r Sys.Date()` renders 2024-05-29.\nCode can be defined inside code blocks.\n```{r}\nSys.Date()\n```\nwhich shows the source code and output.\n\nSys.Date()\n\n[1] \"2024-05-29\"\n\n\nHere is another example of executed R code with input and output.\n\ndata(iris)\nhead(iris[,1:2])"
  },
  {
    "objectID": "labs/demo/index.html#code-sizing",
    "href": "labs/demo/index.html#code-sizing",
    "title": "Demo Lab",
    "section": "4 Code sizing",
    "text": "4 Code sizing\nSizing pre-formatted inline code\n[`Sys.Date()`]{.largest}\n[`Sys.Date()`]{.larger}\n[`Sys.Date()`]{.large}\n`Sys.Date()`\n[`Sys.Date()`]{.small}\n[`Sys.Date()`]{.smaller}\n[`Sys.Date()`]{.smallest}\nSys.Date()\nSys.Date()\nSys.Date()\nSys.Date()\nSys.Date()\nSys.Date()\nSys.Date()\nSizing pre-formatted code block\n::: {.small}\n```\nSys.Date()\n```\n:::\n\nSys.Date()\n\n\nSys.Date()\n\n\nSys.Date()\n\n::: :::\nSizing source code\n```{r}\n#| eval: false\n#| class-source: small\nSys.Date()\n```\n\nSys.Date()\n\n\nSys.Date()\n\n\nSys.Date()\n\nSizing output code\n```{r}\n#| class-source: small\n#| classes: small\nSys.Date()\n```\n\nSys.Date()\n\n[1] \"2024-05-29\"\n\n\n\nSys.Date()\n\n[1] \"2024-05-29\"\n\n\n\nSys.Date()\n\n[1] \"2024-05-29\""
  },
  {
    "objectID": "labs/demo/index.html#chunk-attributes",
    "href": "labs/demo/index.html#chunk-attributes",
    "title": "Demo Lab",
    "section": "5 Chunk attributes",
    "text": "5 Chunk attributes\nProperties and behaviour of code chunks can be controlled using chunk attributes. This is specified as comment sign of the language and pipe followed by key: value. So for example, in R: #| eval: false.\nIn this example, the R source code and results are hidden but the code is evaluated.\n```{r}\n#| eval: true\n#| echo: false\n#| results: hide\nSys.Date()\n```\nA code chunk can be given a code filename using the chunk attribute filename.\n```{r}\n#| filename: R code\nSys.Date()\n```\n\n\n\nR code\n\nSys.Date()\n\n\nEnable line numbers using code-line-numbers: true.\n```{r}\n#| code-line-numbers: true\nSys.Date()\nsessionInfo()\n```\n\nSys.Date()\nsessionInfo()\n\nAn advanced example showing bash code generated from R.\n```{r}\n#| attr-output: \"filename='bash'\"\n#| class-output: bash\n#| echo: false\nd &lt;- \"custom\"\ncat(paste(\"mkdir​\", d))\n```\n\n\n\n\nbash\n\nmkdir​ custom\n\n\n\nCode chunk attributes are documented here."
  },
  {
    "objectID": "labs/demo/index.html#lists",
    "href": "labs/demo/index.html#lists",
    "title": "Demo Lab",
    "section": "6 Lists",
    "text": "6 Lists\n\n6.1 Unordered\nUnordered lists are created using dashes.\n\n\n- Bullet 1\n- Bullet 2\n  - Sub-bullet 2.1\n  - Sub-bullet 2.2\n- Bullet 3\n\n\n\nBullet 1\nBullet 2\n\nSub-bullet 2.1\nSub-bullet 2.2\n\nBullet 3\n\n\n\n\n\n6.2 Ordered\nOrdered lists are created using numbers.\n\n\n1. Point 1\n2. Point 2\n3. Point 3\n\n\n\nPoint 1\nPoint 2\nPoint 3\n\n\n\n\n\n6.3 Multiple Lists\n\n\n::: {}\n1. Point 1\n2. Point 2\n:::\n\n:::{}\n1. Point 1\n2. Point 2\n:::\n\n\n\n\nPoint 1\nPoint 2\n\n\n\n\nPoint 1\nPoint 2"
  },
  {
    "objectID": "labs/demo/index.html#images",
    "href": "labs/demo/index.html#images",
    "title": "Demo Lab",
    "section": "7 Images",
    "text": "7 Images\nImages can be inserted using plain markdown or HTML directly. Plain markdown can be embellished with custom quarto adjustments to modify aspects of the image. Clicking the image opens the image in a lightbox. This is made possible using the lightbox extension.\n\n7.1 Using Markdown\nUsing regular markdown.\n![](assets/image.jpg)\n\nThe dimensions are based on image and/or fill up the entire available space. You can control the dimension as shown below.\n![This is a caption](assets/image.jpg){width=30%}  \n\n\n\nThis is a caption\n\n\nThis image above is now 30% of it’s original width.\n\n7.1.1 Figure layout\n::: {#fig-mylabel layout-ncol=2}\n![Caption for figure 1](assets/image.jpg){width=\"40%\"}\n\n![Caption for figure 2](assets/image.jpg){width=\"40%\"}\n\nThese figures are interesting.\n:::\n\n\n\n\n\n\n\n\nCaption for figure 1\n\n\n\n\n\n\n\nCaption for figure 2\n\n\n\n\n\n\nFigure 1: These figures are interesting.\n\n\n\nMore figure options and layouts are described here. Cross referencing described here.\n\n\n\n7.2 Using HTML\nThis image below is 30% size.\n&lt;img src=\"assets/image.jpg\" style=\"width:30%;\"/&gt;\n\nFor more information on figures, see here. Images generated through code is not covered here.\n\n\n7.3 Static images using R\nQuarto chunks can be used to control image display size using the argument out.width.\nThis image below is displayed at a size of 300 pixels.\n```{r}\n#| out-width: 300px\nknitr::include_graphics(\"assets/image.jpg\")\n```\n\n\n\n\n\n\n\n\n\nThis image below is displayed at a size of 75 pixels and a caption added.\n```{r}\n#| out-width: 75px\n#| fig-cap: This is a caption\nknitr::include_graphics(\"assets/image.jpg\")\n```\n\n\n\n\n\nThis is a caption\n\n\n\n\nFor more information on figures, see here. For plots generated through R, see section further below."
  },
  {
    "objectID": "labs/demo/index.html#math-expressions",
    "href": "labs/demo/index.html#math-expressions",
    "title": "Demo Lab",
    "section": "8 Math expressions",
    "text": "8 Math expressions\nSome examples of rendering equations.\n\n\n$e^{i\\pi} + 1 = 0$\n\n\n\\(e^{i\\pi} + 1 = 0\\)\n\n\n\n\n$$\\frac{E \\times X^2 \\prod I}{2+7} = 432$$\n\n\n\\[\\frac{E \\times X^2 \\prod I}{2+7} = 432\\]\n\n\n\n\n$$\\sum_{i=1}^n X_i$$\n\n\n\\[\\sum_{i=1}^n X_i\\]\n\n\n\n\n$$\\int_0^{2\\pi} \\sin x~dx$$\n\n\n\\[\\int_0^{2\\pi} \\sin x~dx\\]\n\n\n\n\n$\\left( \\sum_{i=1}^{n}{i} \\right)^2 = \\left( \\frac{n(n-1)}{2}\\right)^2 = \\frac{n^2(n-1)^2}{4}$\n\n\n\\(\\left( \\sum_{i=1}^{n}{i} \\right)^2 = \\left( \\frac{n(n-1)}{2}\\right)^2 = \\frac{n^2(n-1)^2}{4}\\)\n\n\n\n\n$\\begin{eqnarray} X & \\sim & \\mathrm{N}(0,1)\\\\ Y & \\sim & \\chi^2_{n-p}\\\\ R & \\equiv & X/Y \\sim t_{n-p} \\end{eqnarray}$\n\n\n\\(\\begin{eqnarray} X & \\sim & \\mathrm{N}(0,1)\\\\ Y & \\sim & \\chi^2_{n-p}\\\\ R & \\equiv & X/Y \\sim t_{n-p} \\end{eqnarray}\\)\n\n\n\n\n$\\begin{eqnarray} P(|X-\\mu| &gt; k) & = & P(|X-\\mu|^2 &gt; k^2)\\\\ & \\leq & \\frac{\\mathbb{E}\\left[|X-\\mu|^2\\right]}{k^2}\\\\ & \\leq & \\frac{\\mathrm{Var}[X]}{k^2} \\end{eqnarray}$\n\n\n\\(\\begin{eqnarray} P(|X-\\mu| &gt; k) & = & P(|X-\\mu|^2 &gt; k^2)\\\\ & \\leq & \\frac{\\mathbb{E}\\left[|X-\\mu|^2\\right]}{k^2}\\\\ & \\leq & \\frac{\\mathrm{Var}[X]}{k^2} \\end{eqnarray}\\)"
  },
  {
    "objectID": "labs/demo/index.html#icons",
    "href": "labs/demo/index.html#icons",
    "title": "Demo Lab",
    "section": "9 Icons",
    "text": "9 Icons\n\n9.1 Bootstrap icons\nBootstrap icons are directly available since quarto uses bootstrap for styling. Optionally, one could also use the quarto extension bsicons for more control.\n&lt;i class=\"bi bi-lightbulb-fill\"&gt;&lt;/i&gt; \n&lt;i class=\"bi bi-exclamation-circle-fill\"&gt;&lt;/i&gt; \n&lt;i class=\"bi bi-clipboard2-check-fill\"&gt;&lt;/i&gt; \n&lt;i class=\"bi bi-chat-fill\"&gt;&lt;/i&gt; \n&lt;i class=\"bi bi-laptop-fill\"&gt;&lt;/i&gt; \n&lt;i class=\"bi bi-cloud-fill\"&gt;&lt;/i&gt; \n&lt;i class=\"bi bi-github\"&gt;&lt;/i&gt; \n\n\n9.2 Fontawesome\nTo use fontawesome icons as shortcodes, quarto extension fontawesome needs to be installed.\nIcons can be placed using shortcodes.\n{{&lt; fa lightbulb &gt;}} \n{{&lt; fa exclamation &gt;}} \n{{&lt; fa clipboard-list &gt;}} \n{{&lt; fa comments &gt;}} \n{{&lt; fa desktop &gt;}} \n{{&lt; fa cloud &gt;}} \n{{&lt; fa check &gt;}} \n{{&lt; fa times &gt;}} \n{{&lt; fa skull &gt;}} \n{{&lt; fa skull size=2x &gt;}} \n{{&lt; fa brands github &gt;}} \nIcons can be displayed using the HTML &lt;i&gt; tag. Note that not all icons may work.\nHere is a &lt;i class='fa fa-calendar'&gt;&lt;/i&gt; calendar and a &lt;i class='fa fa-couch'&gt;&lt;/i&gt; couch.\nHere is a  calendar and a  couch.\nThere are many other quarto extensions for icons such as academicons, iconify and lordicons.\n\n\n9.3 Icons in R\nIcons can be placed programatically through R using the R package fontawesome.\n`r fontawesome::fa('lightbulb')`\n\nOptional arguments are height and fill.\n`r fontawesome::fa('lightbulb',height='30px',fill='steelblue')`\n\nFor full list of icons check out FontAwesome."
  },
  {
    "objectID": "labs/demo/index.html#call-outs",
    "href": "labs/demo/index.html#call-outs",
    "title": "Demo Lab",
    "section": "10 Call-Outs",
    "text": "10 Call-Outs\nCall-Out blocks are explained here.\n::: {.callout-note}\nThis is a call-out.\n:::\n\n::: {.callout-warning}\nThis is a call-out.\n:::\n\n::: {.callout-important}\nThis is a call-out.\n:::\n\n::: {.callout-tip}\nThis is a call-out.\n:::\n\n::: {.callout-caution}\nThis is a call-out.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Call-out with collapse\n\nThis content is behind an accordion.\n:::\n\n\n\n\n\n\nNote\n\n\n\nThis is a call-out.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is a call-out.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is a call-out.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis is a call-out.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThis is a call-out.\n\n\n\n\n\n\n\n\nCall-out with collapse\n\n\n\n\n\nThis content is behind an accordion."
  },
  {
    "objectID": "labs/demo/index.html#alerts",
    "href": "labs/demo/index.html#alerts",
    "title": "Demo Lab",
    "section": "11 Alerts",
    "text": "11 Alerts\n::: {.alert .alert-primary}\n**Note:** This is an alert!\n:::\n::: {.alert .alert-secondary}\n**Note:** This is an alert!\n:::\n::: {.alert .alert-success}\n**Note:** This is a success alert!\n:::\n::: {.alert .alert-danger}\n**Note:** This is a danger alert!\n:::\n::: {.alert .alert-warning}\n**Note:** This is a warning alert!\n:::\n::: {.alert .alert-info}\n**Note:** This is an info alert!\n:::\n\nNote: This is an alert!\n\n\nNote: This is an alert!\n\n\nNote: This is a success alert!\n\n\nNote: This is a danger alert!\n\n\nNote: This is a warning alert!\n\n\nNote: This is an info alert!"
  },
  {
    "objectID": "labs/demo/index.html#layout",
    "href": "labs/demo/index.html#layout",
    "title": "Demo Lab",
    "section": "12 Layout",
    "text": "12 Layout\n\n12.1 Span\n[Content inside span]{style=\"background-color: gray\"}\nContent inside span\n\n\n12.2 Div\n::: {style=\"background-color: gray\"}\nContent inside div\n:::\n\nContent inside div\n\nDivs can be nested like this:\n:::: {.class}\n::: {.class}\n:::\n::::\nBoth spans and divs support attributes in this specific order: identifiers, classes, and then key-value attributes.\n[Content inside span]{#id .class key1=\"val1\" key2=\"val2\"}\n\n\n12.3 Hidden div\n::: {.hidden}\nHidden content\n:::\n\n\n12.4 Conditional content\n::: {{.content-visible when-format=\"html\"}}\nWill only appear in HTML.\n:::\n::: {{.content-hidden when-format=\"html\"}}\nWill not appear in HTML.\n:::\nConditional content is documented here.\n\n\n12.5 Inner columns\nOrganisation of content into columns within the body container.\n:::: {.columns}\n::: {.column style=\"background-color: aliceblue\"}\nContent is left.\n:::\n::: {.column style=\"background-color:  #f5b7b1\"}\nContent is right.\n:::\n::::\n\n\nContent in left column.\n\nContent in right column.\n\n\n\nThis is an example of nested columns.\n:::: {.columns}\n\n::: {.column style=\"background-color: aliceblue\"}\nContent in left column.\n:::\n\n::: {.column}\nContent in right column.\n\n:::: {.columns}\n::: {.column style=\"background-color: #d0ece7\"}\nNested left.\n:::\n::: {.column style=\"background-color: #f2d7d5\"}\nNested right.\n:::\n::::\n\n:::\n\n::::\n\n\nContent in left column.\n\nContent in right column.\n\n\nNested left.\n\nNested right.\n\n\n\n\n\n\n12.6 Outer columns\nExtending content outside the body container.\n::: {.column-body style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-body\n:::\n\n::: {.column-body-outset style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-body-outset\n:::\n\n::: {.column-page-inset style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-page-inset\n:::\n\n::: {.column-page style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-page\n:::\n\n::: {.column-screen-inset style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-screen-inset\n:::\n\n::: {.column-screen style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-screen\n:::\n\n::: {.column-body-outset-right style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-body-outset-right\n:::\n\n::: {.column-page-inset-right style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-page-inset-right\n:::\n\n::: {.column-page-right style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-page-right\n:::\n\n::: {.column-screen-inset-right style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-screen-inset-right\n:::\n\n::: {.column-screen-right style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-screen-right\n:::\n\n::: {.column-body-outset-left style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-body-outset-left\n:::\n\n::: {.column-page-inset-left style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-page-inset-left\n:::\n\n::: {.column-page-left style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-page-left\n:::\n\n::: {.column-screen-inset-left style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-screen-inset-left\n:::\n\n::: {.column-screen-left style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-screen-left\n:::\n\n::: {.column-margin style=\"background-color: lightgray; margin-bottom:0.5em;\"}\n.column-margin\n:::\n\n.column-body\n\n\n.column-body-outset\n\n\n.column-page-inset\n\n\n.column-page\n\n\n.column-screen-inset\n\n\n.column-screen\n\n\n.column-body-outset-right\n\n\n.column-page-inset-right\n\n\n.column-page-right\n\n\n.column-screen-inset-right\n\n\n.column-screen-right\n\n\n.column-body-outset-left\n\n\n.column-page-inset-left\n\n\n.column-page-left\n\n\n.column-screen-inset-left\n\n\n.column-screen-left\n\n\n\n.column-margin\n\n\n12.7 Panel layout\n::: {.panel-tabset}\n#### Sub topic 1\n\nThis is some material for topic 1.\n\n#### Sub topic 2\n\nThis is some material for topic 2.\n\n:::\n\nSub topic 1Sub topic 2\n\n\nThis is some material for topic 1.\n\n\nThis is some material for topic 2.\n\n\n\nMore layout settings are described here and here."
  },
  {
    "objectID": "labs/demo/index.html#tables",
    "href": "labs/demo/index.html#tables",
    "title": "Demo Lab",
    "section": "13 Tables",
    "text": "13 Tables\n\n13.1 Manual\nFor simple cases, tables can be manually created in markdown.\n\n\n|speed|dist|\n|-----|----|\n|4    |   2|\n|4    |  10|\n|7    |   4|\n\n\n\n\n\nspeed\ndist\n\n\n\n\n4\n2\n\n\n4\n10\n\n\n7\n4\n\n\n\n\n\nTable caption and numbering can be added as such:\n\n\n|speed|dist|\n|-----|----|\n|4    |   2|\n|4    |  10|\n|7    |   4|\n\n: These are exciting results. {#tbl-mylabel}\n\n\n\n\n\nTable 1: These are exciting results.\n\n\n\n\n\nspeed\ndist\n\n\n\n\n4\n2\n\n\n4\n10\n\n\n7\n4\n\n\n\n\n\n\n\n\nMore information about tables.\n\n\n13.2 Margin table\nA table placed in the margin.\n::: {.column-margin}\n\n| speed | dist |\n|-------|------|\n| 4     | 2    |\n| 4     | 10   |\n| 7     | 4    |\n\n:::\n\n\n\n\n\nspeed\ndist\n\n\n\n\n4\n2\n\n\n4\n10\n\n\n7\n4\n\n\n\n\n\n13.3 kable\nSimple table using kable from R package knitr. This is the default output for quarto.\n\nlibrary(knitr)\nhead(iris)\n\n\n  \n\n\n\n\n13.3.1 Layout\n```{r}\n#| column: body-outset\n#| label: tbl-dual-table\n#| tbl-cap: \"Example\"\n#| tbl-subcap: \n#|   - \"Cars\"\n#|   - \"Pressure\"\n#| layout-ncol: 2\n\nkable(head(cars))\nkable(head(pressure))\n```\n\n\n\nTable 2: Example\n\n\n\n\n\n\n\n(a) Cars\n\n\n\n\n\nspeed\ndist\n\n\n\n\n4\n2\n\n\n4\n10\n\n\n7\n4\n\n\n7\n22\n\n\n8\n16\n\n\n9\n10\n\n\n\n\n\n\n\n\n\n(b) Pressure\n\n\n\n\n\ntemperature\npressure\n\n\n\n\n0\n0.0002\n\n\n20\n0.0012\n\n\n40\n0.0060\n\n\n60\n0.0300\n\n\n80\n0.0900\n\n\n100\n0.2700\n\n\n\n\n\n\n\n\n\n\n\n\n\n13.3.2 Cross referencing\nImages and tables can be automatically numbered by using label attribute. Image label must start with fig- and tables with tbl-. Tables and images can also be cross-referenced when using the label attribute. For example, the table above can be referenced like @tbl-dual-table which renders as Table 2.\n\n\n13.3.3 Margin table\n```{r}\n#| fig-caption: This table is in the margin.\n#| column: margin\n\nhead(cars)\n```\n\n\n\n\n  \n\n\n\n\n\n13.4 gt\nTables using the gt package. A structured approach to creating tables using grammar of tables with extensive customization options.\n\nlibrary(gt)\n\niris %&gt;%\n    group_by(Species) %&gt;%\n    slice(1:4) %&gt;%\n    gt() %&gt;%\n    cols_label(\n      Sepal.Length = \"Sepal Length\", Sepal.Width = \"Sepal Width\",\n      Petal.Length = \"Petal Length\", Petal.Width = \"Petal Width\"\n    ) %&gt;%\n    tab_source_note(\n        source_note = md(\"Source: Iris data. Anderson, 1936; Fisher, 1936)\")\n    )\n\n\n\n\n\n\n\nSepal Length\nSepal Width\nPetal Length\nPetal Width\n\n\n\n\nsetosa\n\n\n5.1\n3.5\n1.4\n0.2\n\n\n4.9\n3.0\n1.4\n0.2\n\n\n4.7\n3.2\n1.3\n0.2\n\n\n4.6\n3.1\n1.5\n0.2\n\n\nversicolor\n\n\n7.0\n3.2\n4.7\n1.4\n\n\n6.4\n3.2\n4.5\n1.5\n\n\n6.9\n3.1\n4.9\n1.5\n\n\n5.5\n2.3\n4.0\n1.3\n\n\nvirginica\n\n\n6.3\n3.3\n6.0\n2.5\n\n\n5.8\n2.7\n5.1\n1.9\n\n\n7.1\n3.0\n5.9\n2.1\n\n\n6.3\n2.9\n5.6\n1.8\n\n\n\nSource: Iris data. Anderson, 1936; Fisher, 1936)\n\n\n\n\n\n\n\n\n\n\n13.5 htmlTable\nMarkdown tables can be enhanced using the R package htmlTable.\n\nlibrary(htmlTable)\n\niris1 &lt;- iris[c(1:4,51:53,105:108),]\nhtmlTable(iris1, rgroup=unique(iris1$Species), n.rgroup=rle(as.character(iris1$Species))$lengths)\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\nsetosa\n\n\n  1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n  2\n4.9\n3\n1.4\n0.2\nsetosa\n\n\n  3\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n  4\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\nversicolor\n\n\n  51\n7\n3.2\n4.7\n1.4\nversicolor\n\n\n  52\n6.4\n3.2\n4.5\n1.5\nversicolor\n\n\n  53\n6.9\n3.1\n4.9\n1.5\nversicolor\n\n\nvirginica\n\n\n  105\n6.5\n3\n5.8\n2.2\nvirginica\n\n\n  106\n7.6\n3\n6.6\n2.1\nvirginica\n\n\n  107\n4.9\n2.5\n4.5\n1.7\nvirginica\n\n\n  108\n7.3\n2.9\n6.3\n1.8\nvirginica\n\n\n\n\n\n\n\n13.6 kableExtra\nMore advanced table using kableExtra and formattable.\n\nlibrary(kableExtra)\n\niris[c(1:4,51:53,105:108),] %&gt;%\n  mutate(Sepal.Length=color_bar(\"lightsteelblue\")(Sepal.Length)) %&gt;%\n  mutate(Sepal.Width=color_tile(\"white\",\"orange\")(Sepal.Width)) %&gt;%\n  mutate(Species=cell_spec(Species,\"html\",color=\"white\",bold=T,\n    background=c(\"#8dd3c7\",\"#fb8072\",\"#bebada\")[factor(.$Species)])) %&gt;%\n  kable(\"html\",escape=F) %&gt;%\n  kable_styling(bootstrap_options=c(\"striped\",\"hover\",\"responsive\"),\n                full_width=F,position=\"left\") %&gt;%\n  column_spec(5,width=\"3cm\")\n\n\n\nTable using kableextra.\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n3\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n51\n7.0\n3.2\n4.7\n1.4\nversicolor\n\n\n52\n6.4\n3.2\n4.5\n1.5\nversicolor\n\n\n53\n6.9\n3.1\n4.9\n1.5\nversicolor\n\n\n105\n6.5\n3.0\n5.8\n2.2\nvirginica\n\n\n106\n7.6\n3.0\n6.6\n2.1\nvirginica\n\n\n107\n4.9\n2.5\n4.5\n1.7\nvirginica\n\n\n108\n7.3\n2.9\n6.3\n1.8\nvirginica\n\n\n\n\n\n\n\n\n\n\n13.7 DT\nInteractive table using R package DT.\n\nlibrary(DT)\n\niris %&gt;%\n  slice(1:15) %&gt;%\n  datatable(options=list(pageLength=7))\n\n\n\n\n\n\n\n13.8 reactable\nAdvanced interactive tables with reactable.\n\nlibrary(reactable)\n\nreactable(iris[sample(1:150,10),],\n  columns = list(\n    Sepal.Length = colDef(name = \"Sepal Length\"),\n    Sepal.Width = colDef(name = \"Sepal Width\"),\n    Petal.Width = colDef(name = \"Petal Width\"),\n    Petal.Width = colDef(name = \"Petal Width\")\n  ),\n  striped = TRUE,\n  highlight = TRUE,\n  filterable = TRUE\n)\n\n\n\n\n\nreactable creation can be simplified as well as enhanced by using reactablefmtr."
  },
  {
    "objectID": "labs/demo/index.html#static-plots",
    "href": "labs/demo/index.html#static-plots",
    "title": "Demo Lab",
    "section": "14 Static plots",
    "text": "14 Static plots\n\n14.1 Base plot\n\nPlots using base R are widely used and may be good enough for most situations.\nBut they lack a consistent coding framework.\n\n\n{\n  plot(x=iris$Sepal.Length,y=iris$Sepal.Width,\n      col=c(\"coral\",\"steelblue\",\"forestgreen\")[iris$Species],\n      xlab=\"Sepal Length\",ylab=\"Sepal Width\",pch=19)\n\n  legend(x=7,y=4.47,legend=c(\"setosa\",\"versicolor\",\"virginica\"),\n        col=c(\"coral\",\"steelblue\",\"forestgreen\"),pch=19)\n}\n\n\n\n\n\n\n\nFigure 2: Static plot using base plot.\n\n\n\n\n\n\n14.1.1 Multiple plots\n```{r}\n#| column: screen-inset-shaded\n#| layout-nrow: 1\n#| fig-cap:\n#|   - \"Scatterplot of speed vs distance\"\n#|   - \"Pairwise scatterplot of all variables\"\n#|   - \"Scatterplot of temperature vs pressure\"\n\nplot(cars)\nplot(iris)\nplot(pressure)\n```\n\n\n\n\n\n\n\n\n\nScatterplot of speed vs distance\n\n\n\n\n\n\n\nPairwise scatterplot of all variables\n\n\n\n\n\n\n\nScatterplot of temperature vs pressure\n\n\n\n\n\n\n\n14.1.2 Margin plot\n```{{r}}\n#| column: margin\n\nplot(cars)\n```\n\nplot(cars)\n\n\n\n\n\n\n\n\n\n\n\n14.2 ggplot2\nR package ggplot2 is one of the most versatile and complete plotting solutions.\n\nlibrary(ggplot2)\n\niris %&gt;%\n  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+\n  geom_point(size=2)+\n  labs(x=\"Sepal Length\",y=\"Sepal Width\")+\n  theme_report()\n\n\n\n\nStatic plot using ggplot2."
  },
  {
    "objectID": "labs/demo/index.html#interactive-plots",
    "href": "labs/demo/index.html#interactive-plots",
    "title": "Demo Lab",
    "section": "15 Interactive plots",
    "text": "15 Interactive plots\n\n15.1 highcharter\nR package highcharter is a wrapper around javascript library highcharts.\n\nlibrary(highcharter)\n\nh &lt;- iris %&gt;%\n  hchart(.,\"scatter\",hcaes(x=\"Sepal.Length\",y=\"Sepal.Width\",group=\"Species\")) %&gt;%\n  hc_xAxis(title=list(text=\"Sepal Length\"),crosshair=TRUE) %&gt;%\n  hc_yAxis(title=list(text=\"Sepal Width\"),crosshair=TRUE) %&gt;%\n  hc_chart(zoomType=\"xy\",inverted=FALSE) %&gt;%\n  hc_legend(verticalAlign=\"top\",align=\"right\") %&gt;%\n  hc_size(height=400)\n\nhtmltools::tagList(list(h))\n\n\n\nInteractive scatterplot using highcharter.\n\n\n\n\n15.2 plotly\nR package plotly provides R binding around javascript plotting library plotly.\n\nlibrary(plotly)\n\np &lt;- iris %&gt;%\n  plot_ly(x=~Sepal.Length,y=~Sepal.Width,color=~Species,width=500,height=400) %&gt;%\n  add_markers()\np\n\n\n\nInteractive scatterplot using plotly.\n\n\n\n\n15.3 ggplotly\nplotly also has a function called ggplotly which converts a static ggplot2 object into an interactive plot.\n\nlibrary(plotly)\n\np &lt;- iris %&gt;%\n  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+\n  geom_point()+\n  labs(x=\"Sepal Length\",y=\"Sepal Width\")+\n  theme_bw(base_size=12)\n\nggplotly(p,width=500,height=400)\n\n\n\nInteractive scatterplot using ggplotly.\n\n\n\n\n15.4 ggiraph\nggiraph is also an R package that can be used to convert a static ggplot2 object into an interactive plot.\n\nlibrary(ggiraph)\n\np &lt;- ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,colour=Species))+\n      geom_point_interactive(aes(tooltip=paste0(\"&lt;b&gt;Petal Length:&lt;/b&gt; \",Petal.Length,\"\\n&lt;b&gt;Sepal Length: &lt;/b&gt;\",Sepal.Length,\"\\n&lt;b&gt;Species: &lt;/b&gt;\",Species)),size=2)+\n  theme_bw()\n\ntooltip_css &lt;- \"background-color:#e7eef3;font-family:Roboto;padding:10px;border-style:solid;border-width:2px;border-color:#125687;border-radius:5px;\"\n\nggiraph(code=print(p),hover_css=\"cursor:pointer;stroke:black;fill-opacity:0.3\",zoom_max=5,tooltip_extra_css=tooltip_css,tooltip_opacity=0.9)\n\n\n\nInteractive scatterplot using ggiraph.\n\n\n\n\n15.5 dygraphs\nR package dygraphs provides R bindings for javascript library dygraphs for time series data.\n\nlibrary(dygraphs)\n\nlungDeaths &lt;- cbind(ldeaths, mdeaths, fdeaths)\ndygraph(lungDeaths,main=\"Deaths from Lung Disease (UK)\") %&gt;%\n  dyOptions(colors=c(\"#66C2A5\",\"#FC8D62\",\"#8DA0CB\"))\n\n\n\nInteractive time series plot using dygraph.\n\n\n\n\n15.6 Network graph\nR package networkD3 allows the use of interactive network graphs from the D3.js javascript library.\n\nlibrary(networkD3)\n\ndata(MisLinks,MisNodes)\nforceNetwork(Links=MisLinks,Nodes=MisNodes,Source=\"source\",\n             Target=\"target\",Value=\"value\",NodeID=\"name\",\n             Group=\"group\",opacity=0.4)\n\n\n\nInteractive network plot.\n\n\n\n\n15.7 leaflet\nR package leaflet provides R bindings for javascript mapping library; leafletjs.\n\nlibrary(leaflet)\n\nleaflet(height=500,width=700) %&gt;%\n  addTiles(urlTemplate='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png') %&gt;%\n  #addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;%\n  addMarkers(lat=57.639327,lng=18.288534,popup=\"RaukR\") %&gt;%\n  setView(lat=57.639327,lng=18.288534,zoom=15)\n\n\n\nInteractive map using leaflet.\n\n\n\n\n15.8 crosstalk\nR package crosstalk allows crosstalk enabled plotting libraries to be linked. Through the shared ‘key’ variable, data points can be manipulated simultaneously on two independent plots.\n\nlibrary(crosstalk)\n\nshared_quakes &lt;- SharedData$new(quakes[sample(nrow(quakes), 100),])\nlf &lt;- leaflet(shared_quakes,height=300) %&gt;%\n        addTiles(urlTemplate='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png') %&gt;%\n        addMarkers()\npy &lt;- plot_ly(shared_quakes,x=~depth,y=~mag,size=~stations,height=300) %&gt;%\n        add_markers()\n\nhtmltools::div(lf,py)\n\n\n\n\n\n\n\nLinking independent plots using crosstalk."
  },
  {
    "objectID": "labs/demo/index.html#observablejs",
    "href": "labs/demo/index.html#observablejs",
    "title": "Demo Lab",
    "section": "16 ObservableJS",
    "text": "16 ObservableJS\nQuarto supports ObservableJS for interactive visualisations in the browser.\nPass data from R to OJS\n\nirism &lt;- iris\ncolnames(irism) &lt;- gsub(\"[.]\",\"_\",tolower(colnames(irism)))\nojs_define(ojsd = irism)\n\n\nojsdata = transpose(ojsd)\n\n\n\n\n\n\nDisplay as a table\n\nviewof filtered_table = Inputs.table(ojsdata)\n\n\n\n\n\n\nDefine inputs\n\nviewof x = Inputs.select(Object.keys(ojsdata[0]), {value: \"sepal_length\", multiple: false, label: \"X axis\"})\n\n\n\n\n\n\n\nviewof y = Inputs.select(Object.keys(ojsdata[0]), {value: \"sepal_width\", multiple: false, label: \"Y axis\"})\n\n\n\n\n\n\nDisplay plot\n\nPlot.plot({\n  marks: [\n    Plot.dot(ojsdata, {\n      x: x,\n      y: y,\n      fill: \"species\",\n      title: (d) =&gt;\n        `${d.species} \\n Petal length: ${d.petal_length} \\n Sepal length: ${d.sepal_length}`\n    })\n  ],\n  grid: true\n})\n\n\n\n\n\n\nObservableJS in quarto documentation."
  },
  {
    "objectID": "labs/demo/index.html#general-tips",
    "href": "labs/demo/index.html#general-tips",
    "title": "Demo Lab",
    "section": "17 General tips",
    "text": "17 General tips\n\nUse level 2 heading as the highest level\n\n## Section A\n\nAdd custom css under YAML if needed css: \"my-theme.css\"\nCheck out the Quarto website\n\n\n\n\nThis is a caption\nCaption for figure 1\nCaption for figure 2\nThis is a caption\nFigure 2: Static plot using base plot.\nScatterplot of speed vs distance\nPairwise scatterplot of all variables\nScatterplot of temperature vs pressure\nStatic plot using ggplot2."
  },
  {
    "objectID": "labs/demo/index.html#footnotes",
    "href": "labs/demo/index.html#footnotes",
    "title": "Demo Lab",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThat reference refers to this footnote.↩︎"
  },
  {
    "objectID": "labs/git/index.html",
    "href": "labs/git/index.html",
    "title": "git and R",
    "section": "",
    "text": "Note\n\n\n\nThis is the lab on using git and GitHub with R. It will take you through some basic steps to start using git with your R code and how to work with others on the same code. When you are comfortable there are some more exercises showing good to know functionalities of git and GitHub.\nThis lab assumes that you have a GitHub account, commandline git and correct git configurations. If you do not and need help, please contact a TA."
  },
  {
    "objectID": "labs/git/index.html#install-packages",
    "href": "labs/git/index.html#install-packages",
    "title": "git and R",
    "section": "1 Install packages",
    "text": "1 Install packages\nThe first thing we want to do is install the package required for the exercise.\n\ninstall.packages(\"usethis\")"
  },
  {
    "objectID": "labs/git/index.html#working-with-git-and-github-starting-from-rstudio",
    "href": "labs/git/index.html#working-with-git-and-github-starting-from-rstudio",
    "title": "git and R",
    "section": "2 Working with git and GitHub starting from RStudio",
    "text": "2 Working with git and GitHub starting from RStudio\nLet’s go through the common situation of starting a new project and connecting it to git and GitHub. Let’s create a mental model for this: Hypothetically, you have just been asked to perform some data analysis, produce some plots, and now it is time to start!\n\nIn RStudio, create a new project in a new directory. You can initialize it as a git repository upon creation or you can do that after using usethis::use_git().\nConnect it to GitHub using usethis::use_github().\nCreate an R script in your project and write some code. You are free to do whatever you want here. Write a function, create a plot, use a public dataset. Go crazy!\nUse the RStudio git pane to commit your code including a commit message.\n\n\n\npush the changes to your GitHub repository. Then go to GitHub and check that you can see your changes there. In your mental model, this is you sharing your code with your collaborators or users.\nNow introduce some changes to your script from GitHub and commit them. At this point, your GitHub repository is one commit ahead of your local repository. In the mental model, this can be your collaborators making changes in their local repository and pushing it to your shared GitHub project, or a user suggesting a change, that you accept, in your publicly available R-package, used by millions. For now, lets ignore thinking about who has access to commit to your repository, but do not worry, there are ways to safeguard this. Your code can be open on GitHub without other people being able to ruin it so you have to constantly go back to a previous unruined commit!\nTo transfer the changes in the GitHub repository to your local repository, go back to RStudio and use the blue arrow in the git pane to pull the changes. In the mental model this is you updating your code with the code contributed by your collaborators. Notice here that if if you had in the meantime made some changes to the local repository in the same R script and position as you had on GitHub, there would be what is called a “merge conflict” when you tried to pull. We will get to those later.\nLet’s look at the diff operation. Make some changes in your local repository R script again, both removing and adding something, then press the diff button in the git pane. This should bring up a new window that is similar to the image below. As you can see it clearly shows you what has been added and what has been removed, what the difference is since your last commit.\n\n\n\nGo ahead and commit the changes you made. No need to push them to GitHub. Now lets go into our mental model and say that you did not like those changes. You have done something you regret, or broken something, and you want to go back. One of the main points of version control after all is the ability to go back. To revert to the last commit state you can use the Revert.. button in RStudios git pane, it is in a dropdown from the cogwheel. Go ahead and test it!\nIf you want to go further back to an older commit you will have to use the terminal pane in RStudio. In essence, you are using git from the terminal in your local repository. Here are the commands:\n\n\ngit reset HEAD~1\ngit restore &lt;our R script&gt;\n\ngit reset HEAD~n steps you back in your commit history n commits. In this case HEAD~1 means go one commit back. Look at your R script, are the changes you made still there? They should be. You have gone back one commit, not removed the changes you made during that commit. But now that we are on this commit you can git restore your R script file to take it back to the way it was at the start of current commit. Go ahead and try it out and make sure it works as you would expect it to!\n\nNow you should have all the tools you need to work with git in a basic capacity, starting from a new project on your device. Notice that you do not need to start from a new project, you can also take a folder with lots of work you have already performed and make it an R project and initialize git in it. It will of course only track changes from that point, not what you have done previously, but it is still a good idea!\nThe point here being that starting from scratch or starting from a bunch of work that you have already done, or starting by creating a GitHub repository and pulling that into RStudio using File &gt; New Project &gt; Version Control &gt; Git , there are tools for any situation and it is not too late to start working reproducibly, collaboratively and with backups using git!"
  },
  {
    "objectID": "labs/git/index.html#additional-topics-and-exercises",
    "href": "labs/git/index.html#additional-topics-and-exercises",
    "title": "git and R",
    "section": "3 Additional topics and exercises",
    "text": "3 Additional topics and exercises\n\n3.1 Branches\nBranches in git are a way to create a separate version controlled instance of your repository. Think of your git changes as a tree trunk, growing as you add and commit, but always possible to reset and go back down to a lower point on the trunk. Then branching is the equivalent of a branch shooting out at a certain point on that trunk with the possibility to grow as you develop that branch. This permits you or someone else to work on a separate idea at the same time as you continue to develop the trunk. Say for example that you have a situation where there is a stable release of your R package and you do not want to push changes to this. So you create a branch called “development” and when you are happy with it you merge that branch back into the trunk!\n\nUseful commands for branches from terminal:\n\ngit branch &lt;name of branch&gt; : Create a new branch.\ngit branch : See list of branches. Current branch marked with *.\ngit checkout &lt;name of branch&gt; : Move to branch.\ngit merge &lt;name of branch&gt; : Merge the branch you are currently on with the branch named in command.\n\nHowever, you can work with branches from RStudio as well! To do this you can use the purpleish button in git pane that looks like two squares connected with a diamond. Once you have created a new branch you can switch branches to the right of the branch button in the git pane.\nExercise:\n\nEither create a new git version controlled R project in Rstudio, or continue from your last one.\nCreate a new branch using RStudio. Make sure you are on that branch afterwards.\nIntroduce some changes in your R script. commit them. In our mental model, this is you developing something experimental until you are satisfied with it.\nSwitch back to the main branch.\nTo merge the new branch with our main branch we will use the terminal again. In the RStudio terminal perform the merge. In the mental model this you being satisfied with the development branch and calling it a stable release, a part of the main body of code!\n\nCongratulations, you now know how to create a branch, switch between branches, and merge the branch back into main.\n\n\n3.2 Merge conflicts\nEarlier we thought about the issue of changes being introduces in the same file and position in your local copy of a repository and in the GitHub version of the repository at the same time. A so called “merge conflict”. This can also happen if you are working on two branches, introduce changes in the same places, and then try to merge! But you should try not to worry too much about merge conflicts, they can be solved if you know what you are doing.\n\nIntroduce changes in the same part of your code on your main and new branch. commit the changes.\nUse git merge &lt;name of branch&gt; from the main branch. This should result in the merge conflict.\n\nThe output you should get from the merge is similar to:\n\nAuto-merging file.R\nCONFLICT (content): Merge conflict in file.R\nAutomatic merge failed; fix conflicts and then commit the result.\n\nYou can also use git status from terminal to check which file is modified and why.\nOnce a merge conflict occurs the file affected is modified to reflect the conflicting areas. It can look something like this:\n\n#Hello world!\"\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\na &lt;- 2\n\nb &lt;- 2\n=======\na &lt;- 3\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; test\n\nIn this instance it is telling us that in branch named “test” a &lt;- 3but on our main branch a &lt;- 2 and b &lt;- 2 has also been added. To pick which one you want to go with simply delete the &gt;&gt;,&lt;&lt;,== notifiers and whichever rows of code that you do not want. Once you have done this, finalize the merge by commiting the changed files.\n\nFix your merge conflict and finalize the merge.\n\nGood job! You know know how to resolve merge conflicts!\n\n\n3.3 Forks and pull requests\nForking a repository on GitHub means creating a copy of the repository on your GitHub user. This can be very useful if you want to make some changes to a repository that you do not have push access to, for example. It is also a great way collaborate because it adds more backups of the repository and because of “pull requests”, which are a way of implementing your local changes to the source repository where the owner of the repository has the power to review and choose whether to accept them or not.\nFor example, in this RaukR course we have a repository for all the teaching materials that all teachers have forked, made changes to and then submitted a pull request back to the source repository.\nTo fork a repository you can either use the GitHub website of the repository you want to fork, or you can use usethis. If you are using RStudio it will also automatically create a R project for the local repository.\n\nusethis::create_from_github(\n  \"https://github.com/&lt;user name of owner&gt;/&lt;repository name&gt;\",\n  destdir = \"~/path/to/place/repo/\",\n  fork = TRUE)\n\nThis command does a lot of things, from happygitwithr\n\n\nForks the source repo on GitHub.\nClones your fork to a new local repo (and RStudio Project). This configures your fork as the origin remote.\nConfigures the source repo as the upstream remote.\nSets the upstream tracking branch for main (or whatever the default branch is) to upstream/main.\nOpens a new RStudio instance in the new local repo (and RStudio Project).\n\n\nWe have not covered “upstream” and “remote” in our git vocabulary yet. Basically remotes are connections for your repository, and being upstream means being a repository closer to the source than your repository, which is downstream (as it is a fork). So the sentence “Configures the source repo as the upstream remote” translates to adding a connection specifying that the source repository is where your repository came from. This connection is used to update your fork with any future changes that occur in the source repository.\n\nFork the repository https://github.com/Sebastian-D/testgit using one of the methods described. Also clone a local copy of it. Make sure you can find your fork on GitHub.\n\nNow we are ready to make some changes to the code in our local repository. But before this we should create a new branch for the pull request. For this we can use usethis::pr_init(branch = \"branchName\"). This will also automatically switch to the branch.\n\nCreate a branch then make some changes to the repository. In the mental model you are implementing some feature or fixing some bug.\nadd and commit the changes with a commit message.\n\nTo submit a pull request you can use pr_push(). This should open a browser where you can submit the pull request. If the maintainer of the source repository wants to modify the pull request he can either do this himself or suggest some changes to you, whereupon you make the changes the run pr_push() again.\n\nSubmit the pull request! Go ahead and view it on GitHub.\n\nThere is a whole family of pr-* functions for both the person submitting the pull the request and the maintainer of the source repository that will review and accept/decline the pull request. I really recommend you read here if you think this is of interest!\nGood job completing the exercises! git and GitHub are big topics, but knowing a little gets you a long way and then you discover the rest when you need it!"
  },
  {
    "objectID": "labs/ml/index.html",
    "href": "labs/ml/index.html",
    "title": "Mathematical statistics and machine learning in R",
    "section": "",
    "text": "Note\n\n\n\nIn this lab we will learn to code an Artificial Neural Network (ANN) in R both from scratch and using Keras / Tensorflow library. For simplicity, we consider a problem of linearly separable two classes of data points.\nLoad the keras library and install keras and tensorflow in the same environment as R.\nlibrary(reticulate)\nlibrary(keras)\n\n# reticulate::install_python()\n# keras::install_keras()\n# OR\n# keras::install_keras(method=\"conda\", envname=\"keras\")\n# OR\n# conda_create(\"keras\", packages=c(\"keras\", \"tensorflow\"), channel=\"conda-forge\", python_version=\"3.9\")\nuse_condaenv(\"keras\")"
  },
  {
    "objectID": "labs/ml/index.html#problem-formulation",
    "href": "labs/ml/index.html#problem-formulation",
    "title": "Mathematical statistics and machine learning in R",
    "section": "1 Problem formulation",
    "text": "1 Problem formulation\nLet us consider a simple problem of only two features, i.e. \\(X_1\\) and \\(X_2\\), and only four statistical observations (data points) that belong to two classes: circles and crosses. The four data points are schematically depicted below using \\(X_1\\) vs. \\(X_2\\) coordinate system. Obviously, the circles and crosses are separable with a linear decision boundary, i.e. hyperplane.\n\nLet us implement the simplest possible feedforward / dense Artificial Neural Network (ANN) without hidden layers using Keras / Tensorflow library. Later, we will reproduce the results from Keras using from scratch coding ANN in R.\n\nThe architecture of the simplest ANN is displayed above, and includes two input nodes (two feature vectors \\(X_1\\) and \\(X_2\\)) and one output node, where the two classes are coded in the following way: circles are codded as 0 and crosses as 1. The weights \\(w_1\\) and \\(w_2\\) of the edges of the ANN graph are the fitting parameters of the model."
  },
  {
    "objectID": "labs/ml/index.html#keras-solution",
    "href": "labs/ml/index.html#keras-solution",
    "title": "Mathematical statistics and machine learning in R",
    "section": "2 Keras solution",
    "text": "2 Keras solution\nLet us first define the X matrix of the feature vectors and the y vector of the class labels:\n\nX &lt;- matrix(c(c(0, 0, 1, 1), c(0, 1, 0, 1)), ncol = 2)\nX\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    1\n[3,]    1    0\n[4,]    1    1\n\n\n\ny &lt;- c(0, 0, 1, 1)\ny\n\n[1] 0 0 1 1\n\n\nNow, let us define a sequential Keras model of the ANN corresponding to the scheme above and print the summary of the model. Here, we are going to use Sigmoid activation function on the output node because we have a binary classification problem.\n\nlibrary(keras)\nmodel &lt;- keras_model_sequential() \nmodel &lt;- model %&gt;% \n  layer_dense(units = 1, activation = 'sigmoid', input_shape = c(2))\nsummary(model)\n\nModel: \"sequential\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n dense (Dense)                      (None, 1)                       3           \n================================================================================\nTotal params: 3 (12.00 Byte)\nTrainable params: 3 (12.00 Byte)\nNon-trainable params: 0 (0.00 Byte)\n________________________________________________________________________________\n\n\nNext, we are going to compile and fit the Keras ANN model. Again, for simplicity, we are going to use Mean Squared Error (MSE) loss function, and Stochastic Gradient Descent (SGD) as an optimization algorithm (with a high learning rate 0.1). The training will be for 3000 epochs, it should be enough for MSE to reach zero.\n\nmodel %&gt;% \n  compile(loss = 'mean_squared_error',optimizer = optimizer_sgd(lr = 0.1))\nhistory &lt;- model %&gt;% fit(X, y, epochs = 10000)\n\n\nplot(history$metrics$loss~seq(1:length(history$metrics$loss)),\nxlab=\"Epochs\",ylab=\"Loss\",col=\"blue\",cex=0.5)\n\n\n\n\n\n\n\n\nFinally, we will make predictions on the same data set. Overfitting is not a concern here because we want to make sure that the model was capable of linearly separating the two classes of data points.\n\nmodel %&gt;% predict(X)\n\n1/1 - 0s - 37ms/epoch - 37ms/step\n          [,1]\n[1,] 0.1952571\n[2,] 0.1422167\n[3,] 0.8899398\n[4,] 0.8467497\n\n\n\nmodel %&gt;% predict(X) %&gt;% `&gt;`(0.5) %&gt;% k_cast(\"int32\")\n\n1/1 - 0s - 10ms/epoch - 10ms/step\ntf.Tensor(\n[[0]\n [0]\n [1]\n [1]], shape=(4, 1), dtype=int32)\n\n\nIt looks like the Keras model successfully can assign correct labels to the four data points."
  },
  {
    "objectID": "labs/ml/index.html#coding-ann-from-scratch-in-r",
    "href": "labs/ml/index.html#coding-ann-from-scratch-in-r",
    "title": "Mathematical statistics and machine learning in R",
    "section": "3 Coding ANN from scratch in R",
    "text": "3 Coding ANN from scratch in R\nNow we are going to implement the same ANN architecture from scratch in R. This will allow us to better understand the concepts like learning rate, gradient descent as well as to get an intuition of forward- and back-propagation. First of all, let us denote the sigmoid activation function on the output node as\n\\[\\phi(s)=\\frac{1}{1+\\exp^{\\displaystyle -s}}\\]\nThe beauty of this function is that it has a simple derivative that is expressed through the sigmoid function itself:\n\\[\\phi^\\prime(s)=\\phi(s)\\left(1-\\phi(s)\\right)\\]\nNext, the loss MSE function, i.e. the squared difference between the prediction y and the truth d, is given by the following simple equation:\n\\[E(w_1,w_2)=\\frac{1}{2}\\sum_{i=1}^N\\left(d_i-y_i(w_1,w_2)\\right)^2; \\,\\,\\,\\,\\, y(w_1,w_2)=\\phi(w_1x_1+w_2x_2)\\]\nFinally, the gradient descent update rule can be written as follows:\n\\[w_{1,2}=w_{1,2}-\\mu\\frac{\\partial E}{\\partial w_{1,2}}\\]\n\\[\\frac{\\partial E}{\\partial w_{1,2}}=-(d-y)*y*(1-y)*x_{1,2}\\]\nwhere \\(\\mu\\) is a learning rate. Let us put it all together in a simple for-loop that updates the fitting parameters \\(w_1\\) and \\(w_2\\) via minimizing the mean squared error:\n\nphi &lt;- function(x){return(1/(1 + exp(-x)))}\n\nX &lt;- matrix(c(c(0, 0, 1, 1), c(0, 1, 0, 1)), ncol = 2)\nd &lt;- matrix(c(0, 0, 1, 1), ncol = 1)\n\nmu &lt;- 0.1; N_epochs &lt;- 10000; E &lt;- vector()\nw &lt;- matrix(c(0.1, 0.5), ncol = 1) #initialization of weights w1 and w2\nfor(epochs in 1:N_epochs)\n{\n  #Forward propagation\n  y &lt;- phi(X %*% w - 3) #here for simplicity we use fixed bias = -3\n  \n  #Backward propagation\n  E &lt;- append(E, sum((d-y)^2))\n  dE_dw &lt;- (d-y) * y * (1-y)\n  w &lt;- w + mu * (t(X) %*% dE_dw)\n}\nplot(E ~ seq(1:N_epochs), cex = 0.5, xlab = \"Epochs\", ylab = \"Error\", col=\"red\")\n\n\n\n\n\n\n\n\nThe mean squared error seems to be decreasing and reaching zero. Let us display the final y vector of predicted labels, it should be equal to the d vector of true labels.\n\ny\n\n           [,1]\n[1,] 0.04742587\n[2,] 0.03166204\n[3,] 0.98444378\n[4,] 0.97650411\n\n\nIndeed, the predicted values of labels are very close to the true ones and similar to the ones obtained from Keras solution. Well done, we have successfully implemented an ANN from scratch in R!"
  },
  {
    "objectID": "labs/packages/index.html",
    "href": "labs/packages/index.html",
    "title": "R packages",
    "section": "",
    "text": "Note\n\n\n\nThis is the R packages exercise from RaukR. It will take you through creating an R package with code, data, documentation, creating or generating a correct DESCRIPTION and NAMESPACE, importing packages, checking your package for warnings. There are also some advanced exercises you can do if you have time.\nThe exercise will show how to do things from R console, but many of the functionality are so common they are built into Rstudio. Because of this I have included a cheatsheet which can be useful if you are developing packages in Rstudio in the future.\nIt is fine if you do not have time for the whole thing, as all components may not be important to you. You can always come back later :)."
  },
  {
    "objectID": "labs/packages/index.html#cheatsheet",
    "href": "labs/packages/index.html#cheatsheet",
    "title": "R packages",
    "section": "1 Cheatsheet",
    "text": "1 Cheatsheet\n\nCheatsheet. Note; not all commands are functionally equivalent to Rstudio commands.\n\n\n\n\n\n\n\n\ncommand\ndescription\nRstudio_windows\nRstudio_mac\n\n\n\n\nusethis::create_package()\nCreate a package backbone.\nFile &gt; New Project &gt; New Directory &gt; R package\nFile &gt; New Project &gt; New Directory &gt; R package\n\n\nusethis::use_r()\nCreate or open a file in R/ for editing.\nNA\nNA\n\n\ndevtools::load_all()\nSimulates building, installing and attaching a development package.\nCTRL+SHIFT+L\nCMD+SHIFT+L\n\n\nusethis::use_data()\nCreates a .rda file in data/ containing the object. The file has the same name as the object.\nNA\nNA\n\n\ndevtools::document()\nCreate .Rd files from roxygen2 function comments. Generate NAMESPACE.\nCTRL+SHIFT+D\nCMD+SHIFT+D\n\n\ndevtools::use_package()\nAdd package to Imports field of DESCRIPTION.\nNA\nNA\n\n\ndevtools::check()\nRun R CMD check on your development package from within R. Also performs bundling and other checks.\nNA\nNA"
  },
  {
    "objectID": "labs/packages/index.html#installing-dependencies",
    "href": "labs/packages/index.html#installing-dependencies",
    "title": "R packages",
    "section": "2 Installing dependencies",
    "text": "2 Installing dependencies\nThe first thing we want to do is install the dependencies required for the exercise.\n\ninstall.packages(c(\"devtools\",\"usethis\",\"roxygen2\", \"knitr\", \"rmarkdown\", \"reshape2\", \"Rcpp\"))\n\nIf you haven’t already, install RStudio."
  },
  {
    "objectID": "labs/packages/index.html#create-a-package-backbone",
    "href": "labs/packages/index.html#create-a-package-backbone",
    "title": "R packages",
    "section": "3 Create a package backbone",
    "text": "3 Create a package backbone\nFirst of all we will create the standard files that are required in an R package.\n\nusethis::create_package(\"path/to/your/package/packagename\")\nIf you execute this command from within Rstudio, it should open a new instance of Rstudio located within your newly created package. If you didn’t and want to work on your package in Rstudio, double click the .Rproj file or select it from Rstudio.\nTake a look at the “Files” pane of Rstudio to see what create_package() actually created for you."
  },
  {
    "objectID": "labs/packages/index.html#insert-wondrous-things",
    "href": "labs/packages/index.html#insert-wondrous-things",
    "title": "R packages",
    "section": "4 Insert wondrous things",
    "text": "4 Insert wondrous things\nNow that we have a R package backbone lets fill it with stuff!\n\n4.1 R code\nLet’s create the first function of your package. We can use the handy helper-function usethis::use_r() to create or navigate between the R files in your R/ folder. You can also just create a .R file there if you wish.\nusethis::use_r(\"trianguletter\")\nThis should create and open the file R/trianguletter.R for editing.\nFeel free to rewrite the function to perform some simple task. From adding two numbers to creating a basic plot from some input. It’s up to you!\nHere is an example that I threw together:\n\ntrianguletter &lt;- function(x) {\n  for(i in 1:x){\n    cat(rep( letters[i], times = i),\"\\n\")\n  }\n}\n\nWhen you are happy with your function, save it. To access and test your newly created function we have to attach it to make it available. But rather than bundle, install and attach we can use the function devtools::load_all() while developing the package. load_all() simulates the behavior of bundling, installing and attaching the package, without actually having to do it.\nNow test your function in the console!\n\ntrianguletter(12)\n\na \nb b \nc c c \nd d d d \ne e e e e \nf f f f f f \ng g g g g g g \nh h h h h h h h \ni i i i i i i i i \nj j j j j j j j j j \nk k k k k k k k k k k \nl l l l l l l l l l l l \n\n\nCongratulations! You have just created an R package that fulfills a function!\n\n\n4.2 Data\nLets add some data to our package, create an R object with whatever information you want. A string, a vector or a data.frame, as long as you recognize it, it doesn’t matter. First we will save it to our data/ folder using usethis::use_data().\n\n# A random object\nyour_object &lt;- c('red','green','blue')\n\n#Save to data\nusethis::use_data(your_object)\n\nThis created the data/ folder and your_object.rda inside it.\n\nNow when our package is loaded, your_object will be made available to the user. To test this, remove all objects from your working directory, and load all functions. Check that you can access the object, despite just removing it from your workspace.\n\n# Clear workspace\nrm(list=ls())\n\n# Load all functions and data from our package\ndevtools::load_all()\n\n# Check if we can access our saved object\nyour_object\n[1] \"red\"   \"green\" \"blue\"\n\nThe data in data/ folder is available to the user, needs to be documented, and is where you would store data if the purpose of your package is to distribute one or more datasets in an R friendly way. If there is some data that you don’t want to make easily accessible to the users, AKA not document, but that your functions use, you can put it in sysdata.rda. Lets create a second object. Like the last one it does not matter what it is. Use the same command as before to save the object, except this time specify that this data is intended for internal use.\n\n# Create a second object\nsecond_object &lt;- \"It works!\"\n\n# Save it to R/sysdata.rda\nusethis::use_data(second_object, internal = TRUE)\n\nTo check that this worked, clear your workspace and edit your packages function, the .R file, to include the object in some way. Load the package and see if it executes as expected.\n\n# Clear workspace\nrm(list=ls())\n\n\n# Example .R code edit\ntrianguletter &lt;- function(x) {\n  for(i in 1:x){\n    cat(rep( letters[i], times = i),\"\\n\")\n  }\n  # Check if second object can be called by our function\n  cat(second_object)\n}\n\n\n# Load all functions and data from our package\ndevtools::load_all()\n\n\n# Test the function\ntrianguletter(5)\n\na \nb b \nc c c \nd d d d \ne e e e e \nIt works!\n\n\nGreat work! You have created external and internal datasets and shown that they can be used when your package is loaded in the console and in your packages own functions!\n\n\n4.3 Documentation\nNow that we have a function and a dataset, lets use roxygen2 to create some documentation for them.\n\n4.3.1 Function documentation\nAs was discussed in the presentation, the roxygen2 documentation for a function is directly before it in so called “comment blocks”, or #'. Here is a brief refresher:\n\nComment block : #'\nTags : @tagname\n\n@param : parameter\n@example : examples\n@return : what does the function return. The value field in R documentation\n@section : create any section you want\n@export : export the function so it can be used externally\n\n\nGo ahead and create documentation for your function. Add at least a title, a description, multi-section details, the parameters, the expected return value or output, an example of how to use your function and the export tag.\n\n\n\n\n\n\nNote\n\n\n\nThe @export tag should always be last in documentation and grants the user access to the function. It is very important, if you want the user to be able to call the function. For internal functions, this may not be the case.\n\n\nAn example functional documentation:\n\n#' A right sided triangle of alphabetic letters\n#'\n#' A right sided triangle of alphabetic letters\n#'\n#' This function takes a number as input and outputs an increasing\n#'     number of alphabetic letters on top of each other, resembling\n#'     a right sided triangle.\n#' @section Warning:\n#' Not tested for numbers over 26!\n#'\n#' @param x A number.\n#' @return Outputs to console. NULL object returned.\n#' @examples\n#' trianguletter(10)\n#' @export\ntrianguletter &lt;- function(x) {\n  for(i in 1:x){\n    cat(rep( letters[i], times = i),\"\\n\")\n  }\n  # Check if second object can be called by our function\n  cat(second_object)\n}\n\nWhen you are satisfied with your documentation, build it using devtools::document(). This creates the .Rd file in man/ which is parsed by R when you request the functions documentation. Additionally, the first time you build documentation it will make some edits to your DESCRIPTION and check on your NAMESPACE.\n\n\n\n\n\n\nTip\n\n\n\nYou may have gotten a warning message that your NAMESPACE was not generated by roxygen2. This is good behavior by roxygen2, it doesn’t want to change something the user has created a certain way. In this case however, we want the NAMESPACE to be handled by roxygen2, so delete the NAMESPACE file and run devtools::document() again to have roxygen2 create it.\n\n\nGo ahead and preview your function as you would any method and make sure that it looks the way you were expecting.\n\n?trianguletter\n\n\n\n\n4.3.2 Data documentation\nData documentation is a bit different from functional documentation. Remember that you do not need to document datasets not intended for users, so don’t worry about sysdata.rda. What we want to document in this case is the data you created in man/your_object.rda, or whichever name you have given it.\nThe principle is very similar to functional documentation, but not all tags that are applicable to functions are applicable to data, and should not be used. Similarly, there are some tags that are applicable to data, but not to functions. Usually this is the information you would give a dataset:\n\nData documentation\n\nTitle\nDescription\n@format : what rows and variables are in the data?\n@source : where is the data from?\n\n\nFirst of all, lets check what the output of requesting help for your dataset is currently.\n\n?your_object\n\nAs expected, it is undocumented. Since we cannot add this information to the dataset file, your_object.rda, like we did with the functions documentation, lets create an R file in R/ called data.R and add the documentation there. The name we document has to be the same name as the dataset object you created earlier. Go ahead and document your dataset now.\n\n#' A vector with three strings\n#'\n#' A dataset containing three strings usually linked to the\n#'    colors of pixels on a screen.\n#'\n#' @format A vector with three strings:\n#' \\describe{\n#'   \\item{red}{A string, it's red.}\n#'   \\item{green}{A string, it's green. Street talk for money.}\n#'   \\item{blue}{A string, really didn't see that coming. It's blue this time!}\n#' }\n#' @source \\url{http://www.themindofsebastian.com}\n\"your_object\"\n\nOnce you are happy with your documentation, save the file and run devtools::document(). Now check the help page for your dataset again.\n\n?your_object\n\n\nWell done! You have successfully created documentation for a function and a dataset and shown that it can be queried within R.\n\n\n\n4.4 DESCRIPTION\nNow lets take a look at our DESCRIPTION file, at this point it should look similar to this:\nPackage: newpkg\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.0\nDepends: \n    R (&gt;= 2.10)\nLazyData: true\n\n\n\n\n\n\nNote\n\n\n\nThe information can look slightly different depending on how the package was created.\n\n\nLooks pretty good but some information definitely needs to be updated if you are ever going to submit this to a repository.\nUpdate the Title, Author and Description fields.\nWhen it comes to the License field, Just in case you don’t want to consider which license to give your package, why not choose one of the most common ones that were mentioned during the lecture?\n\nMIT : Free, but your license must be included in any following work.\nGPL-3 : Even more free. If someone uses your code, whatever they are doing must also be GPL compatible.\nCC0 : Totally free.\n\nOne good way of adding the license is not to just update the DESCRIPTION, but to use a function such as use_mit_license(). It not only updates your DESCRIPTION, but also adds the file LICENSE and LICENSE.md to your package, with relevant license information.\nA good place to look at the meaning of licenses is https://tldrlegal.com.\nNow that your DESCRIPTION is up to shape, we can move on to the NAMESPACE.\n\n\n4.5 NAMESPACE\nRoxygen2 made our function available to the users in our NAMESPACE and made sure that our package works well with other packages. Basically, you should almost never be editing your NAMESPACE by hand.\n\n4.5.1 Import\nFirst, lets import a function from a package and add its functionality to the function we created. This is very handy for using functions from other packages in your package and for making sure your package uses only that function when it is called, no matter the users environment.\n\nCreate a new file called R/utility.R. We won’t actually put any internal utility functions there, but this is a typical place where you would import functions from other packages.\nNext add code to import the melt function from reshape2. This is in the form @importFrom pkg function. Since this kind of documentation has to precede a function or object, we will give it the NULL object, by convention.\n\n\n#' @importFrom reshape2 melt\nNULL\n\nTo update the NAMESPACE run devtools::document().\nNow your NAMESPACE should look like this:\n# Generated by roxygen2: do not edit by hand\n\nexport(trianguletter)\nimportFrom(reshape2,melt)\nGreat! If the melt command from reshape2 is ever used in your package, it will know which one to use. But for our package to use reshape2 we first have to import it in DESCRIPTION.\nTo add the Imports field and the reshape2 information to your DESCRIPTION you can use the usethis::use_package command.\n\nusethis::use_package(\"reshape2\")\n\nWhile Imports means that if someone installs your package it will automatically install reshape2 as well, regrettably it does not mean that if reshape2 is missing when we reinstall it locally it will be downloaded and installed. Luckily we installed it at the start of the exercise.\n\n\n4.5.2 Testing the imported function\nNow that we have added melt from reshape2 lets add it to our function. You can do this any way you like, or copy usage from the example function.\nIn this example the head of iris dataset before and after melt is viewed, to see that it had an effect.\n\n#' A right sided triangle of alphabetic letters\n#'\n#' A right sided triangle of alphabetic letters\n#'\n#' This function takes a number as input and outputs an increasing\n#'     number of alphabetic letters on top of eachother, resembling\n#'     a right sided triangle.\n#' @section Warning:\n#' Not tested for numbers over 26!\n#'\n#' @param x A number.\n#' @return Outputs to console. NULL object returned.\n#' @examples\n#' trianguletter(10)\n#' @export\ntrianguletter &lt;- function(x) {\n  for(i in 1:x){\n    cat(rep( letters[i], times = i),\"\\n\")\n  }\n  # Check if second object can be called by our function\n  #cat(second_object)\n  #what iris dataset looks like\n  cat(\"before melt:\\n\")\n  print(head(iris))\n  #Use melt and see what it looks like\n  cat(\"after melt:\\n\")\n  print(head(melt(iris)))\n}\n\nUse devtools::load_all() to reload your package and it’s imports. You can check that reshape2 was also loaded with sessionInfo().\nTest your function, does the output show that it can use melt?\nNow, lets check that the NAMESPACE is doing what we want it to do, making sure that the correct melt is being used by our package. Lets define a new function, also named melt, in our global environment. That is to say we just define it from the R console.\n\nmelt &lt;- function(x) {\n   cat(\"abc\",x)}\n\nNow try your function again. Is it using the correct melt?\nIt should be!\nTry using melt(iris) in your R console, as it is used in your packages function. It should not work. This is because it is using the melt function you just defined, and it is getting in the way of using the correct function!\n\n\n\n\n\n\nNote\n\n\n\nAn alternative way of achieving the behaviour of a correct NAMESPACE is writing your code with strict package references. In our case reshape2::melt(). This way you can circumvent using roxygen2 to add import tags to NAMESPACE if you want. I recommend doing both =)."
  },
  {
    "objectID": "labs/packages/index.html#checking-your-package",
    "href": "labs/packages/index.html#checking-your-package",
    "title": "R packages",
    "section": "5 Checking your package",
    "text": "5 Checking your package\nNow that we have a pretty complete package, lets run some checks on it. You can use the standard R CMD check pkgname from your terminal, or you can use devtools::check(), which we recommend, as it performs some additional operations such as updating the documentation and bundling the package before checking.\n── R CMD check results ───────────────────────────────── newpkg 0.0.0.9000 ────\nDuration: 18.1s\n\n❯ checking R code for possible problems ... NOTE\n  trianguletter: no visible global function definition for ‘head’\n  trianguletter: no visible binding for global variable ‘iris’\n  Undefined global functions or variables:\n    head iris\n  Consider adding\n    importFrom(\"datasets\", \"iris\")\n    importFrom(\"utils\", \"head\")\n  to your NAMESPACE file.\n\n0 errors ✔ | 0 warnings ✔ | 1 note ✖\nDid you get any NOTEs, ERRORs or WARNINGs? I know I did! Among other things it didn’t like my usage of the iris dataset without specifying it in the NAMESPACE. This one is a bit tricky, but you can try to solve it if you want."
  },
  {
    "objectID": "labs/packages/index.html#finish-line",
    "href": "labs/packages/index.html#finish-line",
    "title": "R packages",
    "section": "6 Finish line",
    "text": "6 Finish line\n\nWell done! You have built a functional package. Maybe it is even time to update the version number in DESCRIPTION and take it out of development?\nIf you want to know even more about this topic, I recommend Hadley Wickham and Jenny Bryan’s excellent online resource http://r-pkgs.had.co.nz/check.html.\nThe next sections are optional and cover vignettes, testing, including C++ code in your package using Rcpp and pushing your R package to github and setting up github actions for it."
  },
  {
    "objectID": "labs/packages/index.html#vignette",
    "href": "labs/packages/index.html#vignette",
    "title": "R packages",
    "section": "7 Vignette",
    "text": "7 Vignette\nVignettes are long-form documentation for your package. Like a manual detailing what the purpose of your package and its functions are.\nTo initialize your vignette, you can use the command:\nusethis::use_vignette(\"packagename_vignette\")\nWhat this does:\n\nCreates the vignettes/ folder with packagename_vignette.Rmd inside\nEdits your DESCRIPTION, adding knitr to Suggests and as a VignetteBuilder.\n\nOpen the file vignettes/packagename_vignette.Rmd, unless it was already automatically opened when using the command. Edit the header data, change title and add an author, then create a minimal vignette for your function. Do run your function and show your dataset using knitr from the vignette. It can be as short as you want, however if you do this for a real package it should be a long form manual showing how your package can use its functions or data to perform the task it was designed for.\n\n\n\n\n\n\nNote\n\n\n\nTo be able to use the functions of your package in the vignette you will need to install your package, the easiest way is to execute devtools::install().\n\n\nTo preview your vignette while working on it, press the knit button in Rstudio.\nExample vignette.Rmd:\n---\ntitle: \"How to write more and more letters, in a triangle\"\nauthor: \"Sebastian DiLorenzo\"\ndate: \"2024-05-29\"\noutput: rmarkdown::html_vignette\nvignette: &gt;\n  %\\VignetteIndexEntry{How to write more and more letters, in a triangle}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#&gt;\"\n)\n\n# replace this with your package name\nlibrary(newpkg)\n```\n\n# The greatest package for a very specific purpose\n\nIf you thought that it was impossible to write letters\nalphabetically from top to bottom with each number represented\nthe same number of times asits position in the alphabet\n  - think again!\n\nThis package and its sole function, trianguletter, solves just this problem!\n\nBut you do not have to take my word for it, see for yourself:\n\n```{r}\n# With just a simple number we specify how long into the alphabet we go.\ntrianguletter(10)\n\n# Also, this package has this random dataset:\nyour_object\n```\n\n# Future plans\n\nWe plan to add features so that you can give it\na letter, rather than a number, and output a\nbunch of numbers instead!\n\nAnd the beautiful rendered version:\n\nThe preview you get when knitting the vignette.Rmd does not mean that the vignette has been created. When you are happy with the vignette, use devtools::build_vignettes(). To view the vignette as an external user would view it is for some reason a bit of a hassle for the package you are developing, perhaps because the output is pretty much the same as when you knit. If you want to do this you can build your package source with devtools::build(), which also builds the vignette, and then devtools::load_all(). Then view the vignette with browseVignettes(\"packagename\").\nOnce again, good work! Now you have written a short guide to your package that will be included wherever it goes!"
  },
  {
    "objectID": "labs/packages/index.html#testing",
    "href": "labs/packages/index.html#testing",
    "title": "R packages",
    "section": "8 Testing",
    "text": "8 Testing\nTesting is a powerful way to add tests to your package. They can for example make sure that the output from your functions are as you expect them to be. This can be very good when you have many people working on a package, such as open source. It is not hard to imagine a situation where someone makes a change that has unforseen consequences and even if the function doesn’t throw an error the output has changed leading to errors in the next function that are hard to track.\nTo add tests to your package you can use\n\nusethis::use_testthat()\n\nBe sure to check the output from the command as it describes what it does to your package very well. As it suggests we can now use usethis::use_test() to create a template test for a function.\nWe will create a new function to test, since trianguletter() uses cat() which is standard output, it is advanced to run tests on it. As always you are free and encouraged to create your own function. The example is for inspiration.\nCreate a new function in R/divider.R\n\nusethis::use_r(\"trivider\")\n\nAnd define the function.\ntrivider &lt;- function(x){\n  x / 3\n}\nNow lets create the test using:\nusethis::use_test(\"trivider\")\nThis creates the file tests/testthat/test-trivider.R, which is where we will write our tests for that function. Now we can for example write a test that makes sure the input 9 results in the output 3.\ntest_that(\"given a 9 the output is 3\", {\n  expect_equal(trivider(9), 3)\n})\nYou can run the test by using the command\ndevtools::test()\nTry adding another test in test-trivider.R, or whichever function you are using. Use expect_error() this time. Can you get a PASS on both your tests?\nImportantly, your tests are performed when you run devtools::check(), which means that you have just extended its functionality to keep a closer eye on your packages expected behaviour."
  },
  {
    "objectID": "labs/packages/index.html#src-and-rcpp",
    "href": "labs/packages/index.html#src-and-rcpp",
    "title": "R packages",
    "section": "9 src/ and Rcpp",
    "text": "9 src/ and Rcpp\nR is not always the most efficient language, which is why it is great that we can integrate other code with our package. Either using ready made solutions, or by including a script file of another language in the package.\nHere we will integrate the well developed Rcpp package to be able to use C++ code in our package.\nSimilarly to how we created the package, the first thing we want to do is setup our package to accept Rcpp. We can do this with usethis::use_rcpp() which does four things:\n\nCreates src/ folder, unless it already exists.\nEdits DESCRIPTION, adding Rcpp to Imports and LinkingTo.\nCreate and modify .gitignore to not include compiled files (useful if you connect your package to git)\nLet’s you know two roxygen tags that need to be included, like our documentation, somewhere in package.\n\n\n\n\n\n\n\nTip\n\n\n\nSome users have reported receiving some warnings when executing usethis::use_rcpp() but it didn’t seem to break anything.\n\n\nusethis::use_rcpp()\nLets include the roxygen tags in our utility.R file.\n#' @useDynLib newpkg, .registration = TRUE\n#' @importFrom Rcpp sourceCpp\nNULL\nNow we are ready to create a C++ file. You can do this from Rstudio to generate a nice template, File &gt; New file &gt; C++ File. It should look something like this:\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n\n// This is a simple example of exporting a C++ function to R. You can\n// source this function into an R session using the Rcpp::sourceCpp\n// function (or via the Source button on the editor toolbar). Learn\n// more about Rcpp at:\n//\n//   http://www.rcpp.org/\n//   http://adv-r.had.co.nz/Rcpp.html\n//   http://gallery.rcpp.org/\n//\n\n// [[Rcpp::export]]\nNumericVector timesTwo(NumericVector x) {\n  return x * 2;\n}\n\n\n// You can include R code blocks in C++ files processed with sourceCpp\n// (useful for testing and development). The R code will be automatically\n// run after the compilation.\n//\n\n/*** R\ntimesTwo(42)\n*/\nYou should not mess with the header, unless you know what you are doing. Here you can write any C++ function you want, either do this or leave it as it is and we will use the included example function, timesTwo. The function is exported to R using // [[Rcpp::export]]. Importantly, this does not add the function to your NAMESPACE. Add documentation to your function in the same way as we have done previously, but with the C++ commenting style of //'.\n//' Multiply a number by two\n//'\n//' @param x A integer.\n//' @export\n// [[Rcpp::export]]\nNumericVector timesTwo(NumericVector x) {\n  return x * 2;\n}\nSave the file to your src/ directory and call pkgbuild::compile_dll(), which re-compiles the package, implementing our changes. Now run devtools::document() to update your NAMESPACE. Lets install and restart using Cmd/Ctrl + Shift + B in Rstudio. This will create the file RcppExports.R in R/, which is what R uses to call your C++ function.\nTest that your function works from console.\nYour R package can now run C++ code, marvelous! Now you just need to learn C++ ;).\n\n9.1 Check again!\n\nAdded new components to the package have we? - Yoda\n\nPerform devtools::check() again and fix any new messages."
  },
  {
    "objectID": "labs/packages/index.html#github-and-github-actions",
    "href": "labs/packages/index.html#github-and-github-actions",
    "title": "R packages",
    "section": "10 Github and Github actions",
    "text": "10 Github and Github actions\nThis section does require some previous git knowledge.\n\n10.1 Github\nLet’s add our R package to github, so we can distribute it! To do this you will need a github account. Since git usage is covered later in the course, you can return to this. But if you want you are very welcome to follow this guide. It does require that you have git installed, accessible and configured on your local computer.\nTo initialize git for your R package, so it becomes a local repository, you first need to run the command:\nusethis::use_git()\nTo initialize a new github repository with the same name as your R package and push your files there, you can use this command:\nusethis::use_github()\nAt this point, you should have a new repository on your github that has your R package files inside it. This is fantastic! Not only does this mean you can now install your package from any other computer , but we can also setup github actions!\nCheck that you can install your package directly from the github repository using a command of the form devtools::install_github(\"Username/repository_name\").\n\n\n10.2 Github actions\n\n\n\n\n\n\nTip\n\n\n\nGithub actions are only free for public repositories. Do not create a private repository, for example under your organisation, for this exercise!\n\n\nLet’s set up our R package so that it will test if it passes R CMD CHECK on three major operating systems.\nThe first thing you will need to do is make sure your github account can use actions/workflows. If you are using a personal access token go to (user, not repo) Settings&gt;Developer settings&gt;Personal access tokens on your github account and make sure you have selected a Scope called workflow.\nNow lets add an action to our R-package. It is possible to do this manually but luckily there are some example workflows you can use for the most common cases at https://github.com/r-lib/actions/tree/master/examples. To add the action, we will use the usethis package, similarly to how we used it to initiate vignettes earlier. Issue the command usethis::use_github_action(\"check-standard\") in your R package R session, which will select the standard CI workflow from the link.\nWhat this actually did is create the folders and file .github/workflows/check-standard.yaml which github will know to look for in a repository for instructions to run actions.\nNow commit and push these newly added files to your git repository the Actions tab on github will commence running an action, checking your R package for compatibility with several operating systems, as shown below.\n\nThat is it, now you know all the most important bits about creating an R package. Go make something useful!"
  },
  {
    "objectID": "labs/reticulate/index.html",
    "href": "labs/reticulate/index.html",
    "title": "reticulate",
    "section": "",
    "text": "Note\n\n\n\nThese are exercises for practicing to use the reticulate package in R. Try to do the exercises yourself before looking at the answers. Some sections have more pure Python code than others, if you feel that your Python skills are rusty, feel free to look at the answers and try your best to follow along. We will be writing some Python code chunks, so use R Markdown for this exercise.\nPlease download the following file and unzip the contents before the lab.\n raukr-reticulate.zip"
  },
  {
    "objectID": "labs/reticulate/index.html#setup",
    "href": "labs/reticulate/index.html#setup",
    "title": "reticulate",
    "section": "1 Setup",
    "text": "1 Setup\nLoad the following libraries else install them from CRAN.\n\nlibrary(reticulate)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(stringr)\n\nCreate and activate an environment using Conda.\n\nconda_create(\"raukr-reticulate\", python_version = \"3.12\", packages = c(\"pandas=2.2.1\",\"sqlalchemy=2.0.30\"))\n\n\n# activate environment\nuse_condaenv(\"raukr-reticulate\", required = TRUE)\n\nTo make sure you will use the correct Python version (and the libraries associated with it), use the keyword required when starting your conda environment. The reticulate package will figure out which Python version to use, using a specified order. For more information, read the documentation for Python versions and package installation."
  },
  {
    "objectID": "labs/reticulate/index.html#imdb",
    "href": "labs/reticulate/index.html#imdb",
    "title": "reticulate",
    "section": "2 IMdB",
    "text": "2 IMdB\n\n2.1 Preparations\nThe International Movie Database is a large database containing all information about movies, TV series, actors, producers, etc, and the ratings they received. If you are not aware of it, check out their website imdb.com for more information.\nYou will be working on a smaller subset of some of the data listed, which consists of movies, ratings, and the principal actors playing in the movies. You will receive a file with python functions used to query this small database from R, where you will further process the data to answer questions related to different movies and actors. The underlying Python code uses the sqlalchemy library for querying the sqlite database.\nIn preparation for using the Python code in R, make sure that the following files are all located in your working directory:\n\nimdb.db\nmodel.py\nimdb_functions.py\n\nStart by loading all the python functions into R.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nsource_python(\"imdb_functions.py\")\n\n\n\n\nFirst, inspect which functions got imported when you sourced your python file. You can find them in the Environment table in RStudio. Some of the functions listed are part of the SQLAlchemy package used, but one example to look at is the function get_actors().\nAs you can see, R creates a wrapper function in R, for calling the underlying Python function. This specific function takes a movie title as input, and returns the principal actors of the movie. You can further study what the function does by looking at the code in the imdb_functions.py file. You can see that it queries the database for a specific movie, and returns the principal actors in it.\n\n\n2.2 Get to know the data\nLet’s try out the get_actors() function. Get the principal actors for the movie Gattaca, and inspect the output type.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nactors &lt;- get_actors('Gattaca')\nstr(actors)\n\nList of 1\n $ Gattaca: chr [1:4] \"Ethan Hawke (Vincent,Jerome)\" \"Uma Thurman (Irene)\" \"Jude Law (Jerome,Eugene)\" \"Gore Vidal (Director Josef)\"\n\n\n\n\n\nNext let’s do the same with the function get_movies(). List movies that Brent Spiner has been in.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nmovies &lt;- get_movies('Brent Spiner')\nstr(movies)\n\nList of 1\n $ Brent Spiner: chr [1:3] \"Star Trek: First Contact\" \"Star Trek: Insurrection\" \"Star Trek: Nemesis\"\n\n\n\n\n\nFor printing some basic information about a movie, without saving anything to an R object, use the print_movie_info function. Here, find out information about the Avengers movies.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nprint_movie_info('Avengers')\n\nTitle:  The Avengers\nYear:  1998\nRuntime (min):  89\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  3.8\nNumber of votes:  41414 \n\nTitle:  The Avengers\nYear:  2012\nRuntime (min):  143\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  8.0\nNumber of votes:  1283281 \n\nTitle:  Avengers: Age of Ultron\nYear:  2015\nRuntime (min):  141\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  7.3\nNumber of votes:  769172 \n\nTitle:  Avengers: Infinity War\nYear:  2018\nRuntime (min):  149\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  8.4\nNumber of votes:  881191 \n\nTitle:  Avengers: Endgame\nYear:  2019\nRuntime (min):  181\nGenres:  Action,Adventure,Drama\nAverage rating:  8.4\nNumber of votes:  880234 \n\n\n\n\n\nCapture the output from the previous function and save it as a variable.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\noutput &lt;- py_capture_output(print_movie_info('Avengers'))\ncat(output)\n\nTitle:  The Avengers\nYear:  1998\nRuntime (min):  89\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  3.8\nNumber of votes:  41414 \n\nTitle:  The Avengers\nYear:  2012\nRuntime (min):  143\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  8.0\nNumber of votes:  1283281 \n\nTitle:  Avengers: Age of Ultron\nYear:  2015\nRuntime (min):  141\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  7.3\nNumber of votes:  769172 \n\nTitle:  Avengers: Infinity War\nYear:  2018\nRuntime (min):  149\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  8.4\nNumber of votes:  881191 \n\nTitle:  Avengers: Endgame\nYear:  2019\nRuntime (min):  181\nGenres:  Action,Adventure,Drama\nAverage rating:  8.4\nNumber of votes:  880234 \n\n\n\n\n\nInspect the types of the variables actors and movies. What type are they? What type where they converted from in Python?\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nstr(actors)\nstr(movies)\n\n# Both are of the R type `named list`, which is the type a Python `dictionary` gets converted to/from.\n\nList of 1\n $ Gattaca: chr [1:4] \"Ethan Hawke (Vincent,Jerome)\" \"Uma Thurman (Irene)\" \"Jude Law (Jerome,Eugene)\" \"Gore Vidal (Director Josef)\"\nList of 1\n $ Brent Spiner: chr [1:3] \"Star Trek: First Contact\" \"Star Trek: Insurrection\" \"Star Trek: Nemesis\"\n\n\n\n\n\nSource the python file again, but set convert=FALSE. What are the types now?\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nsource_python(\"imdb_functions.py\", convert = FALSE)\n\nactors &lt;- get_actors('Gattaca')\nclass(actors)\n\nmovies &lt;- get_movies('Brent Spiner')\nclass(movies)\n\n# Now actors and movies are both of the python type dictionary\n\n[1] \"python.builtin.dict\"   \"python.builtin.object\"\n[1] \"python.builtin.dict\"   \"python.builtin.object\"\n\n\n\n\n\nConvert the types manually back to R types.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nactors.r &lt;- py_to_r(actors)\nstr(actors.r)\n\nmovies.r &lt;- py_to_r(movies)\nstr(movies.r)\n\nList of 1\n $ Gattaca: chr [1:4] \"Ethan Hawke (Vincent,Jerome)\" \"Uma Thurman (Irene)\" \"Jude Law (Jerome,Eugene)\" \"Gore Vidal (Director Josef)\"\nList of 1\n $ Brent Spiner: chr [1:3] \"Star Trek: First Contact\" \"Star Trek: Insurrection\" \"Star Trek: Nemesis\"\n\n\n\n\n\n\n\n2.3 Working with Dataframes\nIn the following sections we will be working with pandas dataframes in R. The answers we show will mostly be using the Python pandas library from R, but there are of course pure R ways of doing the following exercises once we have converted the output from the python functions. You are free to choose how you solve the following exercises, either only python in R, a mix, or pure R. But we encourage you to mix, as you will then practice the type conversions and usages of the reticulate library, especially for those of you that are more fluent in Python.\n\n2.3.1 The highest ranked movie\nThe function get_all_movies() from the file imdb_functions.py can be used to retrieve all movies, either within a specified time period, or all of the movies in the database. If the imported function has a docstring, you can view the help documentation with:\n\npy_help(get_all_movies)\n\nStart by importing all movies into a pandas dataframe, by sourcing the python functions into R. Do not convert the result into an R dataframe.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nsource_python(\"imdb_functions.py\", convert = FALSE)\nmovies_py &lt;- get_all_movies()\nclass(movies_py)\n\n[1] \"pandas.core.frame.DataFrame\"        \"pandas.core.generic.NDFrame\"       \n[3] \"pandas.core.base.PandasObject\"      \"pandas.core.accessor.DirNamesMixin\"\n[5] \"pandas.core.indexing.IndexingMixin\" \"pandas.core.arraylike.OpsMixin\"    \n[7] \"python.builtin.object\"             \n\n\n\n\n\nInspecting the movies_py variable we can see that it is of the type pandas.dataframe.\nNow we are ready to answer our first question:\n\nWhich movie/movies are the highest ranked of all times?\n\nWe will try to answer this with a pandas method directly in a Python chunk. To do this we first have to make our movies_py variable visible to Python. Even though it is a Python object, since it was created within a R code chunk, Python code chunks cannot directly access them. To make R variables accessible in Python code chunks we use the r object. Remember that to access a Python variable from R, we used py$, to do the opposite we use r.. The $ and the . denotes the different ways in which Python and R represents methods.\nUse the method .max() from the pandas module to find and filter out the top movie/movies.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\n# the code below is python code written in a python code chunk\nmovies = r.movies_py\n\n# inspect what columns are present\nmovies.columns\n\n# find movies that has the highest averageRating\ntop_movies = movies[movies.averageRating == movies.averageRating.max()]\n\ntop_movies['primaryTitle']\n\nIndex(['id', 'tconst', 'titleType', 'primaryTitle', 'originalTitle',\n       'startYear', 'endYear', 'runtimeMinutes', 'genres', 'averageRating',\n       'numVotes'],\n      dtype='object')\n3822    The Shawshank Redemption\n5450             The Chaos Class\nName: primaryTitle, dtype: object\n\n\n\n\n\nAbove we are using pure pandas code directly in our RMarkdown document.\nAfter dipping our toes in Python territory, we now go back to using normal R chunks:\nSave top_movies as an R object, and find out from what years these movies are, and how many votes they got.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nmovies_r &lt;- py$top_movies\ndf &lt;- data.frame(movies_r$primaryTitle, movies_r$startYear, movies_r$numVotes)\ndf\n\n\n  \n\n\n\nSo the answer to which are the highest ranked movies of all times is The Shawshank Redemption and The Chaos Class. Although, The Chaos Class did not get as many votes as The Shawshank Redemption.\n\n\n\n\n\n2.3.2 Average ratings over time\nNext we want to explore how the average ratings for movies has changed over time. This one we will solve in normal R chunks, by importing the required python functions from the file imdb_functions.py, and also load pandas into R. As we will be using pandas in R, import the Python file without converting it.\nGet all movies and save into a pandas dataframe.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nsource_python(\"imdb_functions.py\", convert = FALSE)\nmovies_py &lt;- get_all_movies()\nclass(movies_py)\n\n[1] \"pandas.core.frame.DataFrame\"        \"pandas.core.generic.NDFrame\"       \n[3] \"pandas.core.base.PandasObject\"      \"pandas.core.accessor.DirNamesMixin\"\n[5] \"pandas.core.indexing.IndexingMixin\" \"pandas.core.arraylike.OpsMixin\"    \n[7] \"python.builtin.object\"             \n\n\n\n\n\nImport pandas into R\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\npandas &lt;- import(\"pandas\")\n\n\n\n\nUse pandas to group the data by startYear, and calculate the average ratings. Next, convert the result back into an R dataframe.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\n# use pandas to group columns by startYear\nmovies_grouped &lt;- movies_py$groupby('startYear')['averageRating']$mean()\n\n# convert to r dataframe\nmovies_grouped_r &lt;- py_to_r(movies_grouped)\nmovies_grouped_r &lt;- as.data.frame(movies_grouped_r)\n\n\n\n\nIn this case the conversion seems to have done something to our columns. To fix this, add startYear column back into the dataframe, using R.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\n# add Year column back to dataframe, and rename columns\nmovies_grouped_r &lt;- cbind(rownames(movies_grouped_r), movies_grouped_r)\ncolnames(movies_grouped_r) &lt;- c(\"startYear\",\"averageRating\")\nmovies_grouped_r[1:4,]\n\n\n  \n\n\n\n\n\n\nMake sure to inspect that the dataframe looks like it is supposed to, and that the values make sense. Once we are sure we have managed to transform the data, we can proceed.\nPlot the average ratings for each year.\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nggplot(movies_grouped_r, aes(x=startYear, y=averageRating)) + \n                              geom_point() + \n                              theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n                              ggtitle('Average ratings over years')"
  },
  {
    "objectID": "labs/reticulate/index.html#bonus-exercises",
    "href": "labs/reticulate/index.html#bonus-exercises",
    "title": "reticulate",
    "section": "3 Bonus exercises",
    "text": "3 Bonus exercises\nBelow is 2 bonus exercises if you have time left in the end of the exercise. Do either one or both if you have the time.\n\n3.1 Find overlapping actors\nWhich actors have played together with both Ian McKellen and Patrick Stewart, but when they were in separate movies? Or rephrased, which actor has played with Ian McKellen Lee in one movie, and Patrick Stewart in another movie?\nFor example:\n\nActor 1 has played with IM in movie a, and with PS in movie b. PS was not in movie a, and IM was not in movie b\nActor 2 has played with IM in movie c, and with PS in movie c. \n\nScenario 1 would count, while scenario 2 would not, as IM and PS was in this movie both together.\nTo solve this one you need to think in several steps. There are of course several solutions, and you are free to approach this exercise however you want. We will give you a suggestion to one approach that could be used below:\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nGet a list of movies where Ian McKellen has played\nGet a list of movies where Patrick Stewart has played\nRemove intersections\nGet all actors for all movies that Ian McKellen was in\nGet all actors for all movies that Patrick Stewart was in\nRemove duplicates\nGet intersection of actors\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nRemember that this database only has the PRINCIPAL actor of movies, meaning you might have results where an actor has a minor role and is not listed here. If you are unsure if your results are correct, we provide you with a Python function to check your results.\n\n\nTo find out if your answer is correct, your can import and use the function check_results from the imdb_functions.py file. Replace 'Actor Name' with the name of the actor that you think is the answer to the question above.\n\nsource_python(\"imdb_functions.py\")\nres_actor &lt;- 'Actor Name'\ncheck_results(res_actor, 'Ian McKellen', 'Patrick Stewart')\n\n And if you want to see one suggested solution to this problem:\n\n\n\n\n\n\nShow code\n\n\n\n\n\n\nsource_python(\"imdb_functions.py\", convert = FALSE)\nact1 &lt;- 'Ian McKellen'\nact2 &lt;- 'Patrick Stewart'\n\n# get movies for Patrick Stewart\nact1_movies &lt;- get_movies(act1)\nact1_movies\nmovies1_lst &lt;- py_to_r(act1_movies[act1])\n\n# get movies for Ian McKellen\nact2_movies &lt;- get_movies(act2)\nact2_movies\nmovies2_lst &lt;- py_to_r(act2_movies[act2])\n\n# get movies both has played in\noverlap &lt;- intersect(movies1_lst, movies2_lst)\n\n# remove overlap from each movielist\nnew_movies1_lst &lt;- setdiff(movies1_lst, overlap)\nnew_movies2_lst &lt;- setdiff(movies2_lst, overlap)\n\n# get all actors that has played in those movies\n# below we do things the functional way for the first \n# movie list\nactors_lst &lt;- purrr::map(new_movies1_lst, \n             ~ .x %&gt;% \n             get_actors() %&gt;% \n             py_to_r() %&gt;% \n             .[[.x]] %&gt;% \n             unlist() %&gt;% \n             str_remove(' \\\\(.*\\\\)')) %&gt;% \n  unlist() \n\n# remove all duplicates\nactors_lst_uniq &lt;- actors_lst %&gt;% unique()\n\n\n# and now, the same for the second movie list, but the \n# non-functional way, using Python-inspired syntax. \n\nactors_lst2 &lt;- character()\n\nfor (movie in new_movies2_lst) {\n  actors &lt;- get_actors(movie)\n  actors_r &lt;- py_to_r(actors[movie])\n  for (actor in actors_r) {\n    a &lt;- strsplit(as.character(actor), '\\\\s*[()]')[[1]]\n    actors_lst2 &lt;- append(actors_lst2, a[1])\n  }\n}\n\nactors_lst2_uniq &lt;- unique(actors_lst2)\n\n# finally, intersect the two lists with actors to\n# find the ones that played with both actors\nintersect(actors_lst_uniq, actors_lst2_uniq)\n## {'Ian McKellen': ['The Keep', 'Six Degrees of Separation', 'Richard III', 'Apt Pupil', 'Gods and Monsters', 'The Lord of the Rings: The Fellowship of the Ring', 'X-Men', 'The Lord of the Rings: The Return of the King', 'The Lord of the Rings: The Two Towers', 'X2: X-Men United', 'The Da Vinci Code', 'Neverwas', 'Flushed Away', 'Stardust', 'The Hobbit: An Unexpected Journey', 'The Hobbit: The Desolation of Smaug', 'X-Men: Days of Future Past', 'The Hobbit: The Battle of the Five Armies', 'Mr. Holmes', 'The Good Liar']}\n## {'Patrick Stewart': ['Star Trek: Generations', 'Star Trek: First Contact', 'Conspiracy Theory', 'Star Trek: Insurrection', 'X-Men', 'Star Trek: Nemesis', 'X2: X-Men United', 'Steamboy', 'X-Men: The Last Stand', 'Earth', 'TMNT', 'African Cats', 'X-Men: Days of Future Past', 'Logan', 'Green Room']}\n## [1] \"Hugh Jackman\"\n\n\n\n\nTry some other actors and see what you find. For example, try actors that have played with Johnny Depp and Helena Bonham Carter.\n\n\n3.2 Try out examples from slides\nIn the slides we looked at a few examples of how we can use reticulate to use python libraries in R:\n\nRandom forest classification using Scikit-learn\nGetting gene information from ENSEMBL’s API\nDo Natural language processing using Hugging Face models\n\nGo back to the slides and try some of them out! Here you would have to read the documentation for the different libraries. Remember these are Python libraries that you import in R, so the syntax has to be updated as we have discussed previously."
  },
  {
    "objectID": "labs/shiny/index.html",
    "href": "labs/shiny/index.html",
    "title": "Web apps with Shiny",
    "section": "",
    "text": "Note\n\n\n\nThis is an introduction to shiny web applications with R. Please follow the exercise to familiarize yourself with the fundamentals. And then you can follow instructions to build one of the example apps.\n\nCode chunks with a complete app can be simply copy-pasted to the RStudio console and run.\nComplete shiny code can be saved as a text file, named as app.R and then clicking Run app in RStudio launches the app. Alternatively, shiny::runApp() from the R console.\n\n Interactive app: This can take a few minutes to load."
  },
  {
    "objectID": "labs/shiny/index.html#ui-layout",
    "href": "labs/shiny/index.html#ui-layout",
    "title": "Web apps with Shiny",
    "section": "1 UI • Layout",
    "text": "1 UI • Layout\nThis is an example to show the layout of widgets on a webpage using shiny functions. fluidPage() is used to define a responsive webpage. titlePanel() is used to define the top bar. sidebarLayout() is used to create a layout that includes a region on the left called side bar panel and a main panel on the right. The contents of these panels are further defined under sidebarPanel() and mainPanel().\nIn the main panel, the use of tab panels are demonstrated. The function tabsetPanel() is used to define a tab panel set and individual tabs are defined using tabPanel(). fluidRow() and column() are used to structure elements within each tab. The width of each column is specified. Total width of columns must add up to 12.\n\n#| standalone: true\n#| components: [editor, viewer]\n\nlibrary(shiny)\nui &lt;- fluidPage(\n  titlePanel(\"Title Panel\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Sidebar Panel\")\n    ),\n    mainPanel(tabsetPanel(\n      tabPanel(\"tab1\",\n               fluidRow(\n                 column(6,helpText(\"Col1\")),\n                 column(6,\n                        helpText(\"Col2\"),\n                        fluidRow(\n                          column(4,style=\"background-color:#b0c6fb\",\n                                 helpText(\"Col1\")\n                          ),\n                          column(4,style=\"background-color:#ffa153\",\n                                 helpText(\"Col2\")\n                          ),\n                          column(4,style=\"background-color:#b1f6c6\",\n                                 helpText(\"Col3\")\n                          )\n                        )\n                 )\n               )\n      ),\n      tabPanel(\"tab2\",\n               inputPanel(helpText(\"Input Panel\"))\n      ),\n      tabPanel(\"tab3\",\n               wellPanel(helpText(\"Well Panel\"))\n      )\n    )\n    )\n  )\n)\n\nserver &lt;- function(input,output){}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "labs/shiny/index.html#ui-widgets-input",
    "href": "labs/shiny/index.html#ui-widgets-input",
    "title": "Web apps with Shiny",
    "section": "2 UI • Widgets • Input",
    "text": "2 UI • Widgets • Input\nInput widgets are used to accept content interactively from the user. These widgets usually end in Input like selectInput(). Below are usage examples of several of shiny’s built-in widgets. Every widget has a variable name which is accessible through input$ in the server function. For example, the value of a variable named text-input would be accessed through input$text-input.\n\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  fluidRow(\n    column(6,\n           fileInput(\"file-input\",\"fileInput:\"),\n           selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n           numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n           sliderInput(\"slider-input\",label=\"sliderInput\",value=5,min=1,max=10),\n           textInput(\"text-input\",label=\"textInput\"),\n           textAreaInput(\"text-area-input\",label=\"textAreaInput\"),\n           dateInput(\"date-input\",label=\"dateInput\"),\n           dateRangeInput(\"date-range-input\",label=\"dateRangeInput\"),\n           radioButtons(\"radio-button\",label=\"radioButtons\",choices=c(\"A\",\"B\",\"C\"),inline=T),\n           checkboxInput(\"checkbox\",\"checkboxInput\",value=FALSE),\n           actionButton(\"action-button\",\"Action\"),\n           hr(),\n           submitButton()\n    )\n  )\n),\nserver=function(input,output){},\noptions=list(height=900))"
  },
  {
    "objectID": "labs/shiny/index.html#ui-widgets-outputs",
    "href": "labs/shiny/index.html#ui-widgets-outputs",
    "title": "Web apps with Shiny",
    "section": "3 UI • Widgets • Outputs",
    "text": "3 UI • Widgets • Outputs\nSimilar to input widgets, output widgets are used to display information to the user on the webpage. These widgets usually end in Output like textOutput(). Every widget has a variable name accessible under output$ to which content is written in the server function. Render functions are used to write content to output widgets. For example renderText() is used to write text data to textOutput() widget.\n#| standalone: true\n#| viewerHeight: 650\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(fluidRow(column(6,\n             textInput(\"text_input\",label=\"textInput\",value=\"&lt;h3 style='color:red'&gt;Red text&lt;/h3&gt;\"),\n             hr(),\n             htmlOutput(\"html_output\"),\n             textOutput(\"text_output\"),\n             verbatimTextOutput(\"verbatim_text_output\"),\n             tableOutput(\"table_output\"),\n             plotOutput(\"plot_output\",width=\"300px\",height=\"300px\")\n      ))),\n  server=function(input, output) {\n    output$html_output &lt;- renderText({input$text_input})\n    output$text_output &lt;- renderText({input$text_input})\n    output$verbatim_text_output &lt;- renderText({input$text_input})\n    output$table_output &lt;- renderTable({iris[1:3,1:3]})\n    output$plot_output &lt;- renderPlot({\n      plot(iris[,1],iris[,2])\n    })\n})\n\n\n\n\n\n\n\n\n\n\n\n\nIn this example, we have a text input box which takes user text and outputs it in three different variations. The first output is html output htmlOutput(). Since the default text is html content, the output is red colored text. A normal non-html text would just look like normal text. The second output is normal text output textOutput(). The third variation is verbatimTextOutput() which displays text in monospaced code style. This example further shows table output and plot output."
  },
  {
    "objectID": "labs/shiny/index.html#dynamic-ui",
    "href": "labs/shiny/index.html#dynamic-ui",
    "title": "Web apps with Shiny",
    "section": "4 Dynamic UI",
    "text": "4 Dynamic UI\nSometimes we want to add, remove or change currently loaded UI widgets conditionally based on dynamic changes in code execution or user input. Conditional UI can be defined using conditionalPanel(), uiOutput()/renderUI(), insertUI() or removeUI. In this example, we will use uiOutput()/renderUI().\nIn the example below, the output plot is displayed only if the selected dataset is iris.\n\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\"),\n  uiOutput(\"ui\")\n),\n\nserver=function(input,output) {\n  getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n  \n  output$ui &lt;- renderUI({\n    if(input$data_input==\"iris\") plotOutput(\"plot_output\",width=\"400px\")\n  })\n  \n  output$plot_output &lt;- renderPlot({hist(getdata()[, 1])})\n  output$table_output &lt;- renderTable({head(getdata())})\n})\n\nHere, conditional UI is used to selectively display an output widget (plot). Similarly, this idea can be used to selectively display any input or output widget."
  },
  {
    "objectID": "labs/shiny/index.html#updating-widgets",
    "href": "labs/shiny/index.html#updating-widgets",
    "title": "Web apps with Shiny",
    "section": "5 Updating widgets",
    "text": "5 Updating widgets\nWidgets can be updated with new values dynamically. observe() and observeEvent() functions can monitor the values of interest and update relevant widgets.\n\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  selectInput(\"header_input\",label=\"Select column name\",choices=NULL),\n  plotOutput(\"plot_output\",width=\"400px\")\n),\n\nserver=function(input,output,session) {\n  getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n  \n  observe({\n    updateSelectInput(session,\"header_input\",label=\"Select column name\",choices=colnames(getdata()))\n  })\n  \n  output$plot_output &lt;- renderPlot({\n    #shiny::req(input$header_input)\n    #validate(need(input$header_input %in% colnames(getdata()),message=\"Incorrect column name.\"))\n    hist(getdata()[, input$header_input],xlab=input$header_input,main=input$data_input)\n  })\n},\noptions=list(height=600))\n\n\n\n\n\nIn this example, the user selects a dataset and a column from the selected dataset to be plotted as a histogram. The column name selection widget must automatically update it’s choices depending on the selected dataset. This achieved using observe() where the updateSelectInput() function updates the selection choices. Notice that a third option session is in use in the server function. ie; server=function(input,output,session). And session is also the first argument in updateSelectInput(). Session keeps track of values in the current session.\nWhen changing the datasets, we can see that there is a short red error message. This is because, after we have selected a new dataset, the old column name from the previous dataset is searched for in the new dataset. This occurs for a short time and causes the error. This can be fixed using careful error handling. We will discuss this in another section."
  },
  {
    "objectID": "labs/shiny/index.html#isolate",
    "href": "labs/shiny/index.html#isolate",
    "title": "Web apps with Shiny",
    "section": "6 Isolate",
    "text": "6 Isolate\nYou might’ve noticed that shiny tends to update changes immediately as the input widgets change. This may not be desirable in all circumstances. For example, if the apps runs a heavy calculation, it is more efficient to grab all the changes and execute in one step rather than executing the heavy calculation after every input change. To illustrate this, we have an example below where we plot an image which has the title as input text. Try adding a long title to it.\n#| standalone: true\n#| layout: vertical\n#| viewerHeight: 500\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    textInput(\"in_title\",label=\"Title\",value=\"Title\"),\n    plotOutput(\"out_plot\")),\n  \n  server=function(input,output) {\n    output$out_plot &lt;- renderPlot({\n      plot(iris[,1],iris[,2],main=input$in_title)\n    })\n  }\n)\nThe plot changes as soon as the input text field is changed. And as we type in text, the image is continuously being redrawn. This can be computationally intensive depending on the situation. A better solution would be to write the text completely without any reactivity and when done, let the app know that you are ready to redraw.\nWe can add an action button such that the plot is changed only when the button is clicked.\n#| standalone: true\n#| layout: vertical\n#| viewerHeight: 550\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    textInput(\"in_title\",label=\"Title\",value=\"Title\"),\n    actionButton(\"btn_go\",\"Go!\"),\n    plotOutput(\"out_plot\")),\n  \n  server=function(input,output) {\n    output$out_plot &lt;- renderPlot({\n      input$btn_go\n      plot(iris[,1],iris[,2],main=isolate(input$in_title))\n    })\n  }\n)\nNow, changes to any of the input fields do not initiate the plot function. The plot is redrawn only when the action button is clicked. When the action button is click, the current values in the input fields are collected and used in the plotting function."
  },
  {
    "objectID": "labs/shiny/index.html#error-validation",
    "href": "labs/shiny/index.html#error-validation",
    "title": "Web apps with Shiny",
    "section": "7 Error validation",
    "text": "7 Error validation\nShiny returns an error when a variable is NULL, NA or empty. This is similar to normal R operation. The errors show up as bright red text. By using careful error handling, we can print more informative and less distracting error messages. We also have the option of hiding error messages.\nIn this example, we have a list of datasets to select which is then printed as a table. The first and default option is an empty string which cannot be printed as a table and therefore returns an error.\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  getdata &lt;- reactive({ get(input$data_input,'package:datasets') })\n  output$table_output &lt;- renderTable({head(getdata())})\n},\noptions=list(height=\"350px\"))\n\n\nWe can add an extra line to the above app so that the selected string is validated before running downstream commands in the getdata({}) reactive function. The function validate() is used to validate inputs. validate() can be used with need() function or a custom function.\nBelow we use the need() function to check the input. It checks if the input is NULL, NA or an empty string and returns a specified message if TRUE. try() is optional and is used to catch any other unexpected errors.\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  \n  getdata &lt;- reactive({\n    validate(need(try(input$data_input),\"Please select a data set\"))\n    get(input$data_input,'package:datasets')\n  })\n  \n  output$table_output &lt;- renderTable({head(getdata())})\n},\noptions=list(height=\"350px\"))\n\nNow we see an informative gray message (less scary) asking the user to select a dataset.\n\nWe can use a custom function instead of using need(). Below, we have created a function called valfun() that checks if the input is NULL, NA or an empty string. This is then used in validate().\n\nvalfn &lt;- function(x) if(is.null(x) | is.na(x) | x==\"\") return(\"Input data is incorrect.\")\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  \n  getdata &lt;- reactive({\n    validate(valfn(try(input$data_input)))\n    get(input$data_input,'package:datasets')\n  })\n  \n  output$table_output &lt;- renderTable({head(getdata())})\n},\noptions=list(height=\"350px\"))\n\n\nThe last option is to simple hide the error. This may be used in situations where there is no input needed from the user. We use req() to check if the input is valid, else stop execution there till the condition becomes true.\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  \n  getdata &lt;- reactive({\n    shiny::req(try(input$data_input))\n    get(input$data_input,'package:datasets')\n  })\n  \n  output$table_output &lt;- renderTable({head(getdata())})\n},\noptions=list(height=\"350px\"))\n\n\nAs expected there is no error or any message at all. This is not always the best to use this option as we need the user to do something. An informative message may be better than nothing.\nFinally, instead of printing messages about the error or hiding the error, we can try to resolve the errors from the previous section in a more robust manner. shiny::req(input$header_input) is added to ensure that a valid column name string is available before running any of the renderPlot() commands. Second, we add validate(need(input$header_input %in% colnames(getdata()),message=\"Incorrect column name.\")) to ensure that the column name is actually a column in the currently selected dataset.\n\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  selectInput(\"header_input\",label=\"Select column name\",choices=NULL),\n  plotOutput(\"plot_output\",width=\"400px\")\n),\n\nserver=function(input,output,session) {\n  getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n  \n  observe({\n    updateSelectInput(session,\"header_input\",label=\"Select column name\",choices=colnames(getdata()))\n  })\n  \n  output$plot_output &lt;- renderPlot({\n    shiny::req(input$header_input)\n    validate(need(input$header_input %in% colnames(getdata()),message=\"Incorrect column name.\"))\n    hist(getdata()[, input$header_input],xlab=input$header_input,main=input$data_input)\n  })\n},\noptions=list(height=600))\n\n\n\n\n\nNow, we do not see any error messages. Note that shiny apps on shinyapps.io do not display the complete regular R error message for security reasons. It returns a generic error message in the app. One needs to inspect the error logs to view the actual error message."
  },
  {
    "objectID": "labs/shiny/index.html#download-data",
    "href": "labs/shiny/index.html#download-data",
    "title": "Web apps with Shiny",
    "section": "8 Download • Data",
    "text": "8 Download • Data\nIt is often desirable to let the user down data tables and plots as images. This is done using downloadHandler().\nIn the example below, we are downloading a table as a csv text file. We define a button that accepts the action input from the user. The downloadHandler() function has the file name argument, and the content argument where we specify the write.csv() command. Note that this example needs to be opened in a browser and may not in the RStudio preview. In the RStudio preview, click on Open in Browser.\n#| standalone: true\n#| layout: vertical\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    selectInput(\"data_input\",label=\"Select data\",\n                choices=c(\"mtcars\",\"faithful\",\"iris\")),\n    textOutput(\"text_output\"),\n    downloadButton(\"button_download\",\"Download\")\n  ),\n\n  server=function(input, output) {\n    \n    getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n    output$text_output &lt;- renderText(paste0(\"Selected dataset: \",input$data_input))\n    \n    output$button_download &lt;- downloadHandler(\n      filename = function() {\n        paste0(input$data_input,\".csv\")\n      },\n      content = function(file) {\n        write.csv(getdata(),file,row.names=FALSE,quote=F)\n      })\n  },\n  options=list(height=\"200px\")\n)"
  },
  {
    "objectID": "labs/shiny/index.html#download-plot",
    "href": "labs/shiny/index.html#download-plot",
    "title": "Web apps with Shiny",
    "section": "9 Download • Plot",
    "text": "9 Download • Plot\nIn this next example, we are downloading a plot. In the content part of downloadHandler(), we specify commands to export a PNG image. Note that this example needs to be opened in a browser and may not in the RStudio preview. In the RStudio preview, click on Open in Browser.\n\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    selectInput(\"data_input\",label=\"Select data\",\n                choices=c(\"mtcars\",\"faithful\",\"iris\")),\n    textOutput(\"text_output\"),\n    plotOutput(\"plot_output\",height=\"300px\",width=\"300px\"),\n    downloadButton(\"button_download\",\"Download\")\n  ),\n\n  server=function(input, output) {\n    \n    getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n    output$text_output &lt;- renderText(paste0(\"Selected dataset: \",input$data_input))\n    \n    output$plot_output &lt;- renderPlot({hist(getdata()[,1])})\n  \n  output$button_download &lt;- downloadHandler(\n    filename = function() {\n      paste0(input$data_input,\".png\")\n    },\n    content = function(file) {\n      png(file)\n      hist(getdata()[, 1])\n      dev.off()\n    })\n  },\n  options=list(height=\"500px\")\n)"
  },
  {
    "objectID": "labs/shiny/index.html#shinylive",
    "href": "labs/shiny/index.html#shinylive",
    "title": "Web apps with Shiny",
    "section": "10 Shinylive",
    "text": "10 Shinylive\nShinylive is a framework that allows shiny applications to run in the browser without a server. This is made possible by the recent development of WebR. This video is a great introduction to the topic. Examples of shinylive apps can be seen here.\nShinylive can be used in three ways:\nConvert: Convert existing shiny apps into shinylive apps. This can be achieved using the R package shinylive and function shinylive::export(). This generates an html file and all necessary assets which can be hosted as a static site. This may not always work depending on the complexity of the app and packages used.\n\nshinylive::export(app_dir=\"myapp\", output_dir=\"site\")\nhttpuv::runStaticServer(\"site\")\n\nFiddle: Shiny apps can be developed in the browser on shinylive.io. Apps can be shared via unique URL. Apps can be saved to Github Gist.\nInclude: The third option is the develop and include an app in a notebook. This option is covered in more detail below under interactive documents.\nThere are some caveats.\n\nNot ready for production use. This is a nascent technology that is experimental and actively developed, therefore likely to be unstable\nApps can be slow to very slow to load depending on complexity and how many packages need to be installed\nYou cannot just install any R package. They need to be compiled specifically for WebR. Only the most popular packages are currently available"
  },
  {
    "objectID": "labs/shiny/index.html#interactive-documents",
    "href": "labs/shiny/index.html#interactive-documents",
    "title": "Web apps with Shiny",
    "section": "11 Interactive documents",
    "text": "11 Interactive documents\n\n11.1 Shiny in Rmarkdown\nShiny interactive widgets can be embedded into Rmarkdown documents. These documents need to be live and can handle interactivity. The important addition is the line runtime: shiny to the YAML matter. Here is an example:\n---\nruntime: shiny\noutput: html_document\n---\n\n```{r}\nlibrary(shiny)\n```\n\nThis is a standard RMarkdown document. Here is some code:\n\n```{r}\nhead(iris)\n```\n\n```{r}\nplot(iris$Sepal.Length,iris$Petal.Width)\n```\n\nBut, here is an interactive shiny widget.\n\n```{r}\nsliderInput(\"in_breaks\",label=\"Breaks:\",min=5,max=50,value=5,step=5)\n```\n\n```{r}\nrenderPlot({{\nhist(iris$Sepal.Length,breaks=input$in_breaks)\n}})\n```\nThis code can be copied to a new file in RStudio and saved as, for example, shiny.Rmd. Then click ‘Knit’. Alternatively, you can run rmarkdown::run(\"shiny.Rmd\").\n\n\n11.2 Shiny in Quarto\nShiny widgets can be embedded into quarto documents. The YAML needs to specify server: shiny which runs shiny server in the background.\n---\ntitle: \"This is a title\"\nformat: html\nserver: shiny\n---\n\n```{r}\nsliderInput(\"bins\", \"Number of bins:\", \n            min = 1, max = 50, value = 30)\nplotOutput(\"distPlot\")\n```\n\n```{r}\n#| context: server\noutput$distPlot &lt;- renderPlot({\n  x &lt;- faithful[, 2]  # Old Faithful Geyser data\n  bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n  hist(x, breaks = bins, col = 'darkgray', border = 'white')\n})\n```\nIt is also possible to run individual chunks in shiny using context chunk parameter.\n```{r}\n#| context: server\n```\nMore information about using shiny and quarto together is here.\n\n\n11.3 Shinylive in Quarto\nShinylive has a quarto extension making it convenient to include shinylive apps into quarto documents. The interactive shiny apps in this document were created using this extension.\nHere is a step by step guide to get started with shinylive in quarto.\n\nInstall shinylive R package\n\n\ninstall.packages(\"shinylive\")\n\n\nAdd shinylive quarto extension\n\n\n\n\nShell\n\nquarto add quarto-ext/shinylive\n\n\n\nAdd shinylive as a filter\n\nfilters:\n  - shinylive\n\nR code block with shiny component must use language shinylive-r rather than r\nChunk parameter #| standalone: true must be defined\n\n```{shinylive-r}\n#| standalone: true\n```\n```{shinylive-r}\n#| standalone: true\n\nshinyApp(\n  ui=fluidPage(\n    sliderInput(\"value\", label=\"Value\", min=1, max=50, step=1, value=2),\n    textOutput(\"out\")\n  ),\n  server=function(input, output, session) {\n    output$out &lt;- renderText(paste0(\"Squared: \",input$value^2))\n  }\n)\n```\n#| standalone: true\n\nshinyApp(\n  ui=fluidPage(\n    sliderInput(\"value\", label=\"Value\", min=1, max=50, step=1, value=2),\n    textOutput(\"out\")\n  ),\n  server=function(input, output, session) {\n    output$out &lt;- renderText(paste0(\"Squared: \",input$value^2))\n  }\n)\n\nChunk parameter #| components: [editor, viewer] shows the editor and viewer side by side\nChunk parameter #| layout: vertical displays editor and viewer vertically\nPackages are installed using webr::install()\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 450\n\nwebr::install(c(\"ggplot2\", \"bslib\", \"palmerpenguins\", \"htmltools\"))\n\nlibrary(htmltools)\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\ndata(\"penguins\")\n\npdata &lt;- na.omit(penguins)\npc &lt;- prcomp(pdata[,c(\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\")], center = TRUE, scale. = TRUE)\ndfr &lt;- cbind(pdata,as.data.frame(pc$x))\n\nui &lt;- page_sidebar(\n  sidebar = sidebar(\n    selectInput(\"x\",\n      label = \"X axis\",\n      choices = c(\"PC1\",\"PC2\",\"PC3\",\"PC4\"),\n      selected = \"PC1\"\n    ),\n\n    selectInput(\"y\",\n      label = \"Y axis\",\n      choices = c(\"PC1\",\"PC2\",\"PC3\",\"PC4\"),\n      selected = \"PC2\"\n    ),\n    selectInput(\"v\",\n      label = \"Color\",\n      choices = c(\"species\", \"island\", \"sex\"),\n      selected = \"cut\"\n    )\n  ),\n  imageOutput(\"plot\", height = \"350px\")\n)\n\nserver &lt;- function(input, output, session) {\n  \n  output$plot &lt;- renderImage({\n    x &lt;- input$x\n    y &lt;- input$y\n    v &lt;- input$v\n    \n    p &lt;- ggplot(dfr, aes(x = !!sym(x), y = !!sym(y), col = !!sym(v))) +\n      geom_point() +\n      theme_bw() + \n      theme(legend.position = \"top\")\n\n    file &lt;- htmltools::capturePlot(\n      print(p), \n      tempfile(fileext = \".svg\"),\n      grDevices::svg,\n      width = 4, \n      height = 4\n    )\n    \n    list(src = file)\n  }, deleteFile = TRUE)\n}\n\napp &lt;- shinyApp(ui = ui, server = server)\nRefer to the shinylive extension documentation."
  },
  {
    "objectID": "labs/shiny/index.html#ggplot2-builder",
    "href": "labs/shiny/index.html#ggplot2-builder",
    "title": "Web apps with Shiny",
    "section": "12 ggplot2 builder",
    "text": "12 ggplot2 builder\nIn the ggplot2 presentation, we had a few slides with theme customisation. We will try to recreate that as a shiny app, so we can interactively customise a plot.\nTopics covered\n\nUI sidebar layout\nInput and output widgets\nUsing colorpicker widget\nCreating plots in a shiny app\n\nThe following R packages will be required for this app: ggplot2, shiny, colourpicker.\nBelow is a preview of the complete app.\n\nWe start with a shiny app template with sidebar layout.\n\nlibrary(shiny)\n\nshinyApp(\n  ui=pageWithSidebar(\n    sidebarPanel(),\n    mainPanel()\n  ),\n  server=function(input,output){\n  }\n)\n\nIn the ui part, we will define inputs. Most of the inputs are colours, so we use the colorInput() widget from the R package colorpicker. The output plot is defined as plotOutput(\"plot\"). In the server part, we define a renderPlot() function that generates a ggplot object.\n\n\nCode\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(colourpicker)\n\nshinyApp(\n    ui = pageWithSidebar(\n        headerPanel(\"ggplot2 plot builder\"),\n        sidebarPanel(\n            colourInput(\"in_plot_title\", \"Plot title\", value = \"#4daf4a\"),\n            colourInput(\"in_plot_subtitle\", \"Plot subtitle\", value = \"#984ea3\"),\n            colourInput(\"in_legend_title\", \"Legend title\", value = \"#ffff33\"),\n            colourInput(\"in_legend_text\", \"legend text\", value = \"#ff7f00\"),\n            selectInput(\"in_legend_pos\", \"Legend position\", choices = c(\"right\", \"left\", \"top\", \"bottom\"), selected = \"right\"),\n            colourInput(\"in_axis_title\", \"Axis title\", value = \"#e41a1c\"),\n            colourInput(\"in_axis_text\", \"Axis text\", value = \"#377eb8\"),\n            colourInput(\"in_strip_text\", \"Strip text\", value = \"#a65628\"),\n        ),\n        mainPanel(\n            plotOutput(\"plot\")\n        )\n    ),\n    server = function(input, output) {\n\n        output$plot &lt;- renderPlot({\n            ggplot(iris, aes(Sepal.Length, Petal.Length, col = Species)) +\n                geom_point() +\n                facet_wrap(~Species) +\n                labs(title = \"Iris dataset\", subtitle = \"Scatterplots of Sepal and Petal lengths\", caption = \"The iris dataset by Edgar Anderson\") +\n                theme_grey(base_size = 16)\n        })\n\n    }\n)\n\n\n\nThe input widgets now need to be connected to the ggplot function.\n\n\nCode\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(colourpicker)\n\nshinyApp(\n    ui = pageWithSidebar(\n        headerPanel(\"ggplot2 plot builder\"),\n        sidebarPanel(\n            colourInput(\"in_plot_title\", \"Plot title\", value = \"#4daf4a\"),\n            colourInput(\"in_plot_subtitle\", \"Plot subtitle\", value = \"#984ea3\"),\n            colourInput(\"in_legend_title\", \"Legend title\", value = \"#ffff33\"),\n            colourInput(\"in_legend_text\", \"legend text\", value = \"#ff7f00\"),\n            selectInput(\"in_legend_pos\", \"Legend position\", choices = c(\"right\", \"left\", \"top\", \"bottom\"), selected = \"right\"),\n            colourInput(\"in_axis_title\", \"Axis title\", value = \"#e41a1c\"),\n            colourInput(\"in_axis_text\", \"Axis text\", value = \"#377eb8\"),\n            colourInput(\"in_strip_text\", \"Strip text\", value = \"#a65628\"),\n        ),\n        mainPanel(\n            plotOutput(\"plot\")\n        )\n    ),\n    server = function(input, output) {\n\n        output$plot &lt;- renderPlot({\n            ggplot(iris, aes(Sepal.Length, Petal.Length, col = Species)) +\n                geom_point() +\n                facet_wrap(~Species) +\n                labs(title = \"Iris dataset\", subtitle = \"Scatterplots of Sepal and Petal lengths\", caption = \"The iris dataset by Edgar Anderson\") +\n                theme_grey(base_size = 16)+\n                theme(\n                  plot.title=element_text(color=input$in_plot_title),\n                  plot.subtitle=element_text(color=input$in_plot_subtitle),\n                  legend.title=element_text(color=input$in_legend_title),\n                  legend.text=element_text(color=input$in_legend_text),\n                  legend.position=input$in_legend_pos,\n                  axis.title=element_text(color=input$in_axis_title),\n                  axis.text=element_text(color=input$in_axis_text),\n                  strip.text=element_text(color=input$in_strip_text)\n                )\n        })\n\n    }\n)\n\n\n\nNow try changing the colours of plot elements and hopefully, it should change.\n You can add more options to the input if you like, for example; rectangular elements such as backgrounds.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 600\n\nwebr::install(c(\"ggplot2\", \"colourpicker\"))\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(colourpicker)\n\nshinyApp(\n    ui = pageWithSidebar(\n        headerPanel(\"ggplot2 plot builder\"),\n        sidebarPanel(\n            colourInput(\"in_plot_title\", \"Plot title\", value = \"#4daf4a\"),\n            colourInput(\"in_plot_subtitle\", \"Plot subtitle\", value = \"#984ea3\"),\n            colourInput(\"in_legend_title\", \"Legend title\", value = \"#ffff33\"),\n            colourInput(\"in_legend_text\", \"legend text\", value = \"#ff7f00\"),\n            selectInput(\"in_legend_pos\", \"Legend position\", choices = c(\"right\", \"left\", \"top\", \"bottom\"), selected = \"right\"),\n            colourInput(\"in_axis_title\", \"Axis title\", value = \"#e41a1c\"),\n            colourInput(\"in_axis_text\", \"Axis text\", value = \"#377eb8\"),\n            colourInput(\"in_strip_text\", \"Strip text\", value = \"#a65628\"),\n            colourInput(\"in_plot_background\", \"Plot background\", value = \"#b3e2cd\"),\n            colourInput(\"in_panel_background\", \"Panel background\", value = \"#fdcdac\"),\n            colourInput(\"in_panel_border\", \"Panel border\", value = \"#cbd5e8\"),\n            colourInput(\"in_legend_background\", \"Legend background\", value = \"#f4cae4\"),\n            colourInput(\"in_legend_box_background\", \"Legend box background\", value = \"#e6f5c9\"),\n            colourInput(\"in_strip_background\", \"Strip background\", value = \"#fff2ae\")\n        ),\n        mainPanel(\n            plotOutput(\"plot\")\n        )\n    ),\n    server = function(input, output) {\n        output$plot &lt;- renderPlot({\n            ggplot(iris, aes(Sepal.Length, Petal.Length, col = Species)) +\n                geom_point() +\n                facet_wrap(~Species) +\n                labs(title = \"Iris dataset\", subtitle = \"Scatterplots of Sepal and Petal lengths\", caption = \"The iris dataset by Edgar Anderson\") +\n                theme_grey(base_size = 16) +\n                theme(\n                    plot.title = element_text(color = input$in_plot_title),\n                    plot.subtitle = element_text(color = input$in_plot_subtitle),\n                    legend.title = element_text(color = input$in_legend_title),\n                    legend.text = element_text(color = input$in_legend_text),\n                    legend.position = input$in_legend_pos,\n                    axis.title = element_text(color = input$in_axis_title),\n                    axis.text = element_text(color = input$in_axis_text),\n                    strip.text = element_text(color = input$in_strip_text),\n                    plot.background = element_rect(fill = input$in_plot_background),\n                    panel.background = element_rect(fill = input$in_panel_background),\n                    panel.border = element_rect(fill = NA, color = input$in_panel_border, size = 3),\n                    legend.background = element_rect(fill = input$in_legend_background),\n                    legend.box.background = element_rect(fill = input$in_legend_box_background),\n                    strip.background = element_rect(fill = input$in_strip_background)\n                )\n        })\n    }\n)"
  },
  {
    "objectID": "labs/shiny/index.html#data-explorer",
    "href": "labs/shiny/index.html#data-explorer",
    "title": "Web apps with Shiny",
    "section": "13 Data explorer",
    "text": "13 Data explorer\nA common use case of shiny apps is to explore a dataset interactively. So we will build a simple app that can create a scatterplot from a dataframe which a user can modify interactively. We will use the built-in iris dataset and the user should be able to select x and y axes variables as well the variable mapped to the color of the points.\nTopics covered\n\nUI sidebar layout\nInput and output widgets\nCreating plots in a shiny app\nPassing variables into ggplot through non standard evaluation\n\nThe following R packages will be required for this app: ggplot2, shiny.\nBelow is a preview of the complete app.\n\n\n13.1 UI\nWe start with a standard shiny app template.\n\nlibrary(shiny)\n\nshinyApp(\n  ui=fluidPage(),\n  server=function(input,output){}\n)\n\nAnd then we start building the UI. We will add a title panel and a sidebar layout with a sidebar and a main panel.\n\nlibrary(shiny)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"Data explorer\"),\n    sidebarLayout(\n      sidebarPanel(),\n      mainPanel()\n    )\n  ),\n  server=function(input,output){}\n)\n\n\nAnd to the sidebar, we will add 3 input widgets corresponding to x axis variable, y axis variable and color variable. These will be dropdown type (selectInput()) and choices will be column names of the iris dataframe. And we add the output widget (plotOutput()) in the main panel.\n\nlibrary(shiny)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"Data explorer\"),\n    sidebarLayout(\n      sidebarPanel(\n          selectInput(\"in_x\",\"X axis variable\", choices=colnames(iris), selected=colnames(iris)[1], multiple=FALSE),\n          selectInput(\"in_y\",\"Y axis variable\", choices=colnames(iris), selected=colnames(iris)[2], multiple=FALSE),\n          selectInput(\"in_col\",\"Colour variable\", choices=colnames(iris), selected=colnames(iris)[3], multiple=FALSE)\n      ),\n      mainPanel(\n        plotOutput(\"out_plot\")\n      )\n    )\n  ),\n  server=function(input,output){}\n)\n\n\n\n\n13.2 Server\nNow, we need to add the server part. First, we write the ggplot code to create a plot.\n\nggplot(iris,aes(x,y,col))+\n      geom_point()\n\nThis is added inside the output render function renderPlot().\n\noutput$out_plot &lt;- renderPlot({\n    ggplot(iris,aes(x,y,col))+\n      geom_point()\n  })\n\nWe need to wire the input variable into the ggplot inputs x, y and col. This is achieved through input$ and the variables are wrapped inside !!sym() to convert quoted text to unquoted variable.\n\noutput$out_plot &lt;- renderPlot({\n  ggplot(iris,aes(!!sym(input$in_x),y=!!sym(input$in_y),col=!!sym(input$in_col)))+\n    geom_point()\n})\n\nThis is finally added to the server function.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 500\n\nlibrary(shiny)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"Data explorer\"),\n    sidebarLayout(\n      sidebarPanel(\n          selectInput(\"in_x\",\"X axis variable\", choices=colnames(iris), selected=colnames(iris)[1], multiple=FALSE),\n          selectInput(\"in_y\",\"Y axis variable\", choices=colnames(iris), selected=colnames(iris)[2], multiple=FALSE),\n          selectInput(\"in_col\",\"Colour variable\", choices=colnames(iris), selected=colnames(iris)[3], multiple=FALSE)\n      ),\n      mainPanel(\n        plotOutput(\"out_plot\")\n      )\n    )\n  ),\n  server=function(input,output){\n    output$out_plot &lt;- renderPlot({\n      ggplot(iris,aes(!!sym(input$in_x),y=!!sym(input$in_y),col=!!sym(input$in_col)))+\n        geom_point()\n    })\n  }\n)\nYou can expand this app to other datasets and map more variables to ggplot etc. Can you add the functionality to download the plots? Or perhaps to upload a csv file and plot from that file?"
  },
  {
    "objectID": "labs/shiny/index.html#color-generator",
    "href": "labs/shiny/index.html#color-generator",
    "title": "Web apps with Shiny",
    "section": "14 Color generator",
    "text": "14 Color generator\nA shiny app to create a palette of distinct colors.\nTopics covered\n\nUI layout using bslib (Bootstrap 5 UI)\nInput and output widgets and reactivity\nUse of custom CSS and custom HTML\n\nThe following R packages will be required for this app: shiny, hues, bslib.\nBelow is a preview of the finished app.\n\nThe core function that generates colors is hues::iwanthue(). What it does is sample colors from the HCL colorspace. Here is an introduction to colorspaces and HCL colorspace. It requires the number of colors to generate.\n\nhues::iwanthue(5)\n\n[1] \"#503F44\" \"#964FB8\" \"#97B2B7\" \"#94BF58\" \"#C6624D\"\n\n\nIn addition, this function has six parameters (hmin,hmax,cmin,cmax,lmin,lmax) to control min and max hue, chroma and lightness. This allows you to define where in the HCL colorspace to sample colors from. Hue controls the color wavelength (red, green etc), chroma controls the intensity or saturation of the color and lightness control the brightness.\nThis gives you mostly warm reddish colors.\n\nhues::iwanthue(5,hmin=0,hmax=5,cmin=80,cmax=160,lmin=38,lmax=70)\n\n[1] \"#B82E53\" \"#D22455\" \"#D34B6A\" \"#F16281\" \"#F22A64\"\n\n\nWhat we are creating is a graphical user interface around this function.\nIn this example, we will use the bslib package to create a bootstrap 5 themed layout using cards. See bslib for more info. This is the structure of the app with cards defined inside a fixed page. See help page for bslib::card() for more information on cards. We also define the page title.\n\nlibrary(bslib)\n\nshinyApp(\n  ui = page_fixed(\n    title = \"Hues\",\n    card(\n      card_header(),\n      layout_sidebar(\n        sidebar()\n      ),\n      card_footer()\n    )\n  ),\n  server = function(input, output) {\n  }\n)\n\n\nNow we define the inputs in the sidebar panel. The number of colors and the three parameters to the colorspace as ranges. Outside the sidebar panel we define our two outputs: an html output to display the names of the colors as hex values. In the footer, we add an acknowledgement link to the hues package.\n\nlibrary(shiny)\nlibrary(hues)\nlibrary(bslib)\n\nshinyApp(\n  ui = page_fixed(\n    title = \"Hues\",\n    card(\n      card_header(\n        h2(\"Colour Generator\"),\n      ),\n      layout_sidebar(\n        sidebar(\n          numericInput(\"in_n\", \"Number of colours\", value = 15),\n          sliderInput(\"in_hue\", \"Hue\", min = 0, max = 360, value = c(0, 360)),\n          sliderInput(\"in_chr\", \"Chroma\", min = 0, max = 180, value = c(0, 180)),\n          sliderInput(\"in_lig\", \"Lightness\", min = 0, max = 100, value = c(0, 100)),\n        ),\n        textOutput(\"out_text\")\n      ),\n      card_footer(\n        div(\"Built on \", a(\"hues package\", href = \"https://github.com/johnbaums/hues\"))\n      )\n    )\n  ),\n  server = function(input, output) {\n  }\n)\n\n\nNow, we add content into the server part. The inputs are passed to the get_colours() reactive function. This function is run inside the renderText() function which outputs the colors as hex values.\n\nlibrary(shiny)\nlibrary(hues)\nlibrary(bslib)\n\nshinyApp(\n  ui = page_fixed(\n    title = \"Hues\",\n    card(\n      card_header(\n        h2(\"Colour Generator\"),\n      ),\n      layout_sidebar(\n        sidebar(\n          numericInput(\"in_n\", \"Number of colours\", value = 15),\n          sliderInput(\"in_hue\", \"Hue\", min = 0, max = 360, value = c(0, 360)),\n          sliderInput(\"in_chr\", \"Chroma\", min = 0, max = 180, value = c(0, 180)),\n          sliderInput(\"in_lig\", \"Lightness\", min = 0, max = 100, value = c(0, 100)),\n        ),\n        textOutput(\"out_text\")\n      ),\n      card_footer(\n        div(\"Built on \", a(\"hues package\", href = \"https://github.com/johnbaums/hues\"))\n      )\n    )\n  ),\n  server = function(input, output) {\n    get_colours &lt;- reactive({\n        hues::iwanthue(\n            n = input$in_n,\n            hmin = min(input$in_hue),\n            hmax = max(input$in_hue),\n            cmin = min(input$in_chr),\n            cmax = max(input$in_chr),\n            lmin = min(input$in_lig),\n            lmax = max(input$in_lig)\n        )\n    })\n\n    output$out_text &lt;- renderText({\n        cols &lt;- get_colours()\n        paste(cols, collapse = \", \")\n    })\n  }\n)\n\n\nThe app will now generate colors as hex values, but we can’t see the colors. It would be nice to visualise the colors. One option would be to create a plot which is generating an image. An alternative lightweight option is to create div elements with the generated colors. For that we add an htmlOutput() element and a new renderText() function to the server part.\nThis function is creating a span element for each color. These spans are organised inside a div. The div and spans have a parent-child relationship. The span elements are laid out in a grid manner using some custom CSS. The custom CSS is added to the head of the app. We have also added a bit of CSS to add some space above the app so it doesn’t touch the top.\n\n\nlibrary(shiny)\nlibrary(hues)\nlibrary(bslib)\n\nshinyApp(\n    ui = page_fixed(\n      class = \"app-container\",\n      tags$head(tags$style(HTML(\"\n      .app-container {\n          margin-top: 1em;\n      }\n\n      .grid-parent {\n          display: grid;\n          gap: 5px;\n          grid-template-columns: repeat(auto-fit, minmax(40px, 40px));\n      }\n\n      .grid-child {\n          height: 40px;\n          width: 40px;\n      }\n    \"))),\n        title = \"Hues\",\n        card(\n            card_header(\n                h2(\"Colour Generator\"),\n            ),\n            layout_sidebar(\n                sidebar(\n                    numericInput(\"in_n\", \"Number of colours\", value = 15),\n                    sliderInput(\"in_hue\", \"Hue\", min = 0, max = 360, value = c(0, 360)),\n                    sliderInput(\"in_chr\", \"Chroma\", min = 0, max = 180, value = c(0, 180)),\n                    sliderInput(\"in_lig\", \"Lightness\", min = 0, max = 100, value = c(0, 100)),\n                ),\n                htmlOutput(\"out_display\"),\n                hr(),\n                textOutput(\"out_text\")\n            ),\n            card_footer(\n                div(\"Built on \", a(\"hues package\", href = \"https://github.com/johnbaums/hues\"))\n            )\n        )\n    ),\n    server = function(input, output) {\n        get_colours &lt;- reactive({\n            hues::iwanthue(\n                n = input$in_n,\n                hmin = min(input$in_hue),\n                hmax = max(input$in_hue),\n                cmin = min(input$in_chr),\n                cmax = max(input$in_chr),\n                lmin = min(input$in_lig),\n                lmax = max(input$in_lig)\n            )\n        })\n\n        output$out_display &lt;- renderText({\n            cols &lt;- get_colours()\n            paste(\"&lt;div class='grid-parent'&gt;\", paste(\"&lt;span class='grid-child' style='background-color:\", cols, \";'&gt;  &lt;/span&gt;\", collapse = \"\"), \"&lt;/div&gt;\", sep = \"\", collapse = \"\")\n        })\n\n        output$out_text &lt;- renderText({\n            cols &lt;- get_colours()\n            paste(cols, collapse = \", \")\n        })\n    }\n)"
  },
  {
    "objectID": "labs/shiny/index.html#rna-seq-power",
    "href": "labs/shiny/index.html#rna-seq-power",
    "title": "Web apps with Shiny",
    "section": "15 RNA-Seq power",
    "text": "15 RNA-Seq power\nRun power analysis for an RNA-Seq experiment.\nTopics covered\n\nUI layout using pre-defined function (pageWithSidebar)\nInput and output widgets and reactivity\nConditional widgets based on user input\nValidating inputs and custom error messages\nCustom theme\n\nThe following R packages are required for this app: c(shiny, shinythemes). In addition, install RNASeqPower from Bioconductor. BiocManager::install('RNASeqPower').\nBelow is a preview of the complete app.\n\n\n15.1 RNASeqPower\nThe R package RNASeqPower helps users to perform a power analysis before running an RNA-Seq experiment. It helps you to estimate, for example, the number of samples required to detect a certain level of significance. The idea of this shiny app is to create a GUI for the RNASeqPower package.\nSo we first need to understand how RNASeqPower works. For a complete understanding, check out RNASeqPower. For our purpose, we will take a brief look at how it works. We only need to use one function rnapower(). Check out ?RNASeqPower::rnapower.\nSo, let’s say we want to find out how many samples are required per group. We have some known input parameters. Let’s say the sequencing depth is 50 (depth=50), coefficient of variation is 0.6 (cv=0.6), effect size is 1.5 fold change (effect=1.5), significance cut-off is 0.05 (alpha=0.05) and lastly power of the test is 0.8 (power=0.8). The parameter we want to compute is the number of samples (n), therefore it is not specified.\n\nlibrary(RNASeqPower)\nRNASeqPower::rnapower(depth=1000,cv=0.6,effect=2,alpha=0.05,power=0.8)\n\n[1] 11.79489\n\n\nAnd we get the number of samples required given these input conditions.\nSimilarly, we can estimate any of the other parameters (except depth). We can try another example where we solve for power. What would the power be for a study with 12 samples per group, to detect a 2-fold change, given deep (50x) coverage?\n\nrnapower(depth=50, n=12, cv=0.6, effect=2, alpha=.05)\n\n[1] 0.7864965\n\n\nAnd the function has returned the power.\nNow the idea is to create a web application take these input parameters from the user through input widgets.\n\n\n15.2 Scaffolding\nLet’s build the basic scaffolding for our app including the input widgets. Let’s assume we are estimating number of samples.\nWe use a sidebar layout. The input controls go on the sidebar panel and the output goes on the main panel. So we need 5 numeric inputs. We can set some default values as well as reasonable min and max values and steps to increase or decrease. The output will be verbatim text, so we use verbatimTextOutput() widget.\n\n#| standalone: true\n#| components: [editor, viewer]\nlibrary(shiny)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"RNA-Seq | Power analysis\"),\n    sidebarLayout(\n      sidebarPanel(\n          numericInput(\"in_pa_depth\",\"Sequencing depth\",value=100,min=1,max=1000,step=5),\n          numericInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4,min=0,max=1,step=0.1),\n          numericInput(\"in_pa_effect\",\"Effect\",value=2,min=0,max=10,step=0.1),\n          numericInput(\"in_pa_alpha\",\"Alpha\",value=0.05,min=0.01,max=0.1,step=0.01),\n          numericInput(\"in_pa_power\",\"Power\",value=0.8,min=0,max=1,step=0.1),\n      ),\n      mainPanel(\n        verbatimTextOutput(\"out_pa\")\n      )\n    )\n  ),\n  server=function(input,output){\n  },\n  options=list(height=\"500px\")\n)\n\nThe app should visually look close to our final end result. Check that the widgets work.\nThe next step is to wire up the inputs to the rnapower() function and return the result to the output text field.\n Try to see if you can get this to work.\n\nlibrary(shiny)\nlibrary(RNASeqPower)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"RNA-Seq | Power analysis\"),\n    sidebarLayout(\n      sidebarPanel(\n          numericInput(\"in_pa_depth\",\"Sequencing depth\",value=100,min=1,max=1000,step=5),\n          numericInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4,min=0,max=1,step=0.1),\n          numericInput(\"in_pa_effect\",\"Effect\",value=2,min=0,max=10,step=0.1),\n          numericInput(\"in_pa_alpha\",\"Alpha\",value=0.05,min=0.01,max=0.1,step=0.01),\n          numericInput(\"in_pa_power\",\"Power\",value=0.8,min=0,max=1,step=0.1),\n      ),\n      mainPanel(\n        verbatimTextOutput(\"out_pa\")\n      )\n    )\n  ),\n  server=function(input,output){\n    output$out_pa &lt;- renderPrint({\n      rnapower(depth=input$in_pa_depth, cv=input$in_pa_cv, \n               effect=input$in_pa_effect, alpha=input$in_pa_alpha,\n               power=input$in_pa_power)\n    })\n  }\n)\n\nVerify that the inputs and outputs work. One can stop at this point if you only need to compute number of samples. But, we will continue to enhance the app to be able to compute any of the other parameters.\n\n\n15.3 Conditional UI\nThe function can estimate not only sample size, but cv, effect, alpha or power. We should let the user choose what they want to compute. So, we need a selection input widget to enable selection. And the input fields must change depending on the user’s selected choice. The rnapower() function must also use a different set of parameters depending on the selection choice. For conditional logic, you can chain if else statements or use switch().\n Try to add a selection based conditional UI. ?selectInput(), ?uiOutput(), ?renderUI().\n\nlibrary(shiny)\nlibrary(RNASeqPower)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"RNA-Seq | Power analysis\"),\n    sidebarLayout(\n      sidebarPanel(\n          selectInput(\"in_pa_est\",\"Variable to estimate\",choices=c(\"n\",\"cv\",\"effect\",\"alpha\",\"power\"),selected=1,multiple=FALSE),\n          uiOutput(\"ui_pa\")\n      ),\n      mainPanel(\n        verbatimTextOutput(\"out_pa\")\n      )\n    )\n  ),\n  server=function(input,output){\n    \n    output$ui_pa &lt;- renderUI({\n      switch(input$in_pa_est,\n      \"n\"=div(\n          numericInput(\"in_pa_depth\",\"Sequencing depth\",value=100,min=1,max=1000,step=5),\n          numericInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4,min=0,max=1,step=0.1),\n          numericInput(\"in_pa_effect\",\"Effect\",value=2,min=0,max=10,step=0.1),\n          numericInput(\"in_pa_alpha\",\"Alpha\",value=0.05,min=0.01,max=0.1,step=0.01),\n          numericInput(\"in_pa_power\",\"Power\",value=0.8,min=0,max=1,step=0.1)\n        ),\n      \"cv\"=div(\n          numericInput(\"in_pa_depth\",\"Sequencing depth\",value=100,min=1,max=1000,step=5),\n          numericInput(\"in_pa_n\",\"Sample size\",value=12,min=3,max=1000,step=1),\n          numericInput(\"in_pa_effect\",\"Effect\",value=2,min=0,max=10,step=0.1),\n          numericInput(\"in_pa_alpha\",\"Alpha\",value=0.05,min=0.01,max=0.1,step=0.01),\n          numericInput(\"in_pa_power\",\"Power\",value=0.8,min=0,max=1,step=0.1)\n        ),\n      \"effect\"=div(\n          numericInput(\"in_pa_depth\",\"Sequencing depth\",value=100,min=1,max=1000,step=5),\n          numericInput(\"in_pa_n\",\"Sample size\",value=12,min=3,max=1000,step=1),\n          numericInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4,min=0,max=1,step=0.1),\n          numericInput(\"in_pa_alpha\",\"Alpha\",value=0.05,min=0.01,max=0.1,step=0.01),\n          numericInput(\"in_pa_power\",\"Power\",value=0.8,min=0,max=1,step=0.1)\n        ),\n      \"alpha\"=div(\n          numericInput(\"in_pa_depth\",\"Sequencing depth\",value=100,min=1,max=1000,step=5),\n          numericInput(\"in_pa_n\",\"Sample size\",value=12,min=3,max=1000,step=1),\n          numericInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4,min=0,max=1,step=0.1),\n          numericInput(\"in_pa_effect\",\"Effect\",value=2,min=0,max=10,step=0.1),\n          numericInput(\"in_pa_power\",\"Power\",value=0.8,min=0,max=1,step=0.1)\n        ),\n      \"power\"=div(\n          numericInput(\"in_pa_depth\",\"Sequencing depth\",value=100,min=1,max=1000,step=5),\n          numericInput(\"in_pa_n\",\"Sample size\",value=12,min=3,max=1000,step=1),\n          numericInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4,min=0,max=1,step=0.1),\n          numericInput(\"in_pa_effect\",\"Effect\",value=2,min=0,max=10,step=0.1),\n          numericInput(\"in_pa_alpha\",\"Alpha\",value=0.05,min=0.01,max=0.1,step=0.01)\n        )\n      )\n    })\n    \n    output$out_pa &lt;- renderPrint({\n      \n      switch(input$in_pa_est,\n        \"n\"=rnapower(depth=input$in_pa_depth, cv=input$in_pa_cv, \n               effect=input$in_pa_effect, alpha=input$in_pa_alpha,\n               power=input$in_pa_power),\n        \"cv\"=rnapower(depth=input$in_pa_depth, n=input$in_pa_n,\n               effect=input$in_pa_effect, alpha=input$in_pa_alpha,\n               power=input$in_pa_power),\n        \"effect\"=rnapower(depth=input$in_pa_depth, cv=input$in_pa_cv, \n               n=input$in_pa_n, alpha=input$in_pa_alpha,\n               power=input$in_pa_power),\n        \"alpha\"=rnapower(depth=input$in_pa_depth, cv=input$in_pa_cv, \n               effect=input$in_pa_effect, n=input$in_pa_n,\n               power=input$in_pa_power),\n        \"power\"=rnapower(depth=input$in_pa_depth, cv=input$in_pa_cv, \n               effect=input$in_pa_effect, alpha=input$in_pa_alpha,\n               n=input$in_pa_n),\n      )\n      \n    })\n  }\n)\n\nLet’s summarize what we have done. In the ui part, instead of directly including the rnapower() input variable in the sidebarPanel(), we have added a selection input and a conditional UI output. The content inside the output UI depends on the selection made by the user.\n\nselectInput(\"in_pa_est\", \"Variable to estimate\", choices=c(\"n\",\"cv\",\"effect\",\"alpha\",\"power\"), selected=1, multiple=FALSE),\nuiOutput(\"ui_pa\")\n\nNow to the server part where we make this all work. All conditional UI elements are inside renderUI({}) and we use a conditional logic inside it. And since we are returning multiple input widgets, they are all wrapped inside a div() container.\n\noutput$ui_pa &lt;- renderUI({\n  switch(input$in_pa_est,\n      \"n\"=div(),\n      \"cv\"=div()\n  )\n})\n\nIn the renderPrint({}) function, we use a similar idea. rnapower() is calculated conditionally based on the user selection.\n\n\n15.4 Multiple numeric input\nAnother feature of the rnapower() function that we have not discussed so far is that all the input arguments can take more than one number as input. Or in other words, instead of a single number, it can take a vector of number. For example;\n\nRNASeqPower::rnapower(depth=c(50,100),cv=0.6,effect=1.5,alpha=0.05,power=0.8)\n\n      50      100 \n36.28393 35.32909 \n\n\nAnd it expands the results in various ways.\n\nRNASeqPower::rnapower(depth=50,cv=0.6,effect=c(1.5,2,3),alpha=0.05,power=0.8)\n\n      1.5         2         3 \n36.283928 12.415675  4.942337 \n\n\n\nRNASeqPower::rnapower(depth=50,cv=c(0.4,0.6),effect=c(1.5,2,3),alpha=0.05,power=0.8)\n\n         1.5         2        3\n0.4 17.18712  5.881109 2.341107\n0.6 36.28393 12.415675 4.942337\n\n\nThe output expands in a bit unpredictable manner and this is the reason why our output widget type is set to verbatimTextOutput({}). Otherwise, we could have formatted it to perhaps, a neater table.\n How do we incorporate this into our app interface? Ponder over this and try to come up with solutions.\nOne way to do it is to accept comma separated values from the user. And then parse that into a vector of numbers. For example;\n\nx &lt;- \"2.5,6\"\nas.numeric(unlist(strsplit(gsub(\" \",\"\",x),\",\")))\n\n[1] 2.5 6.0\n\n\nBlank space are removed, the string is split by comma into a list of strings, the list is converted to a vector and the strings are coerced to numbers.\n Update the app such that all numeric inputs are replaced by text inputs and the server logic is able to parse the strings into numbers.\n\nlibrary(shiny)\nlibrary(RNASeqPower)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"RNA-Seq | Power analysis\"),\n    sidebarLayout(\n      sidebarPanel(\n          selectInput(\"in_pa_est\",\"Variable to estimate\",choices=c(\"n\",\"cv\",\"effect\",\"alpha\",\"power\"),selected=1,multiple=FALSE),\n          uiOutput(\"ui_pa\")\n      ),\n      mainPanel(\n        verbatimTextOutput(\"out_pa\")\n      )\n    )\n  ),\n  server=function(input,output){\n    \n    output$ui_pa &lt;- renderUI({\n      switch(input$in_pa_est,\n      \"n\"=div(\n          textInput(\"in_pa_depth\",\"Sequencing depth\",value=100),\n          textInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4),\n          textInput(\"in_pa_effect\",\"Effect\",value=2),\n          textInput(\"in_pa_alpha\",\"Alpha\",value=0.05),\n          textInput(\"in_pa_power\",\"Power\",value=0.8)\n        ),\n      \"cv\"=div(\n          textInput(\"in_pa_depth\",\"Sequencing depth\",value=100),\n          textInput(\"in_pa_n\",\"Sample size\",value=12),\n          textInput(\"in_pa_effect\",\"Effect\",value=2),\n          textInput(\"in_pa_alpha\",\"Alpha\",value=0.05),\n          textInput(\"in_pa_power\",\"Power\",value=0.8)\n        ),\n      \"effect\"=div(\n          textInput(\"in_pa_depth\",\"Sequencing depth\",value=100),\n          textInput(\"in_pa_n\",\"Sample size\",value=12),\n          textInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4),\n          textInput(\"in_pa_alpha\",\"Alpha\",value=0.05),\n          textInput(\"in_pa_power\",\"Power\",value=0.8)\n        ),\n      \"alpha\"=div(\n          textInput(\"in_pa_depth\",\"Sequencing depth\",value=100),\n          textInput(\"in_pa_n\",\"Sample size\",value=12),\n          textInput(\"in_pa_cv\",\"Coefficient of variation\"),\n          textInput(\"in_pa_effect\",\"Effect\",value=2),\n          textInput(\"in_pa_power\",\"Power\",value=0.8)\n        ),\n      \"power\"=div(\n          textInput(\"in_pa_depth\",\"Sequencing depth\",value=100),\n          textInput(\"in_pa_n\",\"Sample size\",value=12),\n          textInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4),\n          textInput(\"in_pa_effect\",\"Effect\",value=2),\n          textInput(\"in_pa_alpha\",\"Alpha\",value=0.05)\n        )\n      )\n    })\n    \n    output$out_pa &lt;- renderPrint({\n      \n      switch(input$in_pa_est,\n        \"n\"={\n          depth &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_depth),\",\")))\n          cv &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_cv),\",\")))\n          effect &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_effect),\",\")))\n          alpha &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_alpha),\",\")))\n          power &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_power),\",\")))\n          rnapower(depth=depth, cv=cv, effect=effect, alpha=alpha, power=power)\n          },\n        \"cv\"={\n          depth &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_depth),\",\")))\n          n &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_n),\",\")))\n          effect &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_effect),\",\")))\n          alpha &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_alpha),\",\")))\n          power &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_power),\",\")))\n          rnapower(depth=depth, n=n, effect=effect, alpha=alpha, power=power)\n        },\n        \"effect\"={\n          depth &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_depth),\",\")))\n          n &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_n),\",\")))\n          cv &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_cv),\",\")))\n          alpha &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_alpha),\",\")))\n          power &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_power),\",\")))\n          rnapower(depth=depth, cv=cv, n=n, alpha=alpha, power=power)\n        },\n        \"alpha\"={\n          depth &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_depth),\",\")))\n          n &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_n),\",\")))\n          cv &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_cv),\",\")))\n          effect &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_effect),\",\")))\n          power &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_power),\",\")))\n          rnapower(depth=depth, cv=cv, effect=effect, n=n, power=power)\n        },\n        \"power\"={\n          depth &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_depth),\",\")))\n          n &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_n),\",\")))\n          cv &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_cv),\",\")))\n          effect &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_effect),\",\")))\n          alpha &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_alpha),\",\")))\n          rnapower(depth=depth, cv=cv, effect=effect, alpha=alpha, n=n)\n        },\n      )\n      \n    })\n  }\n)\n\nTo summarize our changes, in the ui part, all numericInput() has been changed to textInput() and in the process we lost the number specific input limits such as min, max, step size etc. In the server part, incoming strings are parsed and split into a vector of numbers, saved to a variable and passed to the rnapower() function. Ensure that the app works without errors and we can progress further.\n\n\n15.5 Code cleaning\nIt is good practice to check whether the current code can be cleaned-up/polished or reduced. In this example, depth is always needed and could be moved out of the conditional block. Only one variable changes based on user input, but all 5 variables are repeated in each conditional block. There is room for improvement there.\n Try to figure out how the code can be reorganized and simplified.\n\nlibrary(shiny)\nlibrary(RNASeqPower)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"RNA-Seq | Power analysis\"),\n    sidebarLayout(\n      sidebarPanel(\n          selectInput(\"in_pa_est\",\"Variable to estimate\",choices=c(\"n\",\"cv\",\"effect\",\"alpha\",\"power\"),selected=1,multiple=FALSE),\n          uiOutput(\"ui_pa\")\n      ),\n      mainPanel(\n        verbatimTextOutput(\"out_pa\")\n      )\n    )\n  ),\n  server=function(input,output){\n    \n    output$ui_pa &lt;- renderUI({\n      div(\n        textInput(\"in_pa_depth\",\"Sequencing depth\",value=4),\n        if(input$in_pa_est != \"n\")  textInput(\"in_pa_n\",\"Sample size\",value=100),\n        if(input$in_pa_est != \"cv\")  textInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4),\n        if(input$in_pa_est != \"effect\")  textInput(\"in_pa_effect\",\"Effect\",value=2),\n        if(input$in_pa_est != \"alpha\")  textInput(\"in_pa_alpha\",\"Alpha\",value=0.05),\n        if(input$in_pa_est != \"power\")  textInput(\"in_pa_power\",\"Power\",value=0.8)\n      )\n    })\n    \n    output$out_pa &lt;- renderPrint({\n          depth &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_depth),\",\")))\n          if(input$in_pa_est != \"n\")  n &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_n),\",\")))\n          if(input$in_pa_est != \"cv\") cv &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_cv),\",\")))\n          if(input$in_pa_est != \"effect\") effect &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_effect),\",\")))\n          if(input$in_pa_est != \"alpha\")  alpha &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_alpha),\",\")))\n          if(input$in_pa_est != \"power\")  power &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_power),\",\")))\n            \n      switch(input$in_pa_est,\n        \"n\"=rnapower(depth=depth, cv=cv, effect=effect, alpha=alpha, power=power),\n        \"cv\"=rnapower(depth=depth, n=n, effect=effect, alpha=alpha, power=power),\n        \"effect\"=rnapower(depth=depth, cv=cv, n=n, alpha=alpha, power=power),\n        \"alpha\"=rnapower(depth=depth, cv=cv, effect=effect, n=n, power=power),\n        \"power\"=rnapower(depth=depth, cv=cv, effect=effect, alpha=alpha, n=n)\n      )\n      \n    })\n  }\n)\n\nUI and server blocks have been considerably reduced in length by removing redundant code.\n\n\n15.6 Input validation\nWhen we changed numeric inputs to character, we lost the input limits and numeric validation. Regardless of what input you enter, the app tries to proceed with the calculation.\n Try entering some unreasonable inputs and see what happens. Try entering random strings, or huge integers for alpha etc.\nWe can bring back input validation manually using validate() functions. This can be used to check if the input conforms to some expected range of values and if not, return a message to the user.\nHere are the limits we want to set:\n\ndepth: A numeric\nn: A numeric\ncv: A numeric\neffect: A numeric\nalpha: A numeric between 0 and 1 excluding 0 and 1\npower: A numeric between 0 and 1 excluding 0 and 1\n\n Try to figure out how to add input validation. ?shiny::validate().\n\nlibrary(shiny)\nlibrary(RNASeqPower)\n\n# returns a message if condition is true\nfn_validate &lt;- function(input,message) if(input) print(message)\n\nshinyApp(\n  ui=fluidPage(\n    titlePanel(\"RNA-Seq | Power analysis\"),\n    sidebarLayout(\n      sidebarPanel(\n          selectInput(\"in_pa_est\",\"Variable to estimate\",choices=c(\"n\",\"cv\",\"effect\",\"alpha\",\"power\"),selected=1,multiple=FALSE),\n          uiOutput(\"ui_pa\")\n      ),\n      mainPanel(\n        verbatimTextOutput(\"out_pa\")\n      )\n    )\n  ),\n  server=function(input,output){\n    \n    output$ui_pa &lt;- renderUI({\n      div(\n        textInput(\"in_pa_depth\",\"Sequencing depth\",value=100),\n        if(input$in_pa_est != \"n\")  textInput(\"in_pa_n\",\"Sample size\",value=12),\n        if(input$in_pa_est != \"cv\")  textInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4),\n        if(input$in_pa_est != \"effect\")  textInput(\"in_pa_effect\",\"Effect\",value=2),\n        if(input$in_pa_est != \"alpha\")  textInput(\"in_pa_alpha\",\"Alpha\",value=0.05),\n        if(input$in_pa_est != \"power\")  textInput(\"in_pa_power\",\"Power\",value=0.8)\n      )\n    })\n    \n    output$out_pa &lt;- renderPrint({\n          depth &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_depth),\",\")))\n          validate(fn_validate(any(is.na(depth)),\"Sequencing depth must be a numeric.\"))\n          \n          if(input$in_pa_est != \"n\") {\n            n &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_n),\",\")))       \n            validate(fn_validate(any(is.na(n)),\"Sample size must be a numeric.\"))\n          }\n          \n          if(input$in_pa_est != \"cv\") {\n            cv &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_cv),\",\")))\n            validate(fn_validate(any(is.na(cv)),\"Coefficient of variation must be a numeric.\"))\n          }\n          \n          if(input$in_pa_est != \"effect\") {\n            effect &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_effect),\",\")))\n            validate(fn_validate(any(is.na(effect)),\"Effect must be a numeric.\"))\n          }\n          \n          if(input$in_pa_est != \"alpha\")  {\n            alpha &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_alpha),\",\")))\n            validate(fn_validate(any(is.na(alpha)),\"Alpha must be a numeric.\"))\n            validate(fn_validate(any(alpha&gt;=1|alpha&lt;=0),\"Alpha must be a numeric between 0 and 1.\"))\n          }\n          \n          if(input$in_pa_est != \"power\")  {\n            power &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_power),\",\")))\n            validate(fn_validate(any(is.na(power)),\"Power must be a numeric.\"))\n            validate(fn_validate(any(power&gt;=1|power&lt;=0),\"Power must be a numeric between 0 and 1.\"))\n          }\n            \n      switch(input$in_pa_est,\n        \"n\"=rnapower(depth=depth, cv=cv, effect=effect, alpha=alpha, power=power),\n        \"cv\"=rnapower(depth=depth, n=n, effect=effect, alpha=alpha, power=power),\n        \"effect\"=rnapower(depth=depth, cv=cv, n=n, alpha=alpha, power=power),\n        \"alpha\"=rnapower(depth=depth, cv=cv, effect=effect, n=n, power=power),\n        \"power\"=rnapower(depth=depth, cv=cv, effect=effect, alpha=alpha, n=n)\n      )\n      \n    })\n  }\n)\n\nWe have added validate() to all incoming text to ensure that user input is within reasonable limits.\n Test that the validation works by inputting unreasonable inputs such as alphabets, symbols etc into the input fields.\n\n\n15.7 Theme\nThis part is purely cosmetic. We can add a custom theme from R package shinythemes to make our app stand out from the default. The theme is added as an argument to fluidPage() like so fluidPage(theme = shinytheme(\"spacelab\")).\n Try changing the theme and pick one that you like. Check out ?shinythemes. The themes can be visualized on Bootswatch.\n\nlibrary(shiny)\nlibrary(shinythemes)\nlibrary(RNASeqPower)\n\n# returns a message if condition is true\nfn_validate &lt;- function(input,message) if(input) print(message)\n\nshinyApp(\n  ui=fluidPage(\n    theme=shinytheme(\"spacelab\"),\n    titlePanel(\"RNA-Seq | Power analysis\"),\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(\"in_pa_est\",\"Variable to estimate\",choices=c(\"n\",\"cv\",\"effect\",\"alpha\",\"power\"),selected=1,multiple=FALSE),\n        uiOutput(\"ui_pa\")\n      ),\n      mainPanel(\n        verbatimTextOutput(\"out_pa\")\n      )\n    )\n  ),\n  server=function(input,output){\n    \n    output$ui_pa &lt;- renderUI({\n      div(\n        textInput(\"in_pa_depth\",\"Sequencing depth\",value=100),\n        if(input$in_pa_est != \"n\")  textInput(\"in_pa_n\",\"Sample size\",value=12),\n        if(input$in_pa_est != \"cv\")  textInput(\"in_pa_cv\",\"Coefficient of variation\",value=0.4),\n        if(input$in_pa_est != \"effect\")  textInput(\"in_pa_effect\",\"Effect\",value=2),\n        if(input$in_pa_est != \"alpha\")  textInput(\"in_pa_alpha\",\"Alpha\",value=0.05),\n        if(input$in_pa_est != \"power\")  textInput(\"in_pa_power\",\"Power\",value=0.8)\n      )\n    })\n    \n    output$out_pa &lt;- renderPrint({\n      \n        depth &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_depth),\",\")))\n        validate(fn_validate(any(is.na(depth)),\"Sequencing depth must be a numeric.\"))\n        \n        if(input$in_pa_est != \"n\") {\n          n &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_n),\",\")))       \n          validate(fn_validate(any(is.na(n)),\"Sample size must be a numeric.\"))\n        }\n        \n        if(input$in_pa_est != \"cv\") {\n          cv &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_cv),\",\")))\n          validate(fn_validate(any(is.na(cv)),\"Coefficient of variation must be a numeric.\"))\n        }\n        \n        if(input$in_pa_est != \"effect\") {\n          effect &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_effect),\",\")))\n          validate(fn_validate(any(is.na(effect)),\"Effect must be a numeric.\"))\n        }\n        \n        if(input$in_pa_est != \"alpha\")  {\n          alpha &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_alpha),\",\")))\n          validate(fn_validate(any(is.na(alpha)),\"Alpha must be a numeric.\"))\n          validate(fn_validate(any(alpha&gt;=1|alpha&lt;=0),\"Alpha must be a numeric between 0 and 1.\"))\n        }\n        \n        if(input$in_pa_est != \"power\")  {\n          power &lt;- as.numeric(unlist(strsplit(gsub(\" \",\"\",input$in_pa_power),\",\")))\n          validate(fn_validate(any(is.na(power)),\"Power must be a numeric.\"))\n          validate(fn_validate(any(power&gt;=1|power&lt;=0),\"Power must be a numeric between 0 and 1.\"))\n        }\n        \n        switch(input$in_pa_est,\n               \"n\"=rnapower(depth=depth, cv=cv, effect=effect, alpha=alpha, power=power),\n               \"cv\"=rnapower(depth=depth, n=n, effect=effect, alpha=alpha, power=power),\n               \"effect\"=rnapower(depth=depth, cv=cv, n=n, alpha=alpha, power=power),\n               \"alpha\"=rnapower(depth=depth, cv=cv, effect=effect, n=n, power=power),\n               \"power\"=rnapower(depth=depth, cv=cv, effect=effect, alpha=alpha, n=n)\n        )\n    })\n  }\n)\n\nThis is the completed app.\n\n\n15.8 Deployment\nYou do not necessarily need to do this section. This is just so you know.\nThe app is now ready to be deployed. If you have an account on shinyapps.io, you can quickly deploy this app to your account using the R package rsconnect.\n\nlibrary(rsconnect)\nrsconnect::setAccountInfo(name=\"username\", token=\"KJHF853HG6G59C2F4J7B6\", secret=\"jhHD7%jdg)62F67G/\")\ndeployApp(appName=\"my-awesome-app\",appDir=\".\")\n\nThe packages used are automatically detected and are installed on to the instance. If Bioconductor packages give an error during deployment, the repositories need to be explicitly set on your system.\n\nsetRepositories(c(1,2),graphics=FALSE)\n\nThis completes this app tutorial. Hope you have enjoyed this build and learned something interesting along the way."
  },
  {
    "objectID": "labs/shiny/index.html#session",
    "href": "labs/shiny/index.html#session",
    "title": "Web apps with Shiny",
    "section": "16 Session",
    "text": "16 Session\nInformation about R packages and versions.\n\n16.1 Shinylive\n#| standalone: true\nshinyApp(\n  ui=fluidPage(\n    verbatimTextOutput(\"session\")\n  ),\n  server=function(input, output, session) {\n    output$session &lt;- renderPrint(cat(capture.output(sessionInfo())))\n  }\n)\n\n\n16.2 R\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.4 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Etc/UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] RNASeqPower_1.42.0 shiny_1.8.0       \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.34     later_1.3.2       R6_2.5.1          httpuv_1.6.14    \n [5] fastmap_1.1.1     xfun_0.41         hues_0.2.0        magrittr_2.0.3   \n [9] knitr_1.45        htmltools_0.5.7   rmarkdown_2.25    lifecycle_1.0.4  \n[13] promises_1.2.1    cli_3.6.2         xtable_1.8-4      compiler_4.3.2   \n[17] rstudioapi_0.15.0 tools_4.3.2       ellipsis_0.3.2    mime_0.12        \n[21] evaluate_0.23     colorspace_2.1-0  Rcpp_1.0.12       yaml_2.3.8       \n[25] rlang_1.1.3       jsonlite_1.8.8    htmlwidgets_1.6.4"
  },
  {
    "objectID": "labs/vectorization/index.html",
    "href": "labs/vectorization/index.html",
    "title": "Vectorization",
    "section": "",
    "text": "Note\n\n\n\nIn programming languages loop structures, either with or without conditions, are used to repeat commands over multiple entities. For and while loops as well as if-else statements are also often used in R, but perhaps not as often as in many other programming languages. The reason for this is that in R, there is an alternative called vectorization which usually is more efficient.\nVectorization implies that we can multiply all values in a vector in R by two by calling:\nvec.a &lt;- c(1, 2, 3, 4)\nvec.a * 2\n\n[1] 2 4 6 8\nIn many other and languages as well as in R, you can also create this with a loop instead\nfor (i in vec.a) {\n  vec.a[i] &lt;- vec.a[i] * 2\n}\n\nvec.a\n\n[1] 2 4 6 8\nAs you saw in the lecture, this is far less efficient and not by any means easier to type and we hence tend to avoid loops when possible."
  },
  {
    "objectID": "labs/vectorization/index.html#task-1-a-large-matrix",
    "href": "labs/vectorization/index.html#task-1-a-large-matrix",
    "title": "Vectorization",
    "section": "1 Task 1: A large matrix",
    "text": "1 Task 1: A large matrix\n\n1.1 Looping over a matrix\n\nCreate a 100000 by 10 matrix with the numbers 1:1000000\nWrite a for-loop that calculates the sum for each row of the matrix.\nVerify that your row counts are consistent with what you obtain with the apply() function\nVerify that your row counts are consistent with what you obtain with the apply() function rowSums() function\n\n\n\nCode\nX &lt;- matrix(1:1000000, nrow = 100000, ncol = 10)\nfor.sum &lt;- vector()\n# Note that this loop is much faster if you outside the loop create an empty vector of the right size.\n# rwmeans &lt;- vector('integer', 100000)\nfor (i in 1:nrow(X)) {\n    for.sum[i] &lt;- sum(X[i,])\n}\nhead(for.sum)\n\n\n[1] 4500010 4500020 4500030 4500040 4500050 4500060\n\n\nCode\napp.sum &lt;- apply(X, MARGIN = 1, sum)\nhead(app.sum)\n\n\n[1] 4500010 4500020 4500030 4500040 4500050 4500060\n\n\nCode\nrowSums.sum &lt;- rowSums(X)\nhead(rowSums.sum)\n\n\n[1] 4500010 4500020 4500030 4500040 4500050 4500060\n\n\nCode\nidentical(for.sum, app.sum)\n\n\n[1] TRUE\n\n\nCode\nidentical(for.sum, rowSums.sum)\n\n\n[1] FALSE\n\n\nCode\nidentical(for.sum, as.integer(rowSums.sum))\n\n\n[1] TRUE"
  },
  {
    "objectID": "labs/vectorization/index.html#task-2-fibonacci-sequence",
    "href": "labs/vectorization/index.html#task-2-fibonacci-sequence",
    "title": "Vectorization",
    "section": "2 Task 2: Fibonacci sequence",
    "text": "2 Task 2: Fibonacci sequence\nDuring the lecture an approach to calculate factorials was implemented using recursion (function calling itself). Here we should use recursion to generate a sequence of Fibonacci numbers. A Fibonacci number is part of a series of number with the following properties:\n\nthe first two numbers in the Fibonacci sequence are either 1 and 1, or 0 and 1 (depending on the chosen starting point)\neach subsequent number is the sum of the previous two. Hence:\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, ...\nor\n1, 1, 2, 3, 5, 8, 13, 21, ...\n\n2.1 N-th Fibonacci number\nWrite a function that generates Fibonacci number using a recursive approach.\n\n\nCode\nfib_rec &lt;- function(n) {\n    if (n == 0 || n == 1) { \n        return(n) \n    } else {\n        return(fib_rec(n - 1) + fib_rec(n - 2))\n    }\n}\n\n\n\n\n2.2 Generate Fibonacci sequence\nGenerate Fibonacci numbers from 0 to 10 using *apply* approach.\n\n\nCode\nsapply(0:10, FUN = fib_rec)\n\n\n [1]  0  1  1  2  3  5  8 13 21 34 55\n\n\n\n\n2.3 Vectorized Fibonacci generator\nVectorize your Fibonacci number generating function.\n\n\nCode\nvec_fib_rec &lt;- Vectorize(fib_rec)\nvec_fib_rec(0:10)\n\n\n [1]  0  1  1  2  3  5  8 13 21 34 55"
  },
  {
    "objectID": "slides/debugging/index.html#run-forrest-run",
    "href": "slides/debugging/index.html#run-forrest-run",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Run Forrest, run!",
    "text": "Run Forrest, run!\n\n\n\n\n\nMy code does not run! – debugging\nNow it does run but… out of memory! – profiling\nIt runs! It says it will finish in 5 minutes years. – optimization"
  },
  {
    "objectID": "slides/debugging/index.html#types-of-bugs",
    "href": "slides/debugging/index.html#types-of-bugs",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Types of bugs",
    "text": "Types of bugs\n\n🔣 Syntax errors\n\n\nprin(var1) \nmean(sum(seq((x + 2) * (y - 9 * b))))\n\n\n\n🔢 Arithmetic\n\n\ny &lt;- 7 / 0\n\nNot in R though! y = Inf\n\n\n\n🍎🍊 Type\n\n\nmean('a')\n\n\n\n\n🧩 Logic\n\nEverything works and produces seemingly valid output that is WRONG!\nIMHO those are the hardest 💀 to debug!"
  },
  {
    "objectID": "slides/debugging/index.html#how-to-avoid-bugs",
    "href": "slides/debugging/index.html#how-to-avoid-bugs",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "How to avoid bugs",
    "text": "How to avoid bugs\n\n\n\nEncapsulate your code in smaller units 🍱 (functions), you can test.\nUse classes and type checking 🆗.\nTest 🧪 at the boundaries, e.g. loops at min and max value.\nFeed your functions with test data 💾 that should result with a known output.\nUse antibugging 🕸: stopifnot(y &lt;= 75)"
  },
  {
    "objectID": "slides/debugging/index.html#floating-confusion",
    "href": "slides/debugging/index.html#floating-confusion",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Floating confusion",
    "text": "Floating confusion\n\n\n(vec &lt;- seq(0.1, 0.9, by=0.1))\nvec == 0.7 \nvec == 0.5\n\n\n\n\n[1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\n[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n\n\n\n\n\n(0.5 + 0.1) - 0.6\n(0.7 + 0.1) - 0.8 \n\n\n\n\n\n[1] 0\n[1] -1.110223e-16\n\n\n\n\n💀 Beware of floating point arithmetic! 💀"
  },
  {
    "objectID": "slides/debugging/index.html#how-to-float",
    "href": "slides/debugging/index.html#how-to-float",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "How to float 🏊",
    "text": "How to float 🏊\n\n\nround((0.7 + 0.1) , digits = 2) - 0.8\n\n[1] 0\n\n\n\nComparing floating point numbers:\n\n(vec &lt;- seq(0.1, 0.9, by=0.1))\nvec == 0.7\n\n[1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\n[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\n\n\nepsilon &lt;- 0.001\nabs(vec - 0.7) &lt;= epsilon\n\n[1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE"
  },
  {
    "objectID": "slides/debugging/index.html#final-thoughts-on-floating",
    "href": "slides/debugging/index.html#final-thoughts-on-floating",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Final thoughts on floating",
    "text": "Final thoughts on floating\n\nhead(unlist(.Machine))\n\n    double.eps double.neg.eps    double.xmin    double.xmax    double.base \n  2.220446e-16   1.110223e-16  2.225074e-308  1.797693e+308   2.000000e+00 \n double.digits \n  5.300000e+01 \n\n\n\n\nhead(unlist(.Platform))\n\n   OS.type   file.sep dynlib.ext        GUI     endian    pkgType \n    \"unix\"        \"/\"      \".so\"      \"X11\"   \"little\"   \"source\""
  },
  {
    "objectID": "slides/debugging/index.html#handling-errors",
    "href": "slides/debugging/index.html#handling-errors",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Handling Errors",
    "text": "Handling Errors\nLet us generate some errors:\n\ninput &lt;- c(1, 10, -7, -2/5, 0, 'char', 100, pi, NaN)\nfor (val in input) {\n  (paste0('Log of ', val, 'is ', log10(val)))\n}\n\nError in log10(val): non-numeric argument to mathematical function\n\n\n\n\n\n\n\nSo, how to handle this mess?"
  },
  {
    "objectID": "slides/debugging/index.html#handling-errors-try",
    "href": "slides/debugging/index.html#handling-errors-try",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Handling Errors – try",
    "text": "Handling Errors – try\n\n\ntry(\n  print(\n    paste0('Log of ', input, ' is ', log10(as.numeric(input)))\n  )\n)\n\n\n\n\n[1] \"Log of 1 is 0\"                               \n[2] \"Log of 10 is 1\"                              \n[3] \"Log of -7 is NaN\"                            \n[4] \"Log of -0.4 is NaN\"                          \n[5] \"Log of 0 is -Inf\"                            \n[6] \"Log of char is NA\"                           \n[7] \"Log of 100 is 2\"                             \n[8] \"Log of 3.14159265358979 is 0.497149872694133\"\n[9] \"Log of NaN is NaN\""
  },
  {
    "objectID": "slides/debugging/index.html#handling-errors-trycatch-block",
    "href": "slides/debugging/index.html#handling-errors-trycatch-block",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Handling Errors – tryCatch block:",
    "text": "Handling Errors – tryCatch block:\n\nresult &lt;- tryCatch(log10(val), \n            warning = function(w) { \n              print('Warning! Negative argument supplied. Negating.') \n              log10(-val) }, \n            error = function(e) { \n              print('ERROR! Not a number!')\n              NaN\n            }\n          )\n\n\n\n\n[1] \"Log of 1 is 0\"\n[1] \"Log of 10 is 1\"\n[1] \"Warning! Negative argument supplied. Negating.\"\n[1] \"Log of -7 is 0.845098040014257\"\n[1] \"Warning! Negative argument supplied. Negating.\"\n[1] \"Log of -0.4 is -0.397940008672038\"\n[1] \"Log of 0 is -Inf\"\n[1] \"Log of NA is NA\"\n[1] \"Log of 100 is 2\"\n[1] \"Log of 3.14159265358979 is 0.497149872694133\"\n[1] \"Log of NaN is NaN\""
  },
  {
    "objectID": "slides/debugging/index.html#debugging-errors-and-warnings",
    "href": "slides/debugging/index.html#debugging-errors-and-warnings",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Debugging – errors and warnings",
    "text": "Debugging – errors and warnings\n\n\nAn error in your code will result in a call to the stop() function that:\n\nBreaks the execution of the program (loop, if-statement, etc.)\nPerforms the action defined by the global parameter error.\n\nA warning just prints out the warning message (or reports it in another way)\n\n\n\n\nGlobal parameter error defines what R should do when an error occurs.\n\n\noptions(error = )\n\n\n\n\nYou can use simpleError() and simpleWarning() to generate errors and warnings in your code:\n\n\nf &lt;- function(x) {\n  if (x &lt; 0) {\n    x &lt;- abs(x)\n    w &lt;- simpleWarning(\"Value less than 0. Taking abs(x)\")\n    w\n  }\n}"
  },
  {
    "objectID": "slides/debugging/index.html#debugging-what-are-my-options",
    "href": "slides/debugging/index.html#debugging-what-are-my-options",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Debugging – what are my options?",
    "text": "Debugging – what are my options?\n\nOld-school debugging: a lot of print statements\n\nprint values of your variables at some checkpoints,\nsometimes fine but often laborious,\nneed to remove/comment out manually after debugging.\n\n\n\n\nDumping frames\n\non error, R state will be saved to a file,\nfile can be read into debugger,\nvalues of all variables can be checked,\ncan debug on another machine, e.g. send dump to your colleague!\n\n\n\n\n\nTraceback\n\na list of the recent function calls with values of their parameters\n\n\n\n\n\nStep-by-step debugging\n\nexecute code line by line within the debugger"
  },
  {
    "objectID": "slides/debugging/index.html#option-1-dumping-frames",
    "href": "slides/debugging/index.html#option-1-dumping-frames",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Option 1: dumping frames",
    "text": "Option 1: dumping frames\n\nf &lt;- function(x) { sin(x) }\noptions(error = quote(dump.frames(dumpto = \"assets/testdump\", to.file = T)))\nf('test')\noptions(error = NULL) # reset the behavior\nload('assets/testdump.rda')\n# debugger(testdump)\n\nHint: Last empty line brings you back to the environments menu."
  },
  {
    "objectID": "slides/debugging/index.html#option-2-traceback",
    "href": "slides/debugging/index.html#option-2-traceback",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Option 2: traceback",
    "text": "Option 2: traceback\n\nf &lt;- function(x) { \n  log10(x) \n}\ng &lt;- function(x) { \n  f(x) \n}\ng('test')\n\nError in log10(x): non-numeric argument to mathematical function\n\n\n\n&gt; traceback()\n2: f(x) at #2\n1: g(\"test\")\ntraceback() shows what were the function calls and what parameters were passed to them when the error occurred."
  },
  {
    "objectID": "slides/debugging/index.html#option-3-step-by-step-debugging",
    "href": "slides/debugging/index.html#option-3-step-by-step-debugging",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Option 3: step-by-step debugging",
    "text": "Option 3: step-by-step debugging\n\n\nLet us define a new function h(x, y):\n\nh &lt;- function(x, y) { \n  f(x) \n  f(y) \n}\n\nNow, we can use debug() to debug the function in a step-by-step manner:\n\ndebug(h)\nh('text', 7)\nundebug(h)"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-proc.time",
    "href": "slides/debugging/index.html#profiling-proc.time",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling – proc.time()",
    "text": "Profiling – proc.time()\nProfiling is the process of identifying memory and time bottlenecks 🍾 in your code.\n\nproc.time()\n\n   user  system elapsed \n  1.798   0.708   1.532 \n\n\n\nuser time – CPU time charged for the execution of user instructions of the calling process,\nsystem time – CPU time charged for execution by the system on behalf of the calling process,\nelapsed time – total CPU time elapsed for the currently running R process.\n\n\n\npt1 &lt;- proc.time()\ntmp &lt;- runif(n =  10e5)\npt2 &lt;- proc.time()\npt2 - pt1\n\n   user  system elapsed \n  0.017   0.007   0.025"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-system.time",
    "href": "slides/debugging/index.html#profiling-system.time",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling – system.time()",
    "text": "Profiling – system.time()\n\nsystem.time(runif(n = 10e6))\nsystem.time(rnorm(n = 10e6))\n\n   user  system elapsed \n  0.260   0.009   0.268 \n   user  system elapsed \n  0.433   0.020   0.454 \n\n\n\nAn alternative approach is to use tic and toc statements from the tictoc package.\n\nlibrary(tictoc)\ntic()\ntmp1 &lt;- runif(n = 10e6)\ntoc()\n\n0.228 sec elapsed"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-in-action",
    "href": "slides/debugging/index.html#profiling-in-action",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling in action",
    "text": "Profiling in action\nThese 4 functions fill a large vector with values supplied by function f.\n\n1 – loop without memory allocation.\n\nfun_fill_loop1 &lt;- function(n = 10e6, f) {\n  result &lt;- NULL\n  for (i in 1:n) {\n    result &lt;- c(result, eval(call(f, 1)))\n  }\n  return(result)\n}\n\n\n\n2 – loop with memory allocation.\n\nfun_fill_loop2 &lt;- function(n = 10e6, f) {\n  result &lt;- vector(length = n)\n  for (i in 1:n) {\n    result[i] &lt;- eval(call(f, 1))\n  }\n  return(result)\n}"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-in-action-cted.",
    "href": "slides/debugging/index.html#profiling-in-action-cted.",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling in action cted.",
    "text": "Profiling in action cted.\nBut it is maybe better to use…\n\nvectorization!\n\n\n3 – vectorized loop without memory allocation.\n\nfun_fill_vec1 &lt;- function(n = 10e6, f) {\n  result &lt;- NULL\n  result &lt;- eval(call(f, n))\n  return(result)\n}\n\n\n\n4 – vectorized with memory allocation.\n\nfun_fill_vec2 &lt;- function(n = 10e6, f) {\n  result &lt;- vector(length = n)\n  result &lt;- eval(call(f, n))\n  return(result)\n}"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-our-functions",
    "href": "slides/debugging/index.html#profiling-our-functions",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling our functions",
    "text": "Profiling our functions\n\n\np1 &lt;- system.time(fun_fill_loop1(n = 10e4, \"runif\")) # 1 - loop, no alloc\np2 &lt;- system.time(fun_fill_loop2(n = 10e4, \"runif\")) # 2 - loop, alloc \np3 &lt;- system.time(fun_fill_vec1(n = 10e4, \"runif\"))  # 3 - vector, no alloc\np4 &lt;- system.time(fun_fill_vec2(n = 10e4, \"runif\"))  # 4 - vector, alloc\n\n\n\n\nfn\nuser.self\nsys.self\nelapsed\n\n\n\n\nfn1\n11.973\n0.099\n12.073\n\n\nfn2\n0.386\n0.032\n0.418\n\n\nfn3\n0.002\n0.000\n0.002\n\n\nfn4\n0.002\n0.000\n0.002\n\n\n\nThe system.time() function is not the most accurate though. During the lab, we will experiment with package microbenchmark."
  },
  {
    "objectID": "slides/debugging/index.html#more-advanced-profiling",
    "href": "slides/debugging/index.html#more-advanced-profiling",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "More advanced profiling",
    "text": "More advanced profiling\nWe can also do a bit more advanced profiling, including the memory profiling, using, e.g. Rprof() function.\n\nRprof('profiler_test.out', interval = 0.01, memory.profiling = T)\nfor (i in 1:5) {\n  result &lt;- fun_fill_loop2(n = 10e4, \"runif\")\n  print(result)\n}\nRprof(NULL)\n\nAnd let us summarise:\n\nsummary &lt;- summaryRprof(\"profiler_test.out\", memory = \"both\")\nknitr::kable(summary$by.self)\n\n\n\n\n\n\n\n\n\n\n\n\n\nself.time\nself.pct\ntotal.time\ntotal.pct\nmem.total\n\n\n\n\n“runif”\n2.13\n48.41\n2.13\n48.41\n1899.0\n\n\n“eval”\n1.04\n23.64\n3.29\n74.77\n3334.7\n\n\n“print.default”\n0.85\n19.32\n0.85\n19.32\n72.1\n\n\n“fun_fill_loop2”\n0.24\n5.45\n3.53\n80.23\n3646.3\n\n\n“parent.frame”\n0.06\n1.36\n0.06\n1.36\n64.6\n\n\n“is.list”\n0.05\n1.14\n0.05\n1.14\n82.3\n\n\n“is.pairlist”\n0.01\n0.23\n0.01\n0.23\n23.1\n\n\n“mayCallBrowser”\n0.01\n0.23\n0.01\n0.23\n1.0\n\n\n“strsplit”\n0.01\n0.23\n0.01\n0.23\n0.4"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-profr-package",
    "href": "slides/debugging/index.html#profiling-profr-package",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling – profr package",
    "text": "Profiling – profr package\nThere are also packages available that enable even more advanced profiling:\n\nlibrary(profr)\nRprof(\"profiler_test2.out\", interval = 0.01)\ntmp &lt;- table(sort(rnorm(1e5)))\nRprof(NULL)\nprofile_df &lt;- parse_rprof('profiler_test2.out')\n\nThis returns a table that can be visualised:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlevel\ng_id\nt_id\nf\nstart\nend\nn\nleaf\ntime\nsource\n\n\n\n\n1\n1\n1\n.main\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n2\n1\n1\nexecute\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n3\n1\n1\nrmarkdown::render\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n4\n1\n1\nknitr::knit\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n5\n1\n1\nprocess_file\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n6\n1\n1\nhandle_error\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n7\n1\n1\nwithCallingHandlers\n0.00\n0.40\n1\nFALSE\n0.40\nbase\n\n\n8\n1\n1\nwithCallingHandlers\n0.00\n0.40\n1\nFALSE\n0.40\nbase\n\n\n9\n1\n1\nprocess_group\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n10\n1\n1\nprocess_group.block\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n11\n1\n1\ncall_block\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n12\n1\n1\nblock_exec\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n13\n1\n1\neng_r\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n14\n1\n1\nin_input_dir\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n15\n1\n1\nin_dir\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n16\n1\n1\nevaluate\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n17\n1\n1\nevaluate::evaluate\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n18\n1\n1\nevaluate_call\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n19\n1\n1\ntiming_fn\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n20\n1\n1\nhandle\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n21\n1\n1\nwithCallingHandlers\n0.00\n0.40\n1\nFALSE\n0.40\nbase\n\n\n22\n1\n1\nwithVisible\n0.00\n0.40\n1\nFALSE\n0.40\nbase\n\n\n23\n1\n1\neval_with_user_handlers\n0.00\n0.40\n1\nFALSE\n0.40\nNA\n\n\n24\n1\n1\neval\n0.00\n0.40\n1\nFALSE\n0.40\nbase\n\n\n25\n1\n1\neval\n0.00\n0.40\n1\nFALSE\n0.40\nbase\n\n\n26\n1\n1\ntable\n0.00\n0.40\n1\nFALSE\n0.40\nbase\n\n\n27\n1\n1\nfactor\n0.00\n0.40\n1\nFALSE\n0.40\nbase\n\n\n28\n1\n1\nunique\n0.00\n0.22\n1\nTRUE\n0.22\nbase\n\n\n29\n1\n1\nunique.default\n0.02\n0.22\n1\nTRUE\n0.20\nbase"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-profr-package-cted.",
    "href": "slides/debugging/index.html#profiling-profr-package-cted.",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling – profr package cted.",
    "text": "Profiling – profr package cted.\nWe can also plot the results using – proftools package-\n\nlibrary(proftools)\nprofile_df2 &lt;- readProfileData(\"profiler_test2.out\")\nplotProfileCallGraph(profile_df2, style = google.style, score = \"total\")"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-with-profvis",
    "href": "slides/debugging/index.html#profiling-with-profvis",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling with profvis",
    "text": "Profiling with profvis\nYet another nice way to profile your code is by using Hadley Wickham’s profvis package:\n\nlibrary(profvis)\nprofvis({fun_fill_loop2(1e4, 'runif')\n  fun_fill_vec2(1e4, 'runif')\n})"
  },
  {
    "objectID": "slides/debugging/index.html#profiling-with-profvis-cted.",
    "href": "slides/debugging/index.html#profiling-with-profvis-cted.",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Profiling with profvis cted.",
    "text": "Profiling with profvis cted."
  },
  {
    "objectID": "slides/debugging/index.html#optimizing-your-code",
    "href": "slides/debugging/index.html#optimizing-your-code",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Optimizing your code",
    "text": "Optimizing your code\n\nWe should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. A good programmer will not be deluded into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified.\n– Donald Knuth\n\n\n\n\nsource: http://www.xkcd/com/1319\n\n\nsource: http://www.xkcd/com/1205"
  },
  {
    "objectID": "slides/debugging/index.html#ways-to-optimize-the-code",
    "href": "slides/debugging/index.html#ways-to-optimize-the-code",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Ways to optimize the code",
    "text": "Ways to optimize the code\n\n\nwrite it in a more efficient way, e.g. use vectorization or *apply family instead of loops etc.,\nallocating memory to avoid copy-on-modify,\nuse package BLAS for linear algebra,\nuse bigmemory package,\nGPU computations,\nmulticore support, e.g. multicore, snow\nuse futures\nuse data.table or tibble instead of data.frame"
  },
  {
    "objectID": "slides/debugging/index.html#copy-on-modify",
    "href": "slides/debugging/index.html#copy-on-modify",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Copy-on-modify",
    "text": "Copy-on-modify\n\nlibrary(pryr)\norder &lt;- 1024\nmatrix_A &lt;- matrix(rnorm(order^2), nrow = order)\nmatrix_B &lt;- matrix_A\n\n\nCheck where the objects are in the memory:\n\n\n\naddress(matrix_A)\naddress(matrix_B)\n\n[1] \"0x7fe490ab0010\"\n[1] \"0x7fe490ab0010\"\n\n\n\n\nWhat happens if we modify a value in one of the matrices?\n\n\n\nmatrix_B[1,1] &lt;- 1\naddress(matrix_A)\naddress(matrix_B)\n\n[1] \"0x7fe490ab0010\"\n[1] \"0x7fe4902af010\""
  },
  {
    "objectID": "slides/debugging/index.html#avoid-copying-by-allocating-memory",
    "href": "slides/debugging/index.html#avoid-copying-by-allocating-memory",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Avoid copying by allocating memory",
    "text": "Avoid copying by allocating memory\nNo memory allocation\n\nf1 &lt;- function(to = 3, silent=F) {\n  tmp &lt;- c()\n  for (i in 1:to) {\n    a1 &lt;- address(tmp)\n    tmp &lt;- c(tmp, i)\n    a2 &lt;- address(tmp)\n    if (!silent) { print(paste0(a1, \" --&gt; \", a2)) } \n  }\n}\nf1()\n\n[1] \"0x561c9d55e560 --&gt; 0x561ca3e80678\"\n[1] \"0x561ca3e80678 --&gt; 0x561ca3e802f8\"\n[1] \"0x561ca3e802f8 --&gt; 0x561ca3e71908\""
  },
  {
    "objectID": "slides/debugging/index.html#avoid-copying-by-allocating-memory-cted.",
    "href": "slides/debugging/index.html#avoid-copying-by-allocating-memory-cted.",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Avoid copying by allocating memory cted.",
    "text": "Avoid copying by allocating memory cted.\nWith memory allocation\n\nf2 &lt;- function(to = 3, silent = FALSE) {\n  tmp &lt;- vector(length = to, mode='numeric')\n  for (i in 1:to) {\n    a1 &lt;- address(tmp)\n    tmp[i] &lt;- i\n    a2 &lt;- address(tmp)\n    if(!silent) { print(paste0(a1, \" --&gt; \", a2)) }\n  }\n}\nf2()\n\n[1] \"0x561ca87f50d8 --&gt; 0x561ca87f50d8\"\n[1] \"0x561ca87f50d8 --&gt; 0x561ca87f50d8\"\n[1] \"0x561ca87f50d8 --&gt; 0x561ca87f50d8\""
  },
  {
    "objectID": "slides/debugging/index.html#allocating-memory-benchmark.",
    "href": "slides/debugging/index.html#allocating-memory-benchmark.",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Allocating memory – benchmark.",
    "text": "Allocating memory – benchmark.\n\nlibrary(microbenchmark)\nbenchmrk &lt;- microbenchmark(f1(to = 1e3, silent = T), \n                           f2(to = 1e3, silent = T), \n                           times = 100L)\nggplot2::autoplot(benchmrk)"
  },
  {
    "objectID": "slides/debugging/index.html#gpu",
    "href": "slides/debugging/index.html#gpu",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "GPU",
    "text": "GPU\n\nA = matrix(rnorm(1000^2), nrow=1000) # stored: RAM, computed: CPU\nB = matrix(rnorm(1000^2), nrow=1000) \ngpuA = gpuMatrix(A, type = \"float\") # stored: RAM, computed: GPU\ngpuB = gpuMatrix(B, type = \"float\")\nvclA = vclMatrix(A, type = \"float\") # stored: GPU, computed: GPU\nvclB = vclMatrix(B, type = \"float\")\nbch &lt;- microbenchmark(\n  cpu_ram = A %*% B,\n  gpu_ram = gpuA %*% gpuB,\n  gpu_vcl = vclA %*% vclB, \n  times = 10L) \n\nMore on Charles Determan’s Blog."
  },
  {
    "objectID": "slides/debugging/index.html#gpu-cted.",
    "href": "slides/debugging/index.html#gpu-cted.",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "GPU cted.",
    "text": "GPU cted.\n\nggplot2::autoplot(bch)"
  },
  {
    "objectID": "slides/debugging/index.html#parallelization-using-package-parallel",
    "href": "slides/debugging/index.html#parallelization-using-package-parallel",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "Parallelization using package parallel",
    "text": "Parallelization using package parallel\nEasiest to parallelize is lapply:\n\nresult &lt;- lapply(1:2, function(x) { c(x, x^2, x^3) })\nresult\n\n[[1]]\n[1] 1 1 1\n\n[[2]]\n[1] 2 4 8\n\n\n\nlibrary(parallel)\nnum_cores &lt;- detectCores() - 1\ncl &lt;- makeCluster(num_cores) # Init cluster\nparLapply(cl, 1:2, function(x) { c(x, x^2, x^3)} )\nstopCluster(cl)\n\n[[1]]\n[1] 1 1 1\n\n[[2]]\n[1] 2 4 8"
  },
  {
    "objectID": "slides/debugging/index.html#section-1",
    "href": "slides/debugging/index.html#section-1",
    "title": "Debugging, Profiling, and a Bit of Optimization",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/ggplot/index.html#graphs",
    "href": "slides/ggplot/index.html#graphs",
    "title": "Plotting with ggplot2",
    "section": "Graphs",
    "text": "Graphs\nGraphing is an essential part of data analyses. Data with same summary statistics can look very different when plotted out.\n\n\n\n\n\n\n\n\n\n\nSummary statistics do not always reflect how the data looks like.\n\nAnscombe’s quartet comprises four data sets that have nearly identical simple descriptive statistics, yet have very different distributions and appear very different when graphed.\n\nA more modern example dataset is datasaurus dozen. A set of 13 xy datasets that have nearly identical summary statistics but look very different when plotted out. One of the plots is in fact a dinosaur.\n\n\n\nAnscombe’s quartet, Datasaurus"
  },
  {
    "objectID": "slides/ggplot/index.html#r-graphics",
    "href": "slides/ggplot/index.html#r-graphics",
    "title": "Plotting with ggplot2",
    "section": "R graphics",
    "text": "R graphics\n\n\n\n\n\n\n\n\nTypical R plots with default settings in base R and ggplot2."
  },
  {
    "objectID": "slides/ggplot/index.html#ggplot2-vs-base-graphics",
    "href": "slides/ggplot/index.html#ggplot2-vs-base-graphics",
    "title": "Plotting with ggplot2",
    "section": "ggplot2 vs Base Graphics",
    "text": "ggplot2 vs Base Graphics\n\n\n\nhist(iris$Sepal.Length)\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(iris,aes(x=Sepal.Length))+\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\nFor simple graphs, the base plot seems to take minimal coding effort compared to a ggplot graph."
  },
  {
    "objectID": "slides/ggplot/index.html#ggplot2-vs-base-graphics-1",
    "href": "slides/ggplot/index.html#ggplot2-vs-base-graphics-1",
    "title": "Plotting with ggplot2",
    "section": "ggplot2 vs Base Graphics",
    "text": "ggplot2 vs Base Graphics\n\n\n\nplot(iris$Petal.Length,iris$Petal.Width,\n     col=c(\"red\",\"green\",\"blue\")[iris$Species],\n     pch=c(0,1,2)[iris$Species])\nlegend(x=1,y=2.5,\n       legend=c(\"setosa\",\"versicolor\",\"virginica\"),\n       pch=c(0,1,2),col=c(\"red\",\"green\",\"blue\"))\n\n\n\n\n\n\n\n\n\n\nggplot(iris,aes(Petal.Length,Sepal.Length,color=Species))+\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nFor anything beyond extremely basic plots, base plotting quickly become complex. More importantly, base plots do not have consistency in it’s functions or plotting strategy."
  },
  {
    "objectID": "slides/ggplot/index.html#why-ggplot2",
    "href": "slides/ggplot/index.html#why-ggplot2",
    "title": "Plotting with ggplot2",
    "section": "Why ggplot2?",
    "text": "Why ggplot2?\n\nConsistent code for any type of plot (almost!)\nFlexible and modular (Add/remove components)\nAutomatic legends, colors etc\nSave plot objects\nThemes for reusing styles\nNumerous add-ons/extensions\nNearly complete structured graphing solution\nAdapted to other programming languages\n\nGadfly in Julia\ngramm in MatLab\nGGPlot in Perl\nPlotNine , ggpy, lets-plot in Python\n\n\n\nggplot2 has a consistent logic and more structured code for plotting. There is bit of a learning curve, but once the code syntax and the logic is clear, it becomes easy to plot a huge variety of graphs."
  },
  {
    "objectID": "slides/ggplot/index.html#grammar-of-graphics",
    "href": "slides/ggplot/index.html#grammar-of-graphics",
    "title": "Plotting with ggplot2",
    "section": "Grammar Of Graphics",
    "text": "Grammar Of Graphics\n\n\n\n\n\n\nCreated by Hadley Wickham in 2005\nData: Input data\nGeom: A geometry representing data. Points, Lines etc\nAesthetic: Visual characteristics of the geometry. Size, Color, Shape etc\nScale: How visual characteristics are converted to display values\nStatistics: Statistical transformations. Counts, Means etc\nCoordinates: Numeric system to determine position of geometry. Cartesian, Polar etc\nFacets: Split data into subsets\n\n\n\n\nTraditional graphing tools generally have independent set of rules for different kinds of graphs and also labelled differently such as barplots, scatterplots, boxplots etc. Each graph has it’s own function and plotting strategy.\nLeland Wilkinson’s The Grammar of Graphics introduces this idea that any kind of graph can be created by following a set of rules and put forward a framework that enables this.\nGrammar of graphics (GOG) tries to unify all graphs under a common umbrella. GOG brings the idea that graphs are made up of discrete elements (data, aesthetics, geometry, statistics, coordinates, facets, themes etc) which can be mixed and matched to create any plot. This creates a consistent underlying framework to graphing.\nggplot (Grammar of graphics) was built in R by Hadley Wickham in 2005 as an implementation of Leland Wilkinson’s book Grammar of Graphics."
  },
  {
    "objectID": "slides/ggplot/index.html#building-a-graph-syntax",
    "href": "slides/ggplot/index.html#building-a-graph-syntax",
    "title": "Plotting with ggplot2",
    "section": "Building A Graph: Syntax",
    "text": "Building A Graph: Syntax"
  },
  {
    "objectID": "slides/ggplot/index.html#building-a-graph",
    "href": "slides/ggplot/index.html#building-a-graph",
    "title": "Plotting with ggplot2",
    "section": "Building A Graph",
    "text": "Building A Graph\n\n\n\ndata(iris)\nggplot(iris)"
  },
  {
    "objectID": "slides/ggplot/index.html#building-a-graph-1",
    "href": "slides/ggplot/index.html#building-a-graph-1",
    "title": "Plotting with ggplot2",
    "section": "Building A Graph",
    "text": "Building A Graph\n\n\n\nggplot(iris,aes(x=Sepal.Length,\n                y=Sepal.Width))"
  },
  {
    "objectID": "slides/ggplot/index.html#building-a-graph-2",
    "href": "slides/ggplot/index.html#building-a-graph-2",
    "title": "Plotting with ggplot2",
    "section": "Building A Graph",
    "text": "Building A Graph\n\n\n\nggplot(iris,aes(x=Sepal.Length,\n                y=Sepal.Width))+\n  geom_point()"
  },
  {
    "objectID": "slides/ggplot/index.html#building-a-graph-3",
    "href": "slides/ggplot/index.html#building-a-graph-3",
    "title": "Plotting with ggplot2",
    "section": "Building A Graph",
    "text": "Building A Graph\n\n\n\nggplot(iris,aes(x=Sepal.Length,\n                y=Sepal.Width,\n                colour=Species))+\n  geom_point()"
  },
  {
    "objectID": "slides/ggplot/index.html#data-iris",
    "href": "slides/ggplot/index.html#data-iris",
    "title": "Plotting with ggplot2",
    "section": "Data • iris",
    "text": "Data • iris\n\nInput data is always an R data.frame object\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\n\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\nIt’s a good idea to use str() to check the input dataframe to make sure that numbers are actually numbers and not characters, for example. Verify that factors are correctly assigned."
  },
  {
    "objectID": "slides/ggplot/index.html#data-diamonds",
    "href": "slides/ggplot/index.html#data-diamonds",
    "title": "Plotting with ggplot2",
    "section": "Data • diamonds",
    "text": "Data • diamonds\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0.23\nIdeal\nE\nSI2\n61.5\n55\n326\n3.95\n3.98\n2.43\n\n\n0.21\nPremium\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n\n\n0.23\nGood\nE\nVS1\n56.9\n65\n327\n4.05\n4.07\n2.31\n\n\n0.29\nPremium\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n\n\n0.31\nGood\nJ\nSI2\n63.3\n58\n335\n4.34\n4.35\n2.75\n\n\n0.24\nVery Good\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n\n\n\n\n\n\n\n\n\nstr(diamonds)\n\ntibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)\n $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n $ cut    : Ord.factor w/ 5 levels \"Fair\"&lt;\"Good\"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...\n $ color  : Ord.factor w/ 7 levels \"D\"&lt;\"E\"&lt;\"F\"&lt;\"G\"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...\n $ clarity: Ord.factor w/ 8 levels \"I1\"&lt;\"SI2\"&lt;\"SI1\"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...\n $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n\n\n\nR data.frame is a tabular format with rows and columns just like a spreadsheet."
  },
  {
    "objectID": "slides/ggplot/index.html#data-format",
    "href": "slides/ggplot/index.html#data-format",
    "title": "Plotting with ggplot2",
    "section": "Data • Format",
    "text": "Data • Format\n\nWide\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n\n\n\n\n\n\nLong\n\n\n\n\n\n\nSpecies\nvariable\nvalue\n\n\n\n\nsetosa\nSepal.Length\n5.1\n\n\nsetosa\nSepal.Length\n4.9\n\n\nsetosa\nSepal.Length\n4.7\n\n\n\n\n\n\n\n\n\nThe data must be cleaned up and prepared for plotting. The data must be ‘tidy’. Columns must be variables and rows must be observations. The data can then be in wide or long format depending on the variables to be plotted."
  },
  {
    "objectID": "slides/ggplot/index.html#geoms",
    "href": "slides/ggplot/index.html#geoms",
    "title": "Plotting with ggplot2",
    "section": "Geoms",
    "text": "Geoms\n\ngeoms\n\np &lt;- ggplot(iris)\n# scatterplot\np+geom_point(aes(x=Sepal.Length,y=Sepal.Width))\n# barplot\np+geom_bar(aes(x=Sepal.Length))\n# boxplot\np+geom_boxplot(aes(x=Species,y=Sepal.Width))\n# search\nhelp.search(\"^geom_\",package=\"ggplot2\")\n\n\nGeoms are the geometric components of a graph such as points, lines etc used to represent data. The same data can be visually represented in different geoms. For example, points or bars. Mandatory input requirements change depending on geoms."
  },
  {
    "objectID": "slides/ggplot/index.html#stats",
    "href": "slides/ggplot/index.html#stats",
    "title": "Plotting with ggplot2",
    "section": "Stats",
    "text": "Stats\n\nStats compute new variables from input data.\n\n\n\nGeoms have default stats.\n\n\nx &lt;- ggplot(iris) + geom_bar(aes(x=Sepal.Length),stat=\"bin\")\ny &lt;- ggplot(iris) + geom_bar(aes(x=Species),stat=\"count\")\nz &lt;- ggplot(iris) + geom_bar(aes(x=Species,y=Sepal.Length),stat=\"identity\")\nwrap_plots(x,y,z,nrow=1)"
  },
  {
    "objectID": "slides/ggplot/index.html#stats-1",
    "href": "slides/ggplot/index.html#stats-1",
    "title": "Plotting with ggplot2",
    "section": "Stats",
    "text": "Stats\n\nPlots can be built with stats.\n\n\nx &lt;- ggplot(iris) + stat_bin(aes(x=Sepal.Length),geom=\"bar\")\ny &lt;- ggplot(iris) + stat_count(aes(x=Species),geom=\"bar\")\nz &lt;- ggplot(iris) + stat_identity(aes(x=Species,y=Sepal.Length),geom=\"bar\")\nwrap_plots(x,y,z,nrow=1)\n\n\n\n\nNormally the data is plotted directly from input as it is.\nSome plots require the data to be computed or transformed. Eg. boxplot, histograms, smoothing, predictions, regression etc."
  },
  {
    "objectID": "slides/ggplot/index.html#stats-2",
    "href": "slides/ggplot/index.html#stats-2",
    "title": "Plotting with ggplot2",
    "section": "Stats",
    "text": "Stats\n\nStats have default geoms.\n\n\n\n\n\n\n\nplot\nstat\ngeom\n\n\n\n\nhistogram\nbin\nbar\n\n\nsmooth\nsmooth\nline\n\n\nboxplot\nboxplot\nboxplot\n\n\ndensity\ndensity\nline\n\n\nfreqpoly\nfreqpoly\nline\n\n\n\n\n\n\n\n\nUse args(geom_bar) to check arguments."
  },
  {
    "objectID": "slides/ggplot/index.html#aesthetics",
    "href": "slides/ggplot/index.html#aesthetics",
    "title": "Plotting with ggplot2",
    "section": "Aesthetics",
    "text": "Aesthetics\n\n\n\nAesthetic mapping\n\n\nggplot(iris)+\n  geom_point(aes(x=Sepal.Length,\n                 y=Sepal.Width,\n                 size=Petal.Length,\n                 alpha=Petal.Width,\n                 shape=Species,\n                 color=Species))\n\n\n\n\n\n\n\n\n\n\nAesthetic parameter\n\n\nggplot(iris)+\n  geom_point(aes(x=Sepal.Length,\n                 y=Sepal.Width),\n                 size=2,\n                 alpha=0.8,\n                 shape=15,\n                 color=\"steelblue\")\n\n\n\n\n\n\n\n\n\n\n\nAesthetics are used to assign values to geometries. For example, a set of points can be a fixed size or can be different colors or sizes denoting a variable.\nThis would be an incorrect way to do it.\nggplot(iris)+\ngeom_point(aes(x=Sepal.Length,y=Sepal.Width,size=2)"
  },
  {
    "objectID": "slides/ggplot/index.html#aesthetics-1",
    "href": "slides/ggplot/index.html#aesthetics-1",
    "title": "Plotting with ggplot2",
    "section": "Aesthetics",
    "text": "Aesthetics\n\nx1 &lt;- ggplot(iris) +\n  geom_point(aes(x=Sepal.Length,y=Sepal.Width))+\n  stat_smooth(aes(x=Sepal.Length,y=Sepal.Width))\n\nx2 &lt;- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+\n                      geom_point() + geom_smooth()\n\nwrap_plots(x1,x2,nrow=1,ncol=2)\n\n\n\nIf the same aesthetics are used in multiple geoms, they can be moved to ggplot()."
  },
  {
    "objectID": "slides/ggplot/index.html#multiple-geoms",
    "href": "slides/ggplot/index.html#multiple-geoms",
    "title": "Plotting with ggplot2",
    "section": "Multiple Geoms",
    "text": "Multiple Geoms\n\nggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+\n      geom_point()+\n      geom_line()+\n      geom_smooth()+\n      geom_rug()+\n      geom_step()+\n      geom_text(data=subset(iris,iris$Species==\"setosa\"),aes(label=Species))\n\n\n\nMultiple geoms can be plotted one after the other. The order in which items are specified in the command dictates the plotting order on the actual plot.\nIn this case, the points appear over the lines.\nggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+\n      geom_point()+\n      geom_line()+\nwhile here the lines appear above the points.\nggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))+\n      geom_line()+\n      geom_point()+\nEach geom takes input from ggplot() inputs. If extra input is required to a geom, it can be specified additionally inside aes().\ndata can be changed if needed for specific geoms."
  },
  {
    "objectID": "slides/ggplot/index.html#section-1",
    "href": "slides/ggplot/index.html#section-1",
    "title": "Plotting with ggplot2",
    "section": "",
    "text": "Just because you can doesn’t mean you should!"
  },
  {
    "objectID": "slides/ggplot/index.html#scales-discrete-colors",
    "href": "slides/ggplot/index.html#scales-discrete-colors",
    "title": "Plotting with ggplot2",
    "section": "Scales • Discrete Colors",
    "text": "Scales • Discrete Colors\n\nscales: position, color, fill, size, shape, alpha, linetype\nsyntax: scale_&lt;aesthetic&gt;_&lt;type&gt;\n\n\n\n\np &lt;- ggplot(iris)+geom_point(aes(x=Sepal.Length,\n                     y=Sepal.Width,color=Species))\np\n\n\n\n\n\n\n\n\n\n\np + scale_color_manual(\n     name=\"Manual\",\n     values=c(\"#5BC0EB\",\"#FDE74C\",\"#9BC53D\"))\n\n\n\n\n\n\n\n\n\n\n\nScales are used to control the aesthetics. For example the aesthetic color is mapped to a variable x. The palette of colors used, the mapping of which color to which value, the upper and lower limit of the data and colors etc is controlled by scales."
  },
  {
    "objectID": "slides/ggplot/index.html#scales-continuous-colors",
    "href": "slides/ggplot/index.html#scales-continuous-colors",
    "title": "Plotting with ggplot2",
    "section": "Scales • Continuous Colors",
    "text": "Scales • Continuous Colors\n\nIn RStudio, type scale_, then press TAB\n\n\n\n\n\np &lt;- ggplot(iris)+\n      geom_point(aes(x=Sepal.Length,\n                     y=Sepal.Width,\n      shape=Species,color=Petal.Length))\np\n\n\n\n\n\n\n\n\n\n\np +\nscale_color_gradient(name=\"Pet Len\",\n  breaks=range(iris$Petal.Length),\n  labels=c(\"Min\",\"Max\"),\n  low=\"black\",high=\"red\")\n\n\n\n\n\n\n\n\n\n\n\nContinuous colours can be changed using scale_color_gradient() for two colour gradient. Any number of breaks and colours can be specified using scale_color_gradientn()."
  },
  {
    "objectID": "slides/ggplot/index.html#scales-shape",
    "href": "slides/ggplot/index.html#scales-shape",
    "title": "Plotting with ggplot2",
    "section": "Scales • Shape",
    "text": "Scales • Shape\n\n\n\np &lt;- ggplot(iris)+\n      geom_point(aes(x=Sepal.Length,\n                     y=Sepal.Width,\n      shape=Species,color=Species))\np\n\n\n\n\n\n\n\n\n\n\np +\nscale_color_manual(name=\"New\",\n   values=c(\"blue\",\"green\",\"red\"))+\nscale_shape_manual(name=\"Bla\",values=c(0,1,2))\n\n\n\n\n\n\n\n\n\n\n\nShape scale can be adjusted using scale_shape_manual(). Multiple mappings for the same variable groups legends."
  },
  {
    "objectID": "slides/ggplot/index.html#scales-axes",
    "href": "slides/ggplot/index.html#scales-axes",
    "title": "Plotting with ggplot2",
    "section": "Scales • Axes",
    "text": "Scales • Axes\n\nscales: x, y\nsyntax: scale_&lt;axis&gt;_&lt;type&gt;\narguments: name, limits, breaks, labels\n\n\n\n\n\np &lt;- ggplot(iris)+geom_point(\n  aes(x=Sepal.Length,y=Sepal.Width))\np\n\n\n\n\n\n\n\n\n\n\np + scale_x_continuous(name=\"Sepal Length\",\n        breaks=seq(1,8),limits=c(3,5))\n\n\n\n\n\n\n\n\n\n\n\nThe x and y axes are also controlled by scales. The axis break points, the break point text and limits are controlled through scales.\nWhen setting limits using scale_, the data outside the limits are dropped. Limits can also be set using lims(x=c(3,5)) or xlim(c(3,5)). When mapping, coord_map() or coord_cartesian() is recommended for setting limits."
  },
  {
    "objectID": "slides/ggplot/index.html#facets-facet_wrap",
    "href": "slides/ggplot/index.html#facets-facet_wrap",
    "title": "Plotting with ggplot2",
    "section": "Facets • facet_wrap",
    "text": "Facets • facet_wrap\n\nSplit to subplots based on variable(s), Faceting in one dimension\n\n\n\n\np &lt;- ggplot(iris)+\n      geom_point(aes(x=Sepal.Length,\n                     y=Sepal.Width,\n                     color=Species))\np\n\n\n\n\n\n\n\n\n\n\np + facet_wrap(~Species)\n\n\n\n\n\n\n\n\n\np + facet_wrap(~Species,nrow=3)\n\n\n\n\n\n\n\n\n\n\n\nfacet_wrap is used to split a plot into subplots based on the categories in one or more variables."
  },
  {
    "objectID": "slides/ggplot/index.html#facets-facet_grid",
    "href": "slides/ggplot/index.html#facets-facet_grid",
    "title": "Plotting with ggplot2",
    "section": "Facets • facet_grid",
    "text": "Facets • facet_grid\n\n\n\nFaceting in two dimensions\n\n\np &lt;- diamonds %&gt;%\n     ggplot(aes(carat,price))+\n     geom_point()\np + facet_grid(~cut+clarity)\n\n\n\n\n\n\n\n\n\n\np + facet_grid(cut~clarity)\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid is also used to split a plot into subplots based on the categories in one or more variables. facet_grid can be used to create a matrix-like grid of two variables."
  },
  {
    "objectID": "slides/ggplot/index.html#coordinate-systems",
    "href": "slides/ggplot/index.html#coordinate-systems",
    "title": "Plotting with ggplot2",
    "section": "Coordinate Systems",
    "text": "Coordinate Systems\n\n\n\ncoord_cartesian(xlim=c(2,8)) for zooming in\ncoord_map for controlling limits on maps\ncoord_polar for polar ccordinates\n\n\np &lt;- ggplot(iris,aes(x=\"\",y=Petal.Length,fill=Species))+\n  geom_bar(stat=\"identity\")\np\n\n\n\n\n\n\n\n\n\n\n\np + coord_polar(\"y\", start = 0)\n\n\n\n\n\n\n\n\n\n\n\nThe coordinate system defines the surface used to represent numbers. Most plots use the cartesian coordinate sytem. Pie charts for example, is a polar coordinate projection of a cartesian barplot. Maps for example can have numerous coordinate systems called map projections. For example; UTM coordinates."
  },
  {
    "objectID": "slides/ggplot/index.html#theming",
    "href": "slides/ggplot/index.html#theming",
    "title": "Plotting with ggplot2",
    "section": "Theming",
    "text": "Theming\n\n\n\nModify non-data plot elements/appearance\nAxis labels, panel colors, legend appearance etc\n\n\nggplot(iris, aes(Petal.Length)) +\n    geom_histogram() +\n    facet_wrap(~Species, nrow = 2) +\n    theme_grey()\n\n\n\n\n\n\n\n\n\n\nSave a particular appearance for reuse\n?theme\n\n\nggplot(iris, aes(Petal.Length)) +\n    geom_histogram() +\n    facet_wrap(~Species, nrow = 2) +\n    theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nThemes allow to modify all non-data related components of the plot. This is the visual appearance of the plot. Examples include the axes line thickness, the background color or font family."
  },
  {
    "objectID": "slides/ggplot/index.html#theme-legend",
    "href": "slides/ggplot/index.html#theme-legend",
    "title": "Plotting with ggplot2",
    "section": "Theme • Legend",
    "text": "Theme • Legend\n\np &lt;- ggplot(iris)+\n      geom_point(aes(x=Sepal.Length,\n                     y=Sepal.Width,\n                     color=Species))\n\n\n\n\np + theme(legend.position=\"top\")\n\n\n\n\n\n\n\n\n\n\np + theme(legend.position=\"bottom\")"
  },
  {
    "objectID": "slides/ggplot/index.html#theme-text",
    "href": "slides/ggplot/index.html#theme-text",
    "title": "Plotting with ggplot2",
    "section": "Theme • Text",
    "text": "Theme • Text\n\nelement_text(family=NULL,face=NULL,color=NULL,size=NULL,hjust=NULL,\n             vjust=NULL, angle=NULL,lineheight=NULL,margin = NULL)\n\n\np &lt;- p + theme(\n    axis.title=element_text(color=\"#e41a1c\"),\n    axis.text=element_text(color=\"#377eb8\"),\n    plot.title=element_text(color=\"#4daf4a\"),\n    plot.subtitle=element_text(color=\"#984ea3\"),\n    legend.text=element_text(color=\"#ff7f00\"),\n    legend.title=element_text(color=\"#ffff33\"),\n    strip.text=element_text(color=\"#a65628\")\n)"
  },
  {
    "objectID": "slides/ggplot/index.html#theme-rect",
    "href": "slides/ggplot/index.html#theme-rect",
    "title": "Plotting with ggplot2",
    "section": "Theme • Rect",
    "text": "Theme • Rect\n\nelement_rect(fill=NULL,color=NULL,size=NULL,linetype=NULL)\n\n\np &lt;- p + theme(\n    plot.background=element_rect(fill=\"#b3e2cd\"),\n    panel.background=element_rect(fill=\"#fdcdac\"),\n    panel.border=element_rect(fill=NA,color=\"#cbd5e8\",size=3),\n    legend.background=element_rect(fill=\"#f4cae4\"),\n    legend.box.background=element_rect(fill=\"#e6f5c9\"),\n    strip.background=element_rect(fill=\"#fff2ae\")\n)"
  },
  {
    "objectID": "slides/ggplot/index.html#theme-reuse",
    "href": "slides/ggplot/index.html#theme-reuse",
    "title": "Plotting with ggplot2",
    "section": "Theme • Reuse",
    "text": "Theme • Reuse\n\nnewtheme &lt;- theme_bw() + theme(\n  axis.ticks=element_blank(), panel.background=element_rect(fill=\"white\"),\n  panel.grid.minor=element_blank(), panel.grid.major.x=element_blank(),\n  panel.grid.major.y=element_line(size=0.3,color=\"grey90\"), panel.border=element_blank(),\n  legend.position=\"top\", legend.justification=\"right\"\n)\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\np + newtheme"
  },
  {
    "objectID": "slides/ggplot/index.html#professional-themes",
    "href": "slides/ggplot/index.html#professional-themes",
    "title": "Plotting with ggplot2",
    "section": "Professional themes",
    "text": "Professional themes\n\n\nHow BBC works with R graphics Visual design by Cedric Scherer"
  },
  {
    "objectID": "slides/ggplot/index.html#position",
    "href": "slides/ggplot/index.html#position",
    "title": "Plotting with ggplot2",
    "section": "Position",
    "text": "Position\n\nus &lt;- USArrests %&gt;% mutate(state=rownames(.)) %&gt;% slice(1:4) %&gt;%\n                    gather(key=type,value=value,-state)\np &lt;- ggplot(us,aes(x=state,y=value,fill=type))\n\n\n\n\np + geom_bar(stat=\"identity\",position=\"stack\")\n\n\n\n\n\n\n\n\n\n\np + geom_bar(stat=\"identity\",position=\"dodge\")"
  },
  {
    "objectID": "slides/ggplot/index.html#saving-plots",
    "href": "slides/ggplot/index.html#saving-plots",
    "title": "Plotting with ggplot2",
    "section": "Saving plots",
    "text": "Saving plots\n\np &lt;- ggplot(iris,aes(Petal.Length,Sepal.Length,color=Species))+\n  geom_point()\n\n\nggplot2 plots can be saved just like base plots\n\n\npng(\"plot.png\",height=5,width=7,units=\"cm\",res=200)\nprint(p)\ndev.off()\n\n\nggplot2 package offers a convenient function\n\n\nggsave(\"plot.png\",p,height=5,width=7,units=\"cm\",dpi=200,type=\"cairo\")\n\n\nNote that default units in png is pixels while in ggsave it’s inches"
  },
  {
    "objectID": "slides/ggplot/index.html#combining-plots",
    "href": "slides/ggplot/index.html#combining-plots",
    "title": "Plotting with ggplot2",
    "section": "Combining Plots",
    "text": "Combining Plots\n\np &lt;- ggplot(us,aes(x=state,y=value,color=type))+geom_point()\nq &lt;- ggplot(us,aes(x=state,y=value,fill=type))+geom_bar(stat=\"identity\")\n\n\npatchwork::wrap_plots(p,q)\n\n\nRefer to patchwork documentation. Some notable alternatives are ggpubr and cowplot.\n\nCombining two or more ggplot2 plots is often required and several packages exist to help with this situation. Some functions allow plots to be placed adjacently, also allowing varying heights or widths of each plot. Some functions allow one plot to be plotted on another plot like a subset plot. Here are alternative options.\n\ngridExtra::grid.arrange(p,q,ncol=2)\nggpubr::ggarrange(p,q,ncol=2,widths=c(1.5,1),common.legend=T)\ncowplot::plot_grid()"
  },
  {
    "objectID": "slides/ggplot/index.html#interactive",
    "href": "slides/ggplot/index.html#interactive",
    "title": "Plotting with ggplot2",
    "section": "Interactive",
    "text": "Interactive\n\nConvert ggplot2 object to interactive HTML\n\n\np &lt;- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,col=Species))\n\n\n\n\np1 &lt;- p+geom_point()\nplotly::ggplotly(p1,width=500,height=400)\n\n\n\n\n\n\n\np2 &lt;- p+ggiraph::geom_point_interactive(\n  aes(tooltip=paste0(\"&lt;b&gt;Species: &lt;/b&gt;\",Species)))+\n  theme_bw(base_size=12)\nggiraph::ggiraph(code=print(p2))\n\n\n\n\n\n\n\n\nMost interactive plotting libraries are not as complete as ggplot2. Therefore, some packages explore ways of converting ggplot2 objects into interactive graphics"
  },
  {
    "objectID": "slides/ggplot/index.html#extensions",
    "href": "slides/ggplot/index.html#extensions",
    "title": "Plotting with ggplot2",
    "section": "Extensions",
    "text": "Extensions\n\nggrepel: Text labels including overlap control\nggforce: Circles, splines, hulls, voronoi etc\nggpmisc: Miscellaneaous features\nggthemes: Set of extra themes\n\nggthemr: More themes\n\nggsci: Color palettes for scales\n\nggmap: Dedicated to mapping\n\nggraph: Network graphs\n\nggiraph: Converting ggplot2 to interactive graphics\n\nA collection of ggplot extension packages: https://exts.ggplot2.tidyverse.org/.\nCurated list of ggplot2 links: https://github.com/erikgahner/awesome-ggplot2."
  },
  {
    "objectID": "slides/ggplot/index.html#learning-help",
    "href": "slides/ggplot/index.html#learning-help",
    "title": "Plotting with ggplot2",
    "section": "Learning & Help",
    "text": "Learning & Help\n\n\n\nggplot2 book\n\n\nThe R cookbook\n\n\n\n\nggplot2 official reference\n\nRStudio cheatsheet\n\nr-statistics ggplot2 cheatsheet\n\nStackOverflow\n\nBlogs, R-Bloggers, Cedric Scherer etc."
  },
  {
    "objectID": "slides/ggplot/index.html#bonus",
    "href": "slides/ggplot/index.html#bonus",
    "title": "Plotting with ggplot2",
    "section": "Bonus",
    "text": "Bonus\n\n\n\nggcats"
  },
  {
    "objectID": "slides/ggplot/index.html#bonus-1",
    "href": "slides/ggplot/index.html#bonus-1",
    "title": "Plotting with ggplot2",
    "section": "Bonus",
    "text": "Bonus\n\n\nggdogs"
  },
  {
    "objectID": "slides/ggplot/index.html#section-4",
    "href": "slides/ggplot/index.html#section-4",
    "title": "Plotting with ggplot2",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/index.html",
    "href": "slides/index.html",
    "title": "Slides",
    "section": "",
    "text": "Best Coding Practices\n\n\n\nMarcin Kierczak, Sebastian DiLorenzo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDebugging, Profiling, and a Bit of Optimization\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemo Slides\n\n\n\nRoy Francis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions and scripts\n\n\n\nSebastian DiLorenzo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive web apps with Shiny\n\n\n\nRoy Francis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLiterate programming with Quarto\n\n\n\nRoy Francis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMathematical statistics and machine learning in R\n\n\n\nNikolay Oskolkov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObject-Oriented Programming Models in R\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting with ggplot2\n\n\n\nRoy Francis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR packages\n\n\n\nSebastian DiLorenzo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRenv: Project environments in R\n\n\n\nRoy Francis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReticulate\n\n\n\nNina Norgren\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy work in Tidyverse\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVectorization in R\n\n\n\nMarcin Kierczak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngit and R\n\n\n\nSebastian DiLorenzo\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "slides/oop/index.html#object-oriented-programming",
    "href": "slides/oop/index.html#object-oriented-programming",
    "title": "Object-Oriented Programming Models in R",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nA programming paradigm – we work with objects.\nPlato’s cave: ideal objects – classes, reflections – instances.\nReflects many real-life systems – easy to model things."
  },
  {
    "objectID": "slides/oop/index.html#oop-systems-in-r",
    "href": "slides/oop/index.html#oop-systems-in-r",
    "title": "Object-Oriented Programming Models in R",
    "section": "OOP Systems in R",
    "text": "OOP Systems in R\n\nS3 – basic R OOP system,\nS4 – a bit more advanced OOP, common in, e.g. Bioconductor,\nRC – Reference Classes, the most advanced and close to, e.g. Java OOP, extension of S4,\nR6 – simplified RC, extension of S3, require(R6)\nS7 – best of S3 + S4 = S7 require(S7). Still in dev phase."
  },
  {
    "objectID": "slides/oop/index.html#s4-classes",
    "href": "slides/oop/index.html#s4-classes",
    "title": "Object-Oriented Programming Models in R",
    "section": "S4 classes",
    "text": "S4 classes\nS4 classes are more advanced than S3 as you actually define the structure of the data within the object of your particular class:\n\n# declare class\nsetClass('gene', representation(name='character', coords='numeric'))\n\n\n\n# instantiate class\nmy.gene &lt;- new(\"gene\", name = \"ANK3\", coords = c(1.4e6, 1.412e6))\n\n\n\n\n# declare class\n.intragenic_region &lt;- setClass(Class = 'intragenic_region', \n                               slots = c(name='character', coords='numeric'))\n\n# instantiate class\n# but since SetClass returns a low-level constructor\nmy.intra1 &lt;- .intragenic_region(name = 'int1', \n                  coords = c(1.7e6, 1.717e6))"
  },
  {
    "objectID": "slides/oop/index.html#inheritance-in-s4",
    "href": "slides/oop/index.html#inheritance-in-s4",
    "title": "Object-Oriented Programming Models in R",
    "section": "Inheritance in S4",
    "text": "Inheritance in S4\n\n.ext_gene &lt;- setClass(Class = 'ext_gene',contains = \"gene\",\n  slots = c(gene = 'gene', feature_name = 'character', feature_value = 'character')\n)\nANK3 &lt;- .ext_gene(name = 'ANK3', coords = c(1.4e6, 1.412e6),\n                  feature_name = 'num_introns', feature_value = '5')\nstr(ANK3)\n\nFormal class 'ext_gene' [package \".GlobalEnv\"] with 5 slots\n  ..@ gene         :Formal class 'gene' [package \".GlobalEnv\"] with 2 slots\n  .. .. ..@ name  : chr(0) \n  .. .. ..@ coords: num(0) \n  ..@ feature_name : chr \"num_introns\"\n  ..@ feature_value: chr \"5\"\n  ..@ name         : chr \"ANK3\"\n  ..@ coords       : num [1:2] 1400000 1412000"
  },
  {
    "objectID": "slides/oop/index.html#sealed-class",
    "href": "slides/oop/index.html#sealed-class",
    "title": "Object-Oriented Programming Models in R",
    "section": "Sealed Class",
    "text": "Sealed Class\nPreventing double class definition:\n\nsetClass('Not_Sealed')\nsetClass('Not_Sealed')\n\nBut to prevent this:\n\nsetClass('Sealed', sealed = T)\nsetClass('Sealed')\n\nError in setClass(\"Sealed\"): \"Sealed\" has a sealed class definition and cannot be redefined"
  },
  {
    "objectID": "slides/oop/index.html#s4-class-slots",
    "href": "slides/oop/index.html#s4-class-slots",
    "title": "Object-Oriented Programming Models in R",
    "section": "S4 class – slots",
    "text": "S4 class – slots\nThe variables within an S4 class are stored in the so-called slots. In the above example, we have 2 such slots: name and coords. Here is how to access them:\n\nmy.gene@name # access using @ operator\nmy.gene@coords[2] # access the 2nd element in slot coords\n\n[1] \"ANK3\"\n[1] 1412000"
  },
  {
    "objectID": "slides/oop/index.html#s4-class-methods",
    "href": "slides/oop/index.html#s4-class-methods",
    "title": "Object-Oriented Programming Models in R",
    "section": "S4 class – methods",
    "text": "S4 class – methods\nThe power of classes lies in the fact that they define both the data types in particular slots and operations (functions) we can perform on them. Let us define a generic print function for an S4 class:\n\nsetMethod('print', 'gene', \n          function(x) {\n              cat('GENE: ', x@name, ' --&gt; ')\n              cat('[', x@coords, ']')\n          })\nprint(my.gene) # and we use the newly defined print\n\nGENE:  ANK3  --&gt; [ 1400000 1412000 ]"
  },
  {
    "objectID": "slides/oop/index.html#s3-classes",
    "href": "slides/oop/index.html#s3-classes",
    "title": "Object-Oriented Programming Models in R",
    "section": "S3 Classes",
    "text": "S3 Classes\nAn S3 class object is one of R base types (e.g. integer) with class attribute set:\n\n\n\n\nobj &lt;- factor(c(\"a\", \"b\", \"c\"))\ntypeof(obj)\n\n[1] \"integer\"\n\n\n\nclass(obj)\n\n[1] \"factor\"\n\n\n\n\nattributes(obj)\n\n$levels\n[1] \"a\" \"b\" \"c\"\n\n$class\n[1] \"factor\"\n\n\n\nstr(obj)\n\n Factor w/ 3 levels \"a\",\"b\",\"c\": 1 2 3\n\n\n\n\n\n\n\nprint(obj)\n\n[1] a b c\nLevels: a b c\n\n\n\n\n\nprint(unclass(obj))\n\n[1] 1 2 3\nattr(,\"levels\")\n[1] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "slides/oop/index.html#custom-str-methods",
    "href": "slides/oop/index.html#custom-str-methods",
    "title": "Object-Oriented Programming Models in R",
    "section": "Custom str Methods",
    "text": "Custom str Methods\nSome S3 classes provide a custom str, e.g.:\n\ntime &lt;- strptime(\"2018-06-07\", \"%Y-%m-%d\")\n\n\n\n\nstr(time)\n\n POSIXlt[1:1], format: \"2018-06-07\"\n\n\n\n\nstr(unclass(time))\n\nList of 11\n $ sec   : num 0\n $ min   : int 0\n $ hour  : int 0\n $ mday  : int 7\n $ mon   : int 5\n $ year  : int 118\n $ wday  : int 4\n $ yday  : int 157\n $ isdst : int 1\n $ zone  : chr \"CEST\"\n $ gmtoff: int NA\n - attr(*, \"tzone\")= chr [1:3] \"\" \"CET\" \"CEST\"\n - attr(*, \"balanced\")= logi TRUE"
  },
  {
    "objectID": "slides/oop/index.html#generic-methods-and-method-dispatch",
    "href": "slides/oop/index.html#generic-methods-and-method-dispatch",
    "title": "Object-Oriented Programming Models in R",
    "section": "Generic Methods and Method Dispatch",
    "text": "Generic Methods and Method Dispatch\nHave you ever wondered why print() or summary() work on many types (classes) of data?\n\nThey are so-called generics, i.e. functions and methods that operate on classes. They know which method to apply to which class thanks to the process of method dispatch.\nThe naming scheme for generics is: generic.class() i.e. a generic that applies to the class class.\nExamples:\n\nprint.factor(),\nprint.default(),\nprint.data.frame().\n\nTo see the code of a method:\n\ngetS3method('summary', 'lm') %&gt;% \n  head(n = 5)"
  },
  {
    "objectID": "slides/oop/index.html#creating-s3-classes",
    "href": "slides/oop/index.html#creating-s3-classes",
    "title": "Object-Oriented Programming Models in R",
    "section": "Creating S3 Classes",
    "text": "Creating S3 Classes\nTo create an S3 class, simply give a name to a data structure:\n\ngf &lt;- structure(list(), class = 'genomic_features')\nclass(gf)\n\n[1] \"genomic_features\"\n\n\nOR\n\ngf &lt;- list()\nclass(gf) &lt;- 'genomic_features'\nclass(gf)\n\n[1] \"genomic_features\"\n\n\nYou can use some inheritance too:\n\negf &lt;- list()\nclass(egf) &lt;- c('genomic_features', 'extended_genomic_features')\nclass(egf)\n\n[1] \"genomic_features\"          \"extended_genomic_features\""
  },
  {
    "objectID": "slides/oop/index.html#checking-for-correctness",
    "href": "slides/oop/index.html#checking-for-correctness",
    "title": "Object-Oriented Programming Models in R",
    "section": "Checking for Correctness",
    "text": "Checking for Correctness\n\nlinmod &lt;- with(mtcars, lm(log(mpg) ~ log(disp)))\nlinmod\n\n\nCall:\nlm(formula = log(mpg) ~ log(disp))\n\nCoefficients:\n(Intercept)    log(disp)  \n     5.3810      -0.4586  \n\n\n\n\nclass(linmod) &lt;- \"data.frame\"\nlinmod\n\nError in `[&lt;-.data.frame`(`*tmp*`, , j, value = c(`(Intercept)` = 5.3809725, : replacement has 2 rows, data has 0\n\n\n\n\nS C A R Y !"
  },
  {
    "objectID": "slides/oop/index.html#software-engineering",
    "href": "slides/oop/index.html#software-engineering",
    "title": "Object-Oriented Programming Models in R",
    "section": "Software engineering",
    "text": "Software engineering\n\n\n\n\n\nMargaret Hamilton, source: Wikimedia Commons"
  },
  {
    "objectID": "slides/oop/index.html#design-patterns",
    "href": "slides/oop/index.html#design-patterns",
    "title": "Object-Oriented Programming Models in R",
    "section": "Design patterns",
    "text": "Design patterns\n\n\n\n\n\nSource: Wikimedia Commons\n\n\n\n\n\n\nSource: Wikimedia Commons"
  },
  {
    "objectID": "slides/oop/index.html#r-and-design-pattern",
    "href": "slides/oop/index.html#r-and-design-pattern",
    "title": "Object-Oriented Programming Models in R",
    "section": "R and Design Pattern",
    "text": "R and Design Pattern\n\nstrategy — apply()\ndecorator — system_time()\n\n\nsystem.time(x &lt;- runif(n = 100000))\nx[1:5]\n\n   user  system elapsed \n  0.002   0.000   0.003 \n[1] 0.3319210 0.7142757 0.6870337 0.5222928 0.4551353\n\n\n\nwrapper\n\n\nmy_plot &lt;- function(...) {\n  plot(..., col = 'blue', las = 1, cex = .5, pch = 19, cex.axis = .7)\n}\n\n\nSingleton see this gist\nFluent function interface — tidyverse functions take data x as the very first argument and return object similar to x so that they can be chained by %&gt;%\n\nEven more patterns here."
  },
  {
    "objectID": "slides/oop/index.html#safe-s3-design-pattern-constructor",
    "href": "slides/oop/index.html#safe-s3-design-pattern-constructor",
    "title": "Object-Oriented Programming Models in R",
    "section": "Safe S3 Design Pattern – Constructor",
    "text": "Safe S3 Design Pattern – Constructor\n\nnew_Animal &lt;- function(species, age) {\n  stopifnot(is.character(species))\n  stopifnot(is.numeric(age))\n  \n  structure(\n    species,\n    age = age,\n    class = \"Animal\"\n  )\n}"
  },
  {
    "objectID": "slides/oop/index.html#safe-s3-design-pattern-validator",
    "href": "slides/oop/index.html#safe-s3-design-pattern-validator",
    "title": "Object-Oriented Programming Models in R",
    "section": "Safe S3 Design Pattern – Validator",
    "text": "Safe S3 Design Pattern – Validator\n\nvalidate_Animal &lt;- function(x) {\n  species &lt;- x[1]\n  age &lt;- attr(x, 'age')\n  \n  if (is.na(species) || species == \"\") {\n    stop('Species name is missing!', call. = FALSE)\n  }\n  if (!is.numeric(age) || age &lt; 1 || age &gt;= 100) {\n    stop(\"Invalid age!\", call. = FALSE)\n  }\n  return(x)\n}"
  },
  {
    "objectID": "slides/oop/index.html#safe-s3-design-pattern-helper",
    "href": "slides/oop/index.html#safe-s3-design-pattern-helper",
    "title": "Object-Oriented Programming Models in R",
    "section": "Safe S3 Design Pattern – Helper",
    "text": "Safe S3 Design Pattern – Helper\n\nAnimal &lt;- function(x) {\n  species &lt;- x[[1]] \n  age &lt;- x[[2]]\n  validate_Animal(new_Animal(species, age))\n}\n\n\n\ndog &lt;- Animal(list('Canis familiaris', 7))\nclass(dog)\n\n[1] \"Animal\"\n\n\n\n\n\ncat &lt;- Animal(list('Felis felis', '9'))\n\nError in new_Animal(species, age): is.numeric(age) is not TRUE\n\ncat &lt;- Animal(list('Felis felis', 9))\nclass(cat)\n\n[1] \"Animal\""
  },
  {
    "objectID": "slides/oop/index.html#building-s3-classes-styles",
    "href": "slides/oop/index.html#building-s3-classes-styles",
    "title": "Object-Oriented Programming Models in R",
    "section": "Building S3 Classes – Styles",
    "text": "Building S3 Classes – Styles\nOne can build an S3 class on top of any existing base type, e.g. a named list:\n\npoint_in_space_class &lt;- function(x, y, z) {\n  structure(\n    list(\n      x = x, \n      y = y, \n      z = z\n    ),\n    class = \"point_in_space_class\"\n  )\n}"
  },
  {
    "objectID": "slides/oop/index.html#introduction-to-r6-classes",
    "href": "slides/oop/index.html#introduction-to-r6-classes",
    "title": "Object-Oriented Programming Models in R",
    "section": "Introduction to R6 classes",
    "text": "Introduction to R6 classes\n\nrequire(R6),\nDo not rely on S4 like RC, but on S3,\nAre faster than RC,\nDo not do copy-on-modify,\nThus provide OO model similar to C++ or Java.\nMethods belong to objects, not to generics."
  },
  {
    "objectID": "slides/oop/index.html#r6-class-example",
    "href": "slides/oop/index.html#r6-class-example",
    "title": "Object-Oriented Programming Models in R",
    "section": "R6 Class Example",
    "text": "R6 Class Example\n\nlibrary(R6)\n\nPerson &lt;- R6Class(\"Person\",\n  public = list(\n    name = NULL,\n    hair = NULL,\n    initialize = function(name = NA, hair = NA) {\n      stopifnot(is.character(name), is.character(hair))\n      self$name &lt;- name\n      self$hair &lt;- hair\n      self$greet()\n    },\n    set_hair = function(val) {\n      self$hair &lt;- val\n    },\n    greet = function() {\n      cat(paste0(\"Hello, my name is \", self$name, \".\\n\"))\n    }\n  )\n)"
  },
  {
    "objectID": "slides/oop/index.html#r6-in-action",
    "href": "slides/oop/index.html#r6-in-action",
    "title": "Object-Oriented Programming Models in R",
    "section": "R6 in Action",
    "text": "R6 in Action\n\nkate &lt;- Person$new(name = 'Kate', hair = 'blond')\nstr(kate)\n\nHello, my name is Kate.\nClasses 'Person', 'R6' &lt;Person&gt;\n  Public:\n    clone: function (deep = FALSE) \n    greet: function () \n    hair: blond\n    initialize: function (name = NA, hair = NA) \n    name: Kate\n    set_hair: function (val)"
  },
  {
    "objectID": "slides/oop/index.html#r6-methods",
    "href": "slides/oop/index.html#r6-methods",
    "title": "Object-Oriented Programming Models in R",
    "section": "R6 – methods",
    "text": "R6 – methods\n\nkate$greet()\nkate$set_hair('red')\nkate\n\nHello, my name is Kate.\n&lt;Person&gt;\n  Public:\n    clone: function (deep = FALSE) \n    greet: function () \n    hair: red\n    initialize: function (name = NA, hair = NA) \n    name: Kate\n    set_hair: function (val)"
  },
  {
    "objectID": "slides/oop/index.html#r6-copy-on-modify",
    "href": "slides/oop/index.html#r6-copy-on-modify",
    "title": "Object-Oriented Programming Models in R",
    "section": "R6 copy-on-modify",
    "text": "R6 copy-on-modify\n\nkate$hair\n\n[1] \"red\"\n\n\n\n\nann &lt;- kate\nann$set_hair('blue')\nann$hair\n\n[1] \"blue\"\n\n\n\n\n\nkate$hair\n\n[1] \"blue\""
  },
  {
    "objectID": "slides/oop/index.html#r6-clone",
    "href": "slides/oop/index.html#r6-clone",
    "title": "Object-Oriented Programming Models in R",
    "section": "R6 – clone()",
    "text": "R6 – clone()\n\nkate$set_hair('brown')\nkate$hair\n\n[1] \"brown\"\n\n\n\n\nann &lt;- kate$clone()\nkate$hair\nann$hair\n\n[1] \"brown\"\n[1] \"brown\"\n\n\n\n\n\nann$set_hair('blond')\nkate$hair\nann$hair\n\n[1] \"brown\"\n[1] \"blond\""
  },
  {
    "objectID": "slides/oop/index.html#section-1",
    "href": "slides/oop/index.html#section-1",
    "title": "Object-Oriented Programming Models in R",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                    \nplatform x86_64-apple-darwin20\nos       darwin20             \nmajor    4                    \nminor    4.0                  \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/quarto/index.html#quarto",
    "href": "slides/quarto/index.html#quarto",
    "title": "Literate programming with Quarto",
    "section": "Quarto",
    "text": "Quarto\nAn open-source scientific and technical publishing system built on Pandoc\n\n\n\n\nCommand-line tool enabling weaving code and documentation using Python, R, Julia, and Observable.\nSupports Knitr (plain text, markdown) or Jupyter engines.\n\n\n\n\nSupports many IDEs\n\nRStudio\nJupyterLab\nVS Code\nNeovim\n\n\n\n\n\nNumerous output formats\n\nDocuments (HTML, PDF, MS Word)\nPresentations (RevealJS, Powerpoint, Beamer)\nWebsites, Blogs, e-Books\nInteractive (ObservableJS, Shiny)\n\n\n\n\n\nFeatures and components\n\nScientific markdown\nTables & Figures\nEquations\nCitations\nCall-Out\nLayout"
  },
  {
    "objectID": "slides/quarto/index.html#quarto-1",
    "href": "slides/quarto/index.html#quarto-1",
    "title": "Literate programming with Quarto",
    "section": "Quarto",
    "text": "Quarto\n\n\n\n\nLiterate programming: Combining code with narrative\nReproducible research\nDocumentation and reporting\n\nWebsites, Presentations, e-books, PDFs …\n\n\n\nhttps://quarto.org/docs/gallery/\n\n\n\n\n\n\nLiterate programming is a programming paradigm introduced by Donald Knuth in 1984. The key concept behind literate programming is to treat a program as a work of literature, understandable to human beings. In this paradigm, documentation and source code are interwoven in a way that presents the logic and structure of the program in a readable and understandable manner.\nIn traditional programming, the source code is primary and documentation is secondary, often added as comments or in separate documentation files. In literate programming, the source code and documentation are combined, and the documentation is primary. The idea is that the program is written for humans to read and understand, and the actual source code is secondary, extracted and compiled by special tools.\nSome key features of literate programming include:\nIntertwined Documentation and Code: The documentation explains the logic, design decisions, and overall structure of the code, while the source code is presented within this narrative.\nStructured Narrative: The program is presented in a top-down manner, where the higher-level structure and concepts are introduced first, followed by the detailed implementation.\nReadable for Humans: The main goal is to make the program easy to read and understand by other humans, which aids in maintenance, debugging, and collaborative development.\nEmphasis on Explanation: The documentation within the literate programming code often includes detailed explanations of algorithms, data structures, and design decisions."
  },
  {
    "objectID": "slides/quarto/index.html#installation",
    "href": "slides/quarto/index.html#installation",
    "title": "Literate programming with Quarto",
    "section": "Installation",
    "text": "Installation\n\nInstall the latest quarto executable\nR package quarto is a wrapper that runs quarto from R\nIf using RStudio, you need a version v2022.07.1 or newer\nVisual Studio Code along with quarto extension is a great option too"
  },
  {
    "objectID": "slides/quarto/index.html#quarto-notebook",
    "href": "slides/quarto/index.html#quarto-notebook",
    "title": "Literate programming with Quarto",
    "section": "Quarto Notebook",
    "text": "Quarto Notebook\n\nCreate a quarto document, ie; a file that ends in .qmd\n\nIn RStudio, File &gt; New File &gt; Quarto Document\n\nAdd YAML matter to top\n\n---\ntitle: \"This is a title\"\nformat: html\n---\n\nText & visual editor\n\n\nR Notebook demonstration. - Text editor - Visual editor"
  },
  {
    "objectID": "slides/quarto/index.html#pdf",
    "href": "slides/quarto/index.html#pdf",
    "title": "Literate programming with Quarto",
    "section": "PDF",
    "text": "PDF\n\n\n\nRender to PDF format\nRequires LaTeX installation\n\nDefault engine is xelatex\nA lightweight option is R package tinytex\nChange pdf-engine as needed\n\nChange YAML options\nformat: pdf\npdf-engine: pdflatex\nTypst format\nformat: typst\n\n\n\n\n\nFor PDF options, see here"
  },
  {
    "objectID": "slides/quarto/index.html#presentation",
    "href": "slides/quarto/index.html#presentation",
    "title": "Literate programming with Quarto",
    "section": "Presentation",
    "text": "Presentation\n\nCreate presentations as HTML (RevealJS) or Powerpoint\nChange format to revealjs\n\n\nFor RevealJS options, see here"
  },
  {
    "objectID": "slides/quarto/index.html#quarto-document-anatomy",
    "href": "slides/quarto/index.html#quarto-document-anatomy",
    "title": "Literate programming with Quarto",
    "section": "Quarto document anatomy",
    "text": "Quarto document anatomy\n\n\n\n---\ntitle: \"Iris report\"\nauthor: \"John Doe\"\ndate: \"4-Mar-2023\"\nformat: html\n---\n\n## Iris\n\nLet's explore the **iris** dataset.\n\n```{r}\n#| echo: true\nhead(iris)\n```"
  },
  {
    "objectID": "slides/quarto/index.html#quarto-document-anatomy-1",
    "href": "slides/quarto/index.html#quarto-document-anatomy-1",
    "title": "Literate programming with Quarto",
    "section": "Quarto document anatomy",
    "text": "Quarto document anatomy\n\n\n\n\n\nMetadata (YAML)\n  \nText (Markdown)\n\nCode (R, Python, Julia, Observable)\n\n\nLiterate programming is natural language interspersed with programming code for the purpose of documentation, reproducibility and accessibility particularly relevant in data science."
  },
  {
    "objectID": "slides/quarto/index.html#yaml-metadata",
    "href": "slides/quarto/index.html#yaml-metadata",
    "title": "Literate programming with Quarto",
    "section": "YAML metadata",
    "text": "YAML metadata\n\n\n\n\nYet Another Markup Language (YAML)\n\n---\nkey: value\n---\n\n2 space indentation\n\nformat:\n  html:\n    smooth-scroll: true\n\nStrings\n\ndescription: \"This report contains...\"\n\nMultiline string (Literal/Folded)\n\n\n\n\ndescription: |\n  This is\n  a multiline\n  string\n\ndescription: &gt;\n  This is\n  a multiline\n  string\n\n\n\n\nArrays\n\nitems: [ 1, 2, 3, 4, 5 ]\nnames: [ \"one\", \"two\", \"three\" ]\nnames:\n  - \"one\"\n  - \"two\"\n  - \"three\"\n\nDictionary arrays\n\nitems:\n  - things:\n      thing1: huey\n      things2: dewey\n      thing3: louie\n  - other things:\n      key: value\n\n\nYAML basics"
  },
  {
    "objectID": "slides/quarto/index.html#yaml-metadata-1",
    "href": "slides/quarto/index.html#yaml-metadata-1",
    "title": "Literate programming with Quarto",
    "section": "YAML metadata",
    "text": "YAML metadata\n\n\n\n---\ntitle: \"Iris report\"\nauthor: \"John Doe\"\ndate: \"4-Mar-2023\"\nformat:\n  html:\n    toc: true\n    number-sections: true\nexecute:\n  echo: false\n  warning: false\n---\n\n## Iris\n\nLet's explore the **iris** dataset.\n\n### Table\n\n```{r}\n#| echo: true\niris[1:3,]\n```\n\n### Plot\n\n```{r}\n#| label: fig-hist-sepal\n#| fig-cap: \"Distribution of Sepal lengths.\"\n#| fig-height: 3\nhist(iris$Sepal.Length)\n```"
  },
  {
    "objectID": "slides/quarto/index.html#yaml-metadata-2",
    "href": "slides/quarto/index.html#yaml-metadata-2",
    "title": "Literate programming with Quarto",
    "section": "YAML metadata",
    "text": "YAML metadata\ntitle: Report\nsubtitle: Topic\ndate: today\nauthor: \"John Doe\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    number-sections: true\n    code-fold: true\n    df-print: paged\n\nexecute:\n  eval: true\n  echo: false\n  warning: false\n  message: false\n  freeze: true\n\n\nHTML YAML documentation\nPDF YAML documentation"
  },
  {
    "objectID": "slides/quarto/index.html#markdown",
    "href": "slides/quarto/index.html#markdown",
    "title": "Literate programming with Quarto",
    "section": "Markdown",
    "text": "Markdown\nHuman readable markup\n\n\n### Heading 3\n\n#### Heading 4\n\n*italic text*  \n**bold text**  \n`code text`  \n\n~~strikethrough~~  \n2^10^  \n2~10~  \n$2^{10}$  \n$2_{10}$  \n\nHeading 3\nHeading 4\nitalic text\nbold text\ncode text\nstrikethrough\n210\n210\n\\(2^{10}\\)\n\\(2_{10}\\)\n\n$\\sum\\limits_{n=1}^{10} \\frac{3}{2}\\cdot n$\n\n- bullet point\n\nLink to [this](somewhere.com)\n\n![](https://www.r-project.org/Rlogo.png)\n\n![](https://www.r-project.org/Rlogo.png){width=\"50%\"}\n\n\\(\\sum\\limits_{n=1}^{10} \\frac{3}{2}\\cdot n\\)\n\nbullet point\n\nLink to this\n\n\n\n\n\n\nSupport pure HTML for complex formatting\nMany variations\n\nJohn Gruber’s original\nGitHub Flavored Markdown (GFM)\nPandoc\nMultiMarkdown\n\n\nPandoc supports conversion to multiple output formats\nTo compare MD variants"
  },
  {
    "objectID": "slides/quarto/index.html#rmarkdown",
    "href": "slides/quarto/index.html#rmarkdown",
    "title": "Literate programming with Quarto",
    "section": "RMarkdown",
    "text": "RMarkdown\n\nMarkdown + embedded R chunks\nRMarkdown mostly uses Pandoc markdown\nR code can be executed inline\n\nToday’s date is `r date()`\nToday’s date is Mon Jun 10 07:34:32 2024\n\nR code can be executed in code chunks\n\n```{r}\ndate()\n```\n\nBy default, input source code and output results are displayed.\n\n\ndate()\n\n[1] \"Mon Jun 10 07:34:32 2024\""
  },
  {
    "objectID": "slides/quarto/index.html#rmarkdown-chunk-options",
    "href": "slides/quarto/index.html#rmarkdown-chunk-options",
    "title": "Literate programming with Quarto",
    "section": "RMarkdown • Chunk options",
    "text": "RMarkdown • Chunk options\n\nSetting chunk options\n\n```{r}\n#| eval: false\ndate()\n```\n\nChunk options define how chunks behave\n\neval: false to not evaluate a code chunk\necho: false to hide input code\noutput: true to show output, asis to skip styling\nwarning: false hides warnins\nmessage: false hides messages\nerror: true shows error message and continues code execution\ninclude: false supresses all output\n\nOther chunk options include figure options and captions\n\n\n\nChunk option documentation"
  },
  {
    "objectID": "slides/quarto/index.html#rendering",
    "href": "slides/quarto/index.html#rendering",
    "title": "Literate programming with Quarto",
    "section": "Rendering",
    "text": "Rendering\n\nLive preview\n\nFrom R console quarto::quarto_preview(\"report.qmd\")\nFrom terminal quarto preview report.qmd\n\nRender\n\nInteractively using the Render button\nFrom R console quarto::quarto_render(\"report.qmd\")\nFrom terminal quarto render report.qmd"
  },
  {
    "objectID": "slides/quarto/index.html#how-it-all-works",
    "href": "slides/quarto/index.html#how-it-all-works",
    "title": "Literate programming with Quarto",
    "section": "How it all works",
    "text": "How it all works\n\nquarto render index.qmd\n\n\n\n\n\n\n\nflowchart LR\n  input-md(YAML + Markdown\\n.md) --&gt; engine-md([MARKDOWN engine]) --&gt; markdown(Markdown\\n.md)\n  input-qmd(YAML + Markdown + Code\\n.qmd, .rmd) --&gt; engine-knitr-a([KNITR engine\\nR, Python, Julia, Bash]) --&gt; markdown\n  input-jupyter(JupyterLab\\n.ipynb) --&gt; engine-jupyter([JUPYTER engine\\nPython]) --&gt; markdown\n  input-rnw(YAML + Markdown + Code\\n.qmd, .rnw) --&gt; engine-knitr-b([KNITR engine\\nR, Python, Julia, Bash]) --&gt; tex(Tex\\n .tex)\n  markdown --&gt; render([RENDER\\nPandoc Lua])\n  tex --&gt; render\n  render --&gt; output-md(Markdown\\nGFM, Docusaurus)\n  render --&gt; output-html(Reports, Websites, RevealJS slides, Blogs, Manuscripts ...\\n.html)\n  render --&gt; output-pdf(PDF, Beamer slides\\n.pdf)\n  render --&gt; output-docx(Word\\n.docx)\n  render --&gt; output-pptx(Powerpoint\\n.pptx)\n  render --&gt; output-wikis(Wikis)\n  output-html --&gt; publish([PUBLISH]) --&gt; hosting(Github pages\\n Quarto pub\\n Netlify)\n  publish --&gt; confluence(Confluence)"
  },
  {
    "objectID": "slides/quarto/index.html#parameterized-reports",
    "href": "slides/quarto/index.html#parameterized-reports",
    "title": "Literate programming with Quarto",
    "section": "Parameterized reports",
    "text": "Parameterized reports\n\nParameters can be passed into a document during rendering\nDefine parameters/defaults in YAML\n\n---\ntitle: \"My Document\"\nparams:\n  alpha: 0.1\n  ratio: 0.1\n---\n\nAccess parameters as such\n\n```{r}\nparams$alpha\n```\n\nPass parameters through command-line or params file\n\nquarto render document.qmd -P alpha:0.2 -P ratio:0.3\nFor more parameter options, see here"
  },
  {
    "objectID": "slides/quarto/index.html#projects",
    "href": "slides/quarto/index.html#projects",
    "title": "Literate programming with Quarto",
    "section": "Projects",
    "text": "Projects\n\n\n\nRender all files as a project\nShare YAML configuration across formats\nExamples of project: website, book\nDefined in _quarto.yml\n\nproject:\n  output-dir: _output\n\ntoc: true\nnumber-sections: true\n  \nformat:\n  html:\n    css: styles.css\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n\n\nDirectory level metadata is also allowed\nDefined in _metadata.yml\n\nformat:\n  revealjs: \n    menu: false\n    progress: false\nsearch: false\n\nYAML merging priority:\nroot &lt; directory level &lt; document\nRender all files: quarto render\n\n\n\n\n\nProject documentation"
  },
  {
    "objectID": "slides/quarto/index.html#interactive-documents",
    "href": "slides/quarto/index.html#interactive-documents",
    "title": "Literate programming with Quarto",
    "section": "Interactive documents",
    "text": "Interactive documents\n\nMake documents interactive using htmlwidgets, Shiny or ObservableJS\nObservableJS and htmlwidgets run in the browser\nShiny generally requires a server\n\nInteractive documentation"
  },
  {
    "objectID": "slides/quarto/index.html#htmlwidgets",
    "href": "slides/quarto/index.html#htmlwidgets",
    "title": "Literate programming with Quarto",
    "section": "htmlwidgets",
    "text": "htmlwidgets\n\n\nR package plotly provides R binding around javascript plotting library plotly.\n```{r}\nlibrary(plotly)\niris %&gt;%\n    plot_ly(x = ~Sepal.Length, y = ~Sepal.Width, \n    color = ~Species, width = 550, height = 400) %&gt;%\n    add_markers()\n```"
  },
  {
    "objectID": "slides/quarto/index.html#observablejs",
    "href": "slides/quarto/index.html#observablejs",
    "title": "Literate programming with Quarto",
    "section": "ObservableJS",
    "text": "ObservableJS\nQuarto supports OJS for interactive visualizations in the browser\n\n\n\nirism &lt;- iris\ncolnames(irism) &lt;- gsub(\"[.]\",\"_\",tolower(colnames(irism)))\nojs_define(ojsd = irism)\n\n\nojsdata = transpose(ojsd)\nviewof x = Inputs.select(Object.keys(ojsdata[0]), {value: \"sepal_length\", multiple: false, label: \"X axis\"})\nviewof y = Inputs.select(Object.keys(ojsdata[0]), {value: \"sepal_width\", multiple: false, label: \"Y axis\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n  marks: [\n    Plot.dot(ojsdata, {\n      x: x, y: y, fill: \"species\",\n      title: (d) =&gt; `${d.species} \\n Petal length: ${d.petal_length} \\n Sepal length: ${d.sepal_length}`})\n  ],\n  grid: true\n})\n\n\n\n\n\n\n\n\nojsdata = transpose(ojsd)\nviewof x = Inputs.select(Object.keys(ojsdata[0]), {value: \"sepal_length\", multiple: false, label: \"X axis\"})\nviewof y = Inputs.select(Object.keys(ojsdata[0]), {value: \"sepal_width\", multiple: false, label: \"Y axis\"})\nPlot.plot({\n  marks: [\n    Plot.dot(ojsdata, {\n      x: x, y: y, fill: \"species\",\n      title: (d) =&gt; `${d.species} \\n Petal length: ${d.petal_length} \\n Sepal length: ${d.sepal_length}`})\n  ],\n  grid: true\n})"
  },
  {
    "objectID": "slides/quarto/index.html#publish",
    "href": "slides/quarto/index.html#publish",
    "title": "Literate programming with Quarto",
    "section": "Publish",
    "text": "Publish\nQuarto supports directly publishing to several popular services\n\n\nQuarto Pub: Free public publishing for Quarto documents, websites, and books\nGitHub pages\nNetlify\nConfluence\n\n\n\n\nquarto publish quarto-pub\n_publish.yml stores information\n\n- source: project\n  quarto-pub:\n    - id: \"5f3abafe-68f9-4c1d-835b-9d668b892001\"\n      url: \"https://njones.quarto.pub/blog\"\nPublishing documentation"
  },
  {
    "objectID": "slides/quarto/index.html#quarto-from-the-terminal",
    "href": "slides/quarto/index.html#quarto-from-the-terminal",
    "title": "Literate programming with Quarto",
    "section": "Quarto from the terminal",
    "text": "Quarto from the terminal\n&gt;  quarto --help\n\nCommands:\n\nrender          - Render files or projects to various document types.        \npreview         - Render and preview a document or website project.          \nserve           - Serve a Shiny interactive document.                        \ncreate          - Create a Quarto project or extension                       \ncreate-project  - Create a project for rendering multiple documents          \nconvert         - Convert documents to alternate representations.            \npandoc          - Run the version of Pandoc embedded within Quarto.          \nrun             - Run a TypeScript, R, Python, or Lua script.                \nadd             - Add an extension to this folder or project                 \ninstall         - Installs an extension or global dependency.                \npublish         - Publish a document or project. Available providers include:\ncheck           - Verify correct functioning of Quarto installation.         \nhelp            - Show this help or the help of a sub-command. \n&gt;  quarto --version\n1.4.549"
  },
  {
    "objectID": "slides/quarto/index.html#extending-quarto",
    "href": "slides/quarto/index.html#extending-quarto",
    "title": "Literate programming with Quarto",
    "section": "Extending Quarto",
    "text": "Extending Quarto\n\nOfficial quarto extensions\nAwesome Quarto"
  },
  {
    "objectID": "slides/quarto/index.html#acknowledgements",
    "href": "slides/quarto/index.html#acknowledgements",
    "title": "Literate programming with Quarto",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nquarto.org\nAuthoring Quarto\nDatacamp cheatsheet\n\n\n\n\n\nGetting to know Quarto, Julia Müller, R-Ladies Freiburg 2022\n\n\nWelcome to Quarto, Tom Mock, Posit Meetup 2023"
  },
  {
    "objectID": "slides/quarto/index.html#section",
    "href": "slides/quarto/index.html#section",
    "title": "Literate programming with Quarto",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/quarto/index.html#compared-to-rmd",
    "href": "slides/quarto/index.html#compared-to-rmd",
    "title": "Literate programming with Quarto",
    "section": "Compared to Rmd",
    "text": "Compared to Rmd\n\nQuarto is a command-line tool independent of R\nSupports multiple languages seamlessly (R, Python, Julia, Observable)\nYAML options maybe slightly different in quarto. Quarto uses hyphens instead of underscores.\n\ntoc_depth becomes toc-depth\nnumber_sections becomes number-sections\ncode_folding becomes code-fold\n\nChunk options are specified inside the chunk like #| echo: false rather than r{echo=FALSE}\nMany more chunk options are available including figure captions and layout\nCSS classes are easier to use using ::: notation\nMany additional functionality out of the box\n\nPage layouts\nFigure layouts, Figure captions and numbering\nCall-Outs\nCross referencing, Citation, Bibliography\nMargin content\n\nQuarto supports htmlwidgets in R and jupyter widgets for Python/Julia\nClient-side interactivity using ObservableJS"
  },
  {
    "objectID": "slides/quarto/index.html#output-formats",
    "href": "slides/quarto/index.html#output-formats",
    "title": "Literate programming with Quarto",
    "section": "Output formats",
    "text": "Output formats\n\n\n\n\nRmd\nQuarto\n\n\n\n\nhtml_document\nhtml\n\n\npdf_document\npdf\n\n\nword_document\ndocx\n\n\nbeamer_presentation\nbeamer\n\n\npowerpoint_presentation\npptx\n\n\nrevealjs\nrevealjs\n\n\nxaringan\n\n\n\ndistill/tufte\nquarto article layout\n\n\nhtml_document2\nquarto crossref\n\n\npdf_document2\nquarto crossref\n\n\nword_document2\nquarto crossref\n\n\nblogdown/distill\nquarto website/quarto blog\n\n\nbookdown\nquarto books\n\n\nshiny documents\nquarto interactive documents\n\n\npagedown\n\n\n\nrticles\n\n\n\nflexdashboard"
  },
  {
    "objectID": "slides/reticulate/index.html#learning-outcomes",
    "href": "slides/reticulate/index.html#learning-outcomes",
    "title": "Reticulate",
    "section": "Learning outcomes",
    "text": "Learning outcomes\n\nIn this session we will learn to:\n\nUnderstand the concepts needed for running Python in R\nUnderstand the different object classes in Python and their equivalent in R\nApply our knowledge to:\n\nImport Python functions into R\nUse R objects as input to Python functions\nTranslate between Python and R objects"
  },
  {
    "objectID": "slides/reticulate/index.html#introduction",
    "href": "slides/reticulate/index.html#introduction",
    "title": "Reticulate",
    "section": "Introduction",
    "text": "Introduction\n R versus Python The ultimate fight!\n\n Not anymore!"
  },
  {
    "objectID": "slides/reticulate/index.html#introducing-reticulate",
    "href": "slides/reticulate/index.html#introducing-reticulate",
    "title": "Reticulate",
    "section": "Introducing reticulate",
    "text": "Introducing reticulate\n\nCombine Python and R code\nUse R classes in Python functions and vice versa\nImport Python functions into R code and run from R\nAdd Python code chunks to markdown documents\n\n\nlibrary(reticulate)"
  },
  {
    "objectID": "slides/reticulate/index.html#importing-python-modules",
    "href": "slides/reticulate/index.html#importing-python-modules",
    "title": "Reticulate",
    "section": "Importing Python modules",
    "text": "Importing Python modules\n\ndatetime &lt;- import(\"datetime\")\ntodays_r_date &lt;- datetime$datetime$now()\n\n\n\ntodays_r_date\nclass(todays_r_date)\n\n[1] \"2024-06-14 11:21:47 CEST\"\n[1] \"POSIXct\" \"POSIXt\" \n\n\n\n\nObjects are automatically converted to R types, unless otherwise specified"
  },
  {
    "objectID": "slides/reticulate/index.html#importing-python-modules-1",
    "href": "slides/reticulate/index.html#importing-python-modules-1",
    "title": "Reticulate",
    "section": "Importing Python modules",
    "text": "Importing Python modules\n\ndatetime &lt;- import(\"datetime\", convert = FALSE)\ntodays_py_date &lt;- datetime$datetime$now()\n\n\n\ntodays_py_date\nclass(todays_py_date)\n\ndatetime.datetime(2024, 6, 14, 11, 21, 47, 135665)\n[1] \"datetime.datetime\"     \"datetime.date\"         \"python.builtin.object\""
  },
  {
    "objectID": "slides/reticulate/index.html#importing-built-in-python-functions",
    "href": "slides/reticulate/index.html#importing-built-in-python-functions",
    "title": "Reticulate",
    "section": "Importing built-in Python functions",
    "text": "Importing built-in Python functions\nAccess Python’s built-in functions directly in R\n\nbuiltins &lt;- import_builtins()\nr_vec &lt;- c(1, 5, 3, 4, 2, 2, 3, 2)\nstr(r_vec)\n\n num [1:8] 1 5 3 4 2 2 3 2\n\n\nr_vec is an R object."
  },
  {
    "objectID": "slides/reticulate/index.html#importing-built-in-python-functions-1",
    "href": "slides/reticulate/index.html#importing-built-in-python-functions-1",
    "title": "Reticulate",
    "section": "Importing built-in Python functions",
    "text": "Importing built-in Python functions\n\nbuiltins$len(r_vec); builtins$max(r_vec)\n\n[1] 8\n[1] 5\n\n\nPython built-in functions still working on R objects\n\n\nmax(r_vec)\n\n[1] 5\n\n\nNormal R way"
  },
  {
    "objectID": "slides/reticulate/index.html#sourcing-scripts",
    "href": "slides/reticulate/index.html#sourcing-scripts",
    "title": "Reticulate",
    "section": "Sourcing scripts",
    "text": "Sourcing scripts\nImport your own python functions for use in R. File python_functions.py:\n\ndef add(x, y):\n  return x + y"
  },
  {
    "objectID": "slides/reticulate/index.html#sourcing-scripts-1",
    "href": "slides/reticulate/index.html#sourcing-scripts-1",
    "title": "Reticulate",
    "section": "Sourcing scripts",
    "text": "Sourcing scripts\nImport your own python functions for use in R.\nR code:\n\nsource_python(\"python_functions.py\")\nclass(4)\nres &lt;- add(4,5)\nres\nclass(res)\n\n[1] \"numeric\"\n[1] 9\n[1] \"numeric\""
  },
  {
    "objectID": "slides/reticulate/index.html#sourcing-scripts-2",
    "href": "slides/reticulate/index.html#sourcing-scripts-2",
    "title": "Reticulate",
    "section": "Sourcing scripts",
    "text": "Sourcing scripts\nImport your own python functions for use in R.\nR code:\n\nsource_python(\"python_functions.py\")\nclass(4)\nres &lt;- add(4,5)\nres\nclass(res)\n\nType numeric in and type numeric out. But what happens in between?"
  },
  {
    "objectID": "slides/reticulate/index.html#sourcing-scripts-3",
    "href": "slides/reticulate/index.html#sourcing-scripts-3",
    "title": "Reticulate",
    "section": "Sourcing scripts",
    "text": "Sourcing scripts\nBut what happens in between?\nFile python_functions.py:\n\ndef add_with_print(x, y):\n  print(x, 'is of the python type ', type(x))\n  return x + y\n\n\nres2 &lt;- add_with_print(4,5)\nstr(res2)\n\n4.0 is of the python type  &lt;class 'float'&gt;\n num 9"
  },
  {
    "objectID": "slides/reticulate/index.html#execute-python-code",
    "href": "slides/reticulate/index.html#execute-python-code",
    "title": "Reticulate",
    "section": "Execute Python code",
    "text": "Execute Python code\nRun python string:\n\npy_run_string(\"result = [1,2,3]*2\")\npy$result\n\n[1] 1 2 3 1 2 3\n\n\nAll objects created by python are accessible using the py object exported by reticulate"
  },
  {
    "objectID": "slides/reticulate/index.html#execute-python-code-1",
    "href": "slides/reticulate/index.html#execute-python-code-1",
    "title": "Reticulate",
    "section": "Execute Python code",
    "text": "Execute Python code\nRun python script my_python_script.py:\n\ndef add(x, y):\n  return x + y\n\ndef multiply_by_3(x):\n  return x*3\n\ndef run_all():\n  x = 5\n  y = 8\n  added = add(x, y)\n  final = multiply_by_3(added)\n  return final\n\nfinal = run_all()"
  },
  {
    "objectID": "slides/reticulate/index.html#section",
    "href": "slides/reticulate/index.html#section",
    "title": "Reticulate",
    "section": "",
    "text": "py_run_file(\"my_python_script.py\")\npy$final\n\n[1] 39"
  },
  {
    "objectID": "slides/reticulate/index.html#python-in-r-markdown",
    "href": "slides/reticulate/index.html#python-in-r-markdown",
    "title": "Reticulate",
    "section": "Python in R Markdown",
    "text": "Python in R Markdown\nIn R Markdown, it is possible to mix in Python chunks:\n```{python}\nimport pandas as pd\n\nmovies = get_all_movies()\nprint(type(movies))\n```\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;"
  },
  {
    "objectID": "slides/reticulate/index.html#python-in-r-markdown-1",
    "href": "slides/reticulate/index.html#python-in-r-markdown-1",
    "title": "Reticulate",
    "section": "Python in R Markdown",
    "text": "Python in R Markdown\nAccess the movie object using the py object, which will convert movies to an R object:\n\nmovies_r &lt;- py$movies\nmovies_r &lt;- as_tibble(movies_r)\nsubset &lt;- movies_r %&gt;% select(5:6, 8:10)"
  },
  {
    "objectID": "slides/reticulate/index.html#python-in-r-markdown-2",
    "href": "slides/reticulate/index.html#python-in-r-markdown-2",
    "title": "Reticulate",
    "section": "Python in R Markdown",
    "text": "Python in R Markdown\nAccess the movie object using the py object, which will convert movies to an R object:\n\nmovies_r &lt;- py$movies\nmovies_r &lt;- as_tibble(movies_r)\nsubset &lt;- movies_r %&gt;% select(5:6, 8:10)\nknitr::kable(subset[1:7,],'html')\n\n\n\n\noriginalTitle\nstartYear\nruntimeMinutes\ngenres\naverageRating\n\n\n\n\nKate & Leopold\n2001\n118\nComedy,Fantasy,Romance\n6.4\n\n\nThe Brain That Wouldn't Die\n1962\n82\nHorror,Sci-Fi\n4.4\n\n\nThe Fugitive Kind\n1960\n119\nDrama,Romance\n7.1\n\n\nLes yeux sans visage\n1960\n90\nDrama,Horror\n7.7\n\n\nÀ bout de souffle\n1960\n90\nCrime,Drama\n7.8\n\n\n13 Ghosts\n1960\n85\nHorror,Mystery\n6.1\n\n\nThe Alamo\n1960\n162\nAdventure,Drama,History\n6.8"
  },
  {
    "objectID": "slides/reticulate/index.html#python-in-r-markdown-3",
    "href": "slides/reticulate/index.html#python-in-r-markdown-3",
    "title": "Reticulate",
    "section": "Python in R Markdown",
    "text": "Python in R Markdown\nContinue working with the now converted R object in R\n\nggplot(movies_r, aes(x=startYear)) + geom_bar() + \n                                     theme(axis.text.x = element_text(angle = 90)) +\n                                     ggtitle('Number of movies per year')"
  },
  {
    "objectID": "slides/reticulate/index.html#python-in-r-markdown-4",
    "href": "slides/reticulate/index.html#python-in-r-markdown-4",
    "title": "Reticulate",
    "section": "Python in R Markdown",
    "text": "Python in R Markdown\nContinue working with the now converted R object in R\n\nggplot(movies_r, aes(x=startYear)) + geom_bar() + \n                                     theme(axis.text.x = element_text(angle = 90)) +\n                                     ggtitle('Number of movies per year')"
  },
  {
    "objectID": "slides/reticulate/index.html#type-conversions",
    "href": "slides/reticulate/index.html#type-conversions",
    "title": "Reticulate",
    "section": "Type conversions",
    "text": "Type conversions\nWhen calling python code from R, R data types are converted to Python types, and vice versa, when values are returned from Python to R they are converted back to R types."
  },
  {
    "objectID": "slides/reticulate/index.html#conversion-table",
    "href": "slides/reticulate/index.html#conversion-table",
    "title": "Reticulate",
    "section": "Conversion table",
    "text": "Conversion table\n\n\n\n\n\nR\nPython\nExamples\n\n\n\n\nSingle-element vector\nScalar\n1 , 1L , TRUE, foo\n\n\nMulti-element vector\nList\nc(1.0, 2.0, 3.0), c(1L, 2L, 3L)\n\n\nList of multiple types\nTuple\nlist(1L, TRUE, \"foo\")\n\n\nNamed list\nDict\nlist(a = 1L, b = 2.0), dict(x = x_data)\n\n\nMatrix/Array\nNumPy ndarray\nmatrix(c(1,2,3,4), nrow=2, ncol=2)\n\n\nData Frame\nPandas DataFrame\ndata.frame(x = c(1,2,3), y = c(\"a\",\"b\",\"c\"))\n\n\nFunction\nPython function\nfunction(x) x +1\n\n\nRaw\nPython bytearray\nas.raw(c(1:10))\n\n\nNULL, TRUE, FALSE\nNone, True, False\nNULL, TRUE, FALSE"
  },
  {
    "objectID": "slides/reticulate/index.html#type-conversions-1",
    "href": "slides/reticulate/index.html#type-conversions-1",
    "title": "Reticulate",
    "section": "Type conversions",
    "text": "Type conversions\npython_functions.py:\n\ndef check_python_type(x):\n  print(type(x))\n  return x"
  },
  {
    "objectID": "slides/reticulate/index.html#type-conversions-2",
    "href": "slides/reticulate/index.html#type-conversions-2",
    "title": "Reticulate",
    "section": "Type conversions",
    "text": "Type conversions\n\nsource_python(\"python_functions.py\")\n\nr_var &lt;- matrix(c(1,2,3,4),nrow=2, ncol=2)\nclass(r_var)\nr_var2 &lt;- check_python_type(r_var)\nclass(r_var2)\n\n[1] \"matrix\" \"array\" \n&lt;class 'numpy.ndarray'&gt;\n[1] \"matrix\" \"array\""
  },
  {
    "objectID": "slides/reticulate/index.html#type-conversions-3",
    "href": "slides/reticulate/index.html#type-conversions-3",
    "title": "Reticulate",
    "section": "Type conversions",
    "text": "Type conversions\n\nsource_python(\"python_functions.py\", convert=FALSE)\n\nr_var &lt;- matrix(c(1,2,3,4),nrow=2, ncol=2)\nclass(r_var)\nr_var2 &lt;- check_python_type(r_var)\nclass(r_var2)\nr_var3 &lt;- py_to_r(r_var2)\nclass(r_var3)\n\n[1] \"matrix\" \"array\" \n&lt;class 'numpy.ndarray'&gt;\n[1] \"numpy.ndarray\"         \"python.builtin.object\"\n[1] \"matrix\" \"array\""
  },
  {
    "objectID": "slides/reticulate/index.html#type-conversions-4",
    "href": "slides/reticulate/index.html#type-conversions-4",
    "title": "Reticulate",
    "section": "Type conversions",
    "text": "Type conversions\n\n42 in R is a floating point number. In Python it is an integer\n\n\nstr(42)\ncheck_python_type(42)\n\n num 42\n&lt;class 'float'&gt;\n42.0\n\n\n\n\nstr(42L)\ncheck_python_type(42L)\n\n int 42\n&lt;class 'int'&gt;\n42"
  },
  {
    "objectID": "slides/reticulate/index.html#examples-in-bioinformatics",
    "href": "slides/reticulate/index.html#examples-in-bioinformatics",
    "title": "Reticulate",
    "section": "Examples in bioinformatics",
    "text": "Examples in bioinformatics\nRandom forest classifier\n\nconda_install(\"raukr-reticulate\", \"scikit-learn\")"
  },
  {
    "objectID": "slides/reticulate/index.html#section-1",
    "href": "slides/reticulate/index.html#section-1",
    "title": "Reticulate",
    "section": "",
    "text": "# Import scikit-learn's random forest classifier\nsklearn &lt;- import(\"sklearn.ensemble\")\nRandomForestClassifier &lt;- sklearn$RandomForestClassifier\n\n# Create a random forest classifier\nclf &lt;- RandomForestClassifier(n_estimators=100L)\n\n# Training data (example)\nX_train &lt;- matrix(runif(1000), ncol=10)\ny_train &lt;- sample(c(0, 1), 100, replace=TRUE)\n\n# Train the model\nclf$fit(X_train, y_train)\n\n# Predict on new data\nX_test &lt;- matrix(runif(200), ncol=10)\npredictions &lt;- clf$predict(X_test)\npredictions\n\nRandomForestClassifier()\n [1] 0 0 1 1 1 0 0 1 0 0 1 1 1 0 1 0 1 0 1 1"
  },
  {
    "objectID": "slides/reticulate/index.html#examples-in-bioinformatics-1",
    "href": "slides/reticulate/index.html#examples-in-bioinformatics-1",
    "title": "Reticulate",
    "section": "Examples in bioinformatics",
    "text": "Examples in bioinformatics\nENSEMBL API\n\nconda_install(\"raukr-reticulate\", \"ensembl-rest\", pip=TRUE)"
  },
  {
    "objectID": "slides/reticulate/index.html#section-2",
    "href": "slides/reticulate/index.html#section-2",
    "title": "Reticulate",
    "section": "",
    "text": "# Load the ensembl_rest library\nensembl_rest &lt;- import(\"ensembl_rest\")\n\n# Fetch gene information for a given gene ID\ngene_info &lt;- ensembl_rest$symbol_lookup(species='homo sapiens', symbol='BRCA2')\n\n# Print gene information\ngene_info$description\n\n[1] \"BRCA2 DNA repair associated [Source:HGNC Symbol;Acc:HGNC:1101]\""
  },
  {
    "objectID": "slides/reticulate/index.html#examples-in-bioinformatics-2",
    "href": "slides/reticulate/index.html#examples-in-bioinformatics-2",
    "title": "Reticulate",
    "section": "Examples in bioinformatics",
    "text": "Examples in bioinformatics\nHuggingface models\n\nconda_install(\"raukr-reticulate\", \"pytorch\", channel = \"pytorch\")\nconda_install(\"raukr-reticulate\", \"transformers\", pip=TRUE)"
  },
  {
    "objectID": "slides/reticulate/index.html#section-3",
    "href": "slides/reticulate/index.html#section-3",
    "title": "Reticulate",
    "section": "",
    "text": "# Load the transformers library\ntransformers &lt;- import(\"transformers\")\n\n# Load the pipeline for summarization\nsummarizer &lt;- transformers$pipeline(\"summarization\", model=\"Falconsai/text_summarization\")"
  },
  {
    "objectID": "slides/reticulate/index.html#section-4",
    "href": "slides/reticulate/index.html#section-4",
    "title": "Reticulate",
    "section": "",
    "text": "Text:\nHugging Face: Revolutionizing Natural Language Processing\nIn the rapidly evolving field of Natural Language Processing (NLP), Hugging Face has emerged as a prominent and innovative force. This article will explore the story and significance of Hugging Face, a company that has made remarkable contributions to NLP and AI as a whole. From its inception to its role in democratizing AI, Hugging Face has left an indelible mark on the industry.\nTransformative Innovations Hugging Face is best known for its open-source contributions, particularly the “Transformers” library. This library has become the de facto standard for NLP and enables researchers, developers, and organizations to easily access and utilize state-of-the-art pre-trained language models, such as BERT, GPT-3, and more. These models have countless applications, from chatbots and virtual assistants to language translation and sentiment analysis.\n\nTransformers Library: The Transformers library provides a unified interface for more than 50 pre-trained models, simplifying the development of NLP applications. It allows users to fine-tune these models for specific tasks, making it accessible to a wider audience.\nModel Hub: Hugging Face’s Model Hub is a treasure trove of pre-trained models, making it simple for anyone to access, experiment with, and fine-tune models. Researchers and developers around the world can collaborate and share their models through this platform.\nHugging Face Transformers Community: Hugging Face has fostered a vibrant online community where developers, researchers, and AI enthusiasts can share their knowledge, code, and insights. This collaborative spirit has accelerated the growth of NLP."
  },
  {
    "objectID": "slides/reticulate/index.html#section-5",
    "href": "slides/reticulate/index.html#section-5",
    "title": "Reticulate",
    "section": "",
    "text": "# Example text to summarize\ntext &lt;- \"Hugging Face: Revolutionizing Natural Language Processing. In the rapidly evolving field of Natural Language Processing (NLP), Hugging Face has emerged as a prominent and innovative force. This article will explore the story and significance of Hugging Face, a company that has made remarkable contributions to NLP and AI as a whole. From its inception to its role in democratizing AI, Hugging Face has left an indelible mark on the industry. Transformative Innovations: Hugging Face is best known for its open-source contributions, particularly the Transformers library. This library has become the de facto standard for NLP and enables researchers, developers, and organizations to easily access and utilize state-of-the-art pre-trained language models, such as BERT, GPT-3, and more. These models have countless applications, from chatbots and virtual assistants to language translation and sentiment analysis. 1. Transformers Library: The Transformers library provides a unified interface for more than 50 pre-trained models, simplifying the development of NLP applications. It allows users to fine-tune these models for specific tasks, making it accessible to a wider audience. 2. Model Hub: Hugging Face's Model Hub is a treasure trove of pre-trained models, making it simple for anyone to access, experiment with, and fine-tune models. Researchers and developers around the world can collaborate and share their models through this platform. 3. Hugging Face Transformers Community: Hugging Face has fostered a vibrant online community where developers, researchers, and AI enthusiasts can share their knowledge, code, and insights. This collaborative spirit has accelerated the growth of NLP.\"\n\n# Perform summarization\nsummary &lt;- summarizer(text, max_length=100L, min_length=10L)\nsummary\n\n[[1]]\n[[1]]$summary_text\n[1] \"Hugging Face: Revolutionizing Natural Language Processing (NLP) has emerged as a prominent and innovative force . This article will explore the story and significance of Hugging face . The Transformers library has become the de facto standard for NLP and enables researchers, developers, and organizations to easily access and utilize state-of-the-art pre-trained language models .\""
  },
  {
    "objectID": "slides/reticulate/index.html#section-6",
    "href": "slides/reticulate/index.html#section-6",
    "title": "Reticulate",
    "section": "",
    "text": "Thank you! Questions?\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/shiny/index.html#contents",
    "href": "slides/shiny/index.html#contents",
    "title": "Interactive web apps with Shiny",
    "section": "Contents",
    "text": "Contents\nShiny use cases, App structure, Code execution,\nUI, Widgets, Dynamic UI,\nReactivity, Reactive dynamics,\nError validation, Observers, Reactive values,\nUpdating widgets, Action buttons, Download, Modules, Debugging,\nTheming, Deploy,\nInteractive documents, Extensions"
  },
  {
    "objectID": "slides/shiny/index.html#section-1",
    "href": "slides/shiny/index.html#section-1",
    "title": "Interactive web apps with Shiny",
    "section": "",
    "text": "What is Shiny?\nshiny.posit.co/r/gallery/\nshinyapps.org"
  },
  {
    "objectID": "slides/shiny/index.html#section-2",
    "href": "slides/shiny/index.html#section-2",
    "title": "Interactive web apps with Shiny",
    "section": "",
    "text": "K-means sidebar, simple\n\n\n\n\n\n\n\nMovie explorer sidebar, simple\n\n\n\n\n\n\n\nfreeR simple\n\n\n\n\n\n\n\nSuperZip intermediate, geo\n\n\n\n\n\n\n\nWorkout creator intermediate\n\n\n\n\n\n\n\nWildLift intermediate, dashboard\n\n\n\n\n\n\n\nCovid tracker intermediate\n\n\n\n\n\n\n\nCashflow calc intermediate\n\n\n\n\n\n\n\nGenome browser intermediate\n\n\n\n\n\n\n\nSpecies selection adv\n\n\n\n\n\n\n\nProtein structure adv, dashboard\n\n\n\n\n\n\n\nCommute explorer adv, geo\n\n\n\n\n\n\n\nSteam explorer adv, dashboard\n\n\n\n\n\n\n\nSystem pipe adv, dashboard\n\n\n\n\n\n\n\nShark attack adv"
  },
  {
    "objectID": "slides/shiny/index.html#what-is-shiny",
    "href": "slides/shiny/index.html#what-is-shiny",
    "title": "Interactive web apps with Shiny",
    "section": "What is shiny?",
    "text": "What is shiny?\n\nStandalone web applications\nInteractive RMarkdown/Quarto documents\nGadgets/RStudio extensions\nCompletely created using R\nNeeds a server (live R environment)"
  },
  {
    "objectID": "slides/shiny/index.html#app-organization",
    "href": "slides/shiny/index.html#app-organization",
    "title": "Interactive web apps with Shiny",
    "section": "App organization",
    "text": "App organization\nOne file format\n\n\n\napp.r\n\nui &lt;- fluidPage()\nserver &lt;- function(input,output) {}\nshinyApp(ui=ui,server=server)\n\n\n\nTwo file format\n\n\n\nui.r\n\nui &lt;- fluidPage()\n\n\n\n\n\nserver.r\n\nserver &lt;- function(input,output) {}"
  },
  {
    "objectID": "slides/shiny/index.html#running-the-app",
    "href": "slides/shiny/index.html#running-the-app",
    "title": "Interactive web apps with Shiny",
    "section": "Running the app",
    "text": "Running the app\n\nRun shiny::runApp(\"path/to/folder\")\n\n\n\nUse shinyApp()\n\n\nshinyApp(\n  ui=fluidPage(),\n  server=function(input,output) {}\n)\n\n\n\n\nRunning as a separate process from terminal\n\nR -e \"shiny::runApp('~/shinyapp')\"\n\n\n\nFrom Rmd file using rmarkdown::run()"
  },
  {
    "objectID": "slides/shiny/index.html#section-3",
    "href": "slides/shiny/index.html#section-3",
    "title": "Interactive web apps with Shiny",
    "section": "",
    "text": "User Interface (UI)"
  },
  {
    "objectID": "slides/shiny/index.html#ui",
    "href": "slides/shiny/index.html#ui",
    "title": "Interactive web apps with Shiny",
    "section": "UI",
    "text": "UI\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  titlePanel(\"Title Panel\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Sidebar Panel\")\n    ),\n    mainPanel(\n      \"hello\"\n    )\n  )\n),\nserver=function(input,output) {})"
  },
  {
    "objectID": "slides/shiny/index.html#language-of-the-web-html-css-javascript",
    "href": "slides/shiny/index.html#language-of-the-web-html-css-javascript",
    "title": "Interactive web apps with Shiny",
    "section": "Language of the web: HTML, CSS & Javascript",
    "text": "Language of the web: HTML, CSS & Javascript\n\n\nHypertext Markup Language (HTML)\n\nAll UI code is translated to HTML\nInspect with browser\n\n\nsidebarPanel(helpText(\"Sidebar Panel\"))\n\n&lt;div class=\"col-sm-4\"&gt;\n  &lt;form class=\"well\" role=\"complementary\"&gt;\n    &lt;span class=\"help-block\"&gt;Sidebar Panel&lt;/span&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n\nCascading style sheet (CSS)\n\nShiny is built on Bootstrap 3"
  },
  {
    "objectID": "slides/shiny/index.html#section-4",
    "href": "slides/shiny/index.html#section-4",
    "title": "Interactive web apps with Shiny",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 300\nshinyApp(\nui=fluidPage(\n  titlePanel(\"Title Panel\"),\n  sidebarLayout(sidebarPanel(helpText(\"Sidebar Panel\")),\n    mainPanel(tabsetPanel(\n                tabPanel(\"tab1\",\n                         fluidRow(\n                           column(6,helpText(\"Col1\")),\n                           column(6,\n                                  helpText(\"Col2\"),\n                                  fluidRow(\n                                    column(4,style=\"background-color:#b0c6fb\",helpText(\"Col1\")),\n                                    column(4,style=\"background-color:#ffa153\",helpText(\"Col2\")),\n                                    column(4,style=\"background-color:#b1f6c6\",helpText(\"Col3\"))\n                                  )\n                           )\n                         )\n                ),\n                tabPanel(\"tab2\",\n                         inputPanel(helpText(\"Input Panel\"))\n                ),\n                tabPanel(\"tab3\",\n                  wellPanel(helpText(\"Well Panel\"))\n                )\n              )\n    )\n  )\n),\nserver=function(input,output) {})"
  },
  {
    "objectID": "slides/shiny/index.html#ui-widgets-input",
    "href": "slides/shiny/index.html#ui-widgets-input",
    "title": "Interactive web apps with Shiny",
    "section": "UI • Widgets • Input",
    "text": "UI • Widgets • Input\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  fluidRow(\n    column(4,\n           selectInput(\"select-input\",\n                       label=\"selectInput\",\n                       choices=c(\"A\",\"B\",\"C\")),\n    )\n  )\n),\nserver=function(input,output) {\n})\n\n\n?selectInput\nselectInput(inputId, label, choices, selected = NULL, multiple = FALSE, \n            selectize = TRUE, width = NULL, size = NULL\n)\n\n\nInput ID has to be unique"
  },
  {
    "objectID": "slides/shiny/index.html#ui-widgets-input-1",
    "href": "slides/shiny/index.html#ui-widgets-input-1",
    "title": "Interactive web apps with Shiny",
    "section": "UI • Widgets • Input",
    "text": "UI • Widgets • Input\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  fluidRow(\n    column(4,\n           fileInput(\"file-input\",\"fileInput:\"),\n           selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n           sliderInput(\"slider-input\",label=\"sliderInput\",value=5,min=1,max=10),\n           numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n           textInput(\"text-input\",label=\"textInput\"),\n           textAreaInput(\"text-area-input\",label=\"textAreaInput\"),\n           dateInput(\"date-input\",label=\"dateInput\"),\n           dateRangeInput(\"date-range-input\",label=\"dateRangeInput\"),\n           radioButtons(\"radio-button\",label=\"radioButtons\",choices=c(\"A\",\"B\",\"C\"),inline=T),\n           checkboxInput(\"checkbox\",\"checkboxInput\",value=FALSE),\n           actionButton(\"action-button\",\"Action\"),\n           hr(),\n           submitButton()\n    )\n  )\n),\nserver=function(input,output) {\n})\n\n\nWidgets gallery\n\nWidgets are visual objects on a page to allow for data input. Input and output variables."
  },
  {
    "objectID": "slides/shiny/index.html#ui-widgets-input-functions",
    "href": "slides/shiny/index.html#ui-widgets-input-functions",
    "title": "Interactive web apps with Shiny",
    "section": "UI • Widgets • Input Functions",
    "text": "UI • Widgets • Input Functions\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ncheckboxInput()\nCheckbox\n\n\ncheckboxGroupInput()\nCheckbox group\n\n\nradioButtons()\nRadio buttons\n\n\ndateInput()\nSingle date\n\n\ndateRangeInput()\nDate range\n\n\nfileInput()\nUpload file\n\n\nnumericInput()\nInput number\n\n\nsliderInput()\nInput number\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ntextInput()\nSingle line text input\n\n\ntextAreaInput()\nMulti-line text input\n\n\npasswordInput()\nPassword input\n\n\nselectInput()\nDropdown selection\n\n\nactionButton()\nAction button\n\n\nsubmitButton()\nSubmit button\n\n\ntabsetPanel()\nTabset panel\n\n\nnavbarPage()\nPage with navbar\n\n\n\n\n\nWidgets gallery"
  },
  {
    "objectID": "slides/shiny/index.html#ui-widgets-outputs",
    "href": "slides/shiny/index.html#ui-widgets-outputs",
    "title": "Interactive web apps with Shiny",
    "section": "UI • Widgets • Outputs",
    "text": "UI • Widgets • Outputs\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n           textInput(\"text_input\",label=\"textInput\",value=\"hello world\"),\n           textOutput(\"text_output\")\n    ),\nserver=function(input, output) {\n  output$text_output &lt;- renderText({input$text_input})\n})\n\n\n?textOutput\ntextOutput(outputId)\n\n\nOutput ID has to be unique"
  },
  {
    "objectID": "slides/shiny/index.html#ui-widgets-outputs-1",
    "href": "slides/shiny/index.html#ui-widgets-outputs-1",
    "title": "Interactive web apps with Shiny",
    "section": "UI • Widgets • Outputs",
    "text": "UI • Widgets • Outputs\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(fluidRow(column(5,\n           textInput(\"text_input\",label=\"textInput\",value=\"&lt;h3 style='color:red'&gt;Red text&lt;/h3&gt;\"),\n           hr(),\n           htmlOutput(\"html_output\"),\n           textOutput(\"text_output\"),\n           verbatimTextOutput(\"verbatim_text_output\"),\n           tableOutput(\"table_output\"),\n           plotOutput(\"plot_output\",width=\"300px\",height=\"300px\")\n    ))),\n\nserver=function(input, output) {\n  output$html_output &lt;- renderText({input$text_input})\n  output$text_output &lt;- renderText({input$text_input})\n  output$verbatim_text_output &lt;- renderText({input$text_input})\n  output$table_output &lt;- renderTable({iris[1:3,1:3]})\n  output$plot_output &lt;- renderPlot({\n    plot(iris[,1],iris[,2])\n  })\n})"
  },
  {
    "objectID": "slides/shiny/index.html#ui-widgets-output-functions",
    "href": "slides/shiny/index.html#ui-widgets-output-functions",
    "title": "Interactive web apps with Shiny",
    "section": "UI • Widgets • Output Functions",
    "text": "UI • Widgets • Output Functions\n\n\n\nOutput\nRenderer\nDescription\n\n\n\n\ntextOutput()\nrenderText()/renderPrint()\nStandard text\n\n\nverbatimTextOutput()\nrenderText()/renderPrint()\nMonospaced text\n\n\nhtmlOutput()\nrenderText()/renderPrint()\nHTML text output\n\n\nplotOutput()\nrenderPlot()\nCreate and display image\n\n\nimageOutput()\nrenderImage()\nDisplay existing image\n\n\ntableOutput()\nrenderTable()\nTable output\n\n\nuiOutput()\nrenderUI()\nHTML components"
  },
  {
    "objectID": "slides/shiny/index.html#a-complete-app",
    "href": "slides/shiny/index.html#a-complete-app",
    "title": "Interactive web apps with Shiny",
    "section": "A complete app",
    "text": "A complete app\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui = fluidPage(\n  h3(\"Temperature Converter\"),\n  numericInput(\"celsius\", \"Degrees Celsius:\", value = 0),\n  textOutput(\"fahrenheit\")\n),\n\nserver = function(input, output) {\n  output$fahrenheit &lt;- renderText({\n    paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  })\n})"
  },
  {
    "objectID": "slides/shiny/index.html#rendering-ui",
    "href": "slides/shiny/index.html#rendering-ui",
    "title": "Interactive web apps with Shiny",
    "section": "Rendering UI",
    "text": "Rendering UI\n\nUI elements are created conditionally using uiOutput()/renderUI()\n\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"type\",label=\"Select input type\", choices=c(\"Text\",\"Number\")),\n  uiOutput(\"ui\"),\n  textOutput(\"text_output\"),\n),\n\nserver=function(input, output) {\n  \n output$ui &lt;- renderUI({\n    if(input$type==\"Text\") {\n      textInput(\"input_text\",\"Enter text\")\n    }else{\n      sliderInput(\"input_number\", \"Select number\", value=5, min=1, max=10)\n    }\n  })\n  \n  output$text_output &lt;- renderText({\n    if(input$type==\"Text\") {\n      input$input_text\n    }else{\n      input$input_number\n    }\n  })\n})\n\n\nOther options include conditionalPanel(), insertUI() and removeUI()"
  },
  {
    "objectID": "slides/shiny/index.html#rendering-ui-1",
    "href": "slides/shiny/index.html#rendering-ui-1",
    "title": "Interactive web apps with Shiny",
    "section": "Rendering UI",
    "text": "Rendering UI\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  selectInput(\"type\", label=\"Select input type\", choices=c(\"Text\",\"Number\")),\n  uiOutput(\"ui\"),\n  textOutput(\"text_output\"),\n),\n\nserver=function(input, output) {\n  \n output$ui &lt;- renderUI({\n    if(input$type==\"Text\") {\n      textInput(\"input_text\", \"Enter text\", value=\"hello\")\n    }else{\n      sliderInput(\"input_number\", \"Select number\", value=5, min=1, max=10)\n    }\n  })\n  \n  output$text_output &lt;- renderText({\n    if(input$type==\"Text\") {\n      input$input_text\n    }else{\n      input$input_number\n    }\n  })\n})"
  },
  {
    "objectID": "slides/shiny/index.html#rendering-ui-2",
    "href": "slides/shiny/index.html#rendering-ui-2",
    "title": "Interactive web apps with Shiny",
    "section": "Rendering UI",
    "text": "Rendering UI\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table\"),\n  uiOutput(\"ui\")\n),\n\nserver=function(input, output) {\n  \n  data &lt;- reactive({ get(input$data, 'package:datasets') })\n  \n output$ui &lt;- renderUI({\n  if(input$data==\"iris\") plotOutput(\"plot\",width=\"400px\")\n  })\n  \n  output$plot &lt;- renderPlot({hist(data()[, 1])})\n  output$table &lt;- renderTable({head(data())})\n})"
  },
  {
    "objectID": "slides/shiny/index.html#rendering-ui-3",
    "href": "slides/shiny/index.html#rendering-ui-3",
    "title": "Interactive web apps with Shiny",
    "section": "Rendering UI",
    "text": "Rendering UI\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  sliderInput(\"persons\",label=\"Select number of persons\", value=1, min=1,max=4),\n  uiOutput(\"ui\")\n),\n\nserver=function(input, output) {\n  output$ui &lt;- renderUI({\n    lapply(1:input$persons, function(i) {\n         div(\n           textInput(paste0(\"name\",i),\"Enter name:\",paste0(\"Person \",i)),\n           textInput(paste0(\"tel\",i),\"Enter phone number:\",value = \"0773921562\"),\n           hr()\n         )\n    })\n  })\n})"
  },
  {
    "objectID": "slides/shiny/index.html#section-5",
    "href": "slides/shiny/index.html#section-5",
    "title": "Interactive web apps with Shiny",
    "section": "",
    "text": "Reactive programming"
  },
  {
    "objectID": "slides/shiny/index.html#reactivity",
    "href": "slides/shiny/index.html#reactivity",
    "title": "Interactive web apps with Shiny",
    "section": "Reactivity",
    "text": "Reactivity\n\nCode doesn’t always run line-by-line (Non-linear execution)\nCode executes when dependencies change\n\n\nreactlog"
  },
  {
    "objectID": "slides/shiny/index.html#reactives",
    "href": "slides/shiny/index.html#reactives",
    "title": "Interactive web apps with Shiny",
    "section": "Reactives",
    "text": "Reactives\nFunctions with reactive context\n\nreactive(): Defines an expression\nreactiveVal(): Defines single value\nreactiveValues(): Defines a list of values\n\nRegular function fn &lt;- function(): Runs wherever it is is used\nReactive function fn &lt;- reactive(): Runs only when input changes"
  },
  {
    "objectID": "slides/shiny/index.html#reactive-context",
    "href": "slides/shiny/index.html#reactive-context",
    "title": "Interactive web apps with Shiny",
    "section": "Reactive context",
    "text": "Reactive context\nReactive values cannot be accessed outside a reactive context\n\n\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    numericInput(\"num\", \"Enter number\",\n                 value = 1),\n    textOutput(\"result\")\n  ),\n  server = function(input, output) {\n    val = input$num^2\n    output$result &lt;- renderText({\n      paste(\"Squared number is:\", val)\n    })\n  }\n)"
  },
  {
    "objectID": "slides/shiny/index.html#reactive-dynamics",
    "href": "slides/shiny/index.html#reactive-dynamics",
    "title": "Interactive web apps with Shiny",
    "section": "Reactive dynamics",
    "text": "Reactive dynamics\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output\")),\n  server=function(input,output) {\n    output$text_output &lt;- renderText({\n        mean(rnorm(input$num_input))\n    })\n  })"
  },
  {
    "objectID": "slides/shiny/index.html#reactive-dynamics-1",
    "href": "slides/shiny/index.html#reactive-dynamics-1",
    "title": "Interactive web apps with Shiny",
    "section": "Reactive dynamics",
    "text": "Reactive dynamics\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")),\n  server=function(input,output) {\n    output$text_output1 &lt;- renderText({\n      mean(rnorm(input$num_input))\n    })\n    output$text_output2 &lt;- renderText({\n      mean(rnorm(input$num_input))\n    })\n  })"
  },
  {
    "objectID": "slides/shiny/index.html#reactive-dynamics-2",
    "href": "slides/shiny/index.html#reactive-dynamics-2",
    "title": "Interactive web apps with Shiny",
    "section": "Reactive dynamics",
    "text": "Reactive dynamics\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")),\n  server=function(input,output) {\n    rand &lt;- function(x) rnorm(x)\n    output$text_output1 &lt;- renderText({\n      mean(rand(input$num_input))\n    })\n    output$text_output2 &lt;- renderText({\n      mean(rand(input$num_input))\n    })\n  })"
  },
  {
    "objectID": "slides/shiny/index.html#reactive-dynamics-3",
    "href": "slides/shiny/index.html#reactive-dynamics-3",
    "title": "Interactive web apps with Shiny",
    "section": "Reactive dynamics",
    "text": "Reactive dynamics\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")\n    ),\n  server=function(input,output) {\n    rand &lt;- reactive({ rnorm(input$num_input) })\n    output$text_output1 &lt;- renderText({\n      mean(rand())\n    })\n    output$text_output2 &lt;- renderText({\n      mean(rand())\n    })\n  })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReactive functions can be use to share output from a common source. They can be used to reduce computation for demanding functions. Reactive values cannot be accessed from outside the reactive environment.\nTry changing the reactive function\nrand &lt;- reactive({ rnorm(input$num_input) })\nto a regular function\nrand &lt;- function(){ rnorm(input$num_input) }\nSaving a reactlog,\n\n# reset log\nreactlogReset()\n# run the app and exit\n# save react log as text\ndput(shiny::reactlog(), file = \"assets/reactlog-reactivity-3.txt\")\n# open and visualize\n\"assets/reactlog-reactivity-3.txt\" |&gt;\n  dget() |&gt;\n  reactlog::reactlog_show()"
  },
  {
    "objectID": "slides/shiny/index.html#error-validation",
    "href": "slides/shiny/index.html#error-validation",
    "title": "Interactive web apps with Shiny",
    "section": "Error validation",
    "text": "Error validation\n\nShiny returns an error with missing or incorrect values\n\n\n\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  getdata &lt;- reactive({ get(input$data_input,'package:datasets') })\n  output$table_output &lt;- renderTable({head(getdata())})\n})"
  },
  {
    "objectID": "slides/shiny/index.html#error-validation-1",
    "href": "slides/shiny/index.html#error-validation-1",
    "title": "Interactive web apps with Shiny",
    "section": "Error validation",
    "text": "Error validation\n\nErrors can be handled in a controlled manner\n\n\n\nvalidate() can be used to check input\nvalidate() using need()\n\n\n\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"unknown\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  getdata &lt;- reactive({ \n  validate(need(try(input$data_input),\"Please select a data set\"))\n    get(input$data_input,'package:datasets') \n    })\n  output$table_output &lt;- renderTable({head(getdata())})\n})"
  },
  {
    "objectID": "slides/shiny/index.html#error-validation-2",
    "href": "slides/shiny/index.html#error-validation-2",
    "title": "Interactive web apps with Shiny",
    "section": "Error validation",
    "text": "Error validation\n\n\n\nvalidate() using custom function\n\n\nvalfn &lt;- function(x) if(is.null(x) | is.na(x) | x==\"\") return(\"Input data is incorrect.\")\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"unknown\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input,output) {\n  getdata &lt;- reactive({ \n  validate(valfn(try(input$data_input)))\n    get(input$data_input,'package:datasets')\n    })\n  output$table_output &lt;- renderTable({head(getdata())})\n})\n\n\n\n\n\n\n\nshiny::req() checks input variable and silently stops execution"
  },
  {
    "objectID": "slides/shiny/index.html#observers",
    "href": "slides/shiny/index.html#observers",
    "title": "Interactive web apps with Shiny",
    "section": "Observers",
    "text": "Observers\nReactive functions that automatically re-executes whenever its dependencies change. Usually used for side-effects rather than returning a value.\nobserve()\nDoesn’t return a value. Constantly runs as long as the app is alive.\nobserveEvent()\nSimilar to observe(), but only re-executes on specific event (like a button click). Doesn’t return a value.\neventReactive()\nSimilar to observeEvent(), but returns a value.\nbindEvent()\nBind an action to a specific event. Similar to observeEvent(), but allows for the event to be determined dynamically. Links an input (like a button) to an output and ensures that reactive expressions are only updated when bound event is triggered.\n\nObservers are reactive functions that run when their dependencies change similar to regular reactive output functions,affect HTML output. Observers are used for side-effect."
  },
  {
    "objectID": "slides/shiny/index.html#updating-widgets",
    "href": "slides/shiny/index.html#updating-widgets",
    "title": "Interactive web apps with Shiny",
    "section": "Updating widgets",
    "text": "Updating widgets\n\nWidgets can be updated once initialized\n\n\n\nExample of a typical UI\n\n\nui = fluidPage(\n  selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n  numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n)\n\n\n\n\nAdd third argument session to server function\nUpdate functions can be used to update input widgets\nobserve({}) monitors for a conditional change\n\n\nserver = function(input,output,session) {\n  observe({\n    if(something) {\n      updateSelectInput(session,\"select-input\",label=\"selectInput\",choices=c(\"D\",\"E\",\"F\"))\n      updateNumericInput(session,\"numeric-input\",label=\"numericInput\",value=10,min=1,max=10)\n    }\n  })}"
  },
  {
    "objectID": "slides/shiny/index.html#updating-widgets-1",
    "href": "slides/shiny/index.html#updating-widgets-1",
    "title": "Interactive web apps with Shiny",
    "section": "Updating widgets",
    "text": "Updating widgets\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"data\", \"Choose a dataset:\", choices = c(\"mtcars\", \"iris\", \"faithful\")),\n    selectInput(\"variable\", \"Choose a variable:\", choices = names(mtcars))\n  ),\n  \n  server = function(input, output, session) {\n    \n    dataset &lt;- reactive({\n      switch(input$data,\n             \"mtcars\" = mtcars,\n             \"iris\" = iris,\n             \"faithful\" = faithful)\n    })\n    \n    observe({\n      updateSelectInput(session,\"variable\",choices=names(dataset()))\n    })\n  }\n)"
  },
  {
    "objectID": "slides/shiny/index.html#updating-widgets-2",
    "href": "slides/shiny/index.html#updating-widgets-2",
    "title": "Interactive web apps with Shiny",
    "section": "Updating widgets",
    "text": "Updating widgets\n\n\n\nInput function\nUpdate function\n\n\n\n\ncheckboxInput()\nupdateCheckboxInput()\n\n\ncheckboxGroupInput()\nupdateCheckboxGroupInput()\n\n\nradioButtons()\nupdateRadioButtons()\n\n\ndateInput()\nupdateDateInput()\n\n\ndateRangeInput()\nupdateDateRangeInput()\n\n\nfileInput()\n\n\n\nnumericInput()\nupdateNumericInput()\n\n\nsliderInput()\nupdateSliderInput()\n\n\ntextInput()\nupdateTextInput()\n\n\ntextAreaInput()\nupdateTextAreaInput()\n\n\npasswordInput()\n\n\n\nselectInput()\nupdateSelectInput()\n\n\nactionButton()\n\n\n\nsubmitButton()\n\n\n\ntabsetPanel()\nupdateTabsetPanel()\n\n\nnavbarPage()\nupdateNavbarPage()"
  },
  {
    "objectID": "slides/shiny/index.html#reactive-values",
    "href": "slides/shiny/index.html#reactive-values",
    "title": "Interactive web apps with Shiny",
    "section": "Reactive values",
    "text": "Reactive values\n\nreactVal() reactValues()\nStore reactive values that can be accessed from any reactive context\n\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    actionButton(\"add\",\"Add\"),\n    actionButton(\"subtract\",\"Subtract\"),\n    textOutput(\"counter\")\n  ),\n  server = function(input, output) {\n    reactive_values &lt;- reactiveValues(counter = 0) \n    \n    observeEvent(input$add, {\n      reactive_values$counter &lt;- reactive_values$counter + 1\n    }) \n    observeEvent(input$subtract, {\n      reactive_values$counter &lt;- reactive_values$counter - 1\n    }) \n  \n    output$counter &lt;- renderText({\n      reactive_values$counter\n    })\n  }\n)"
  },
  {
    "objectID": "slides/shiny/index.html#controlling-reactivity-using-action-buttons",
    "href": "slides/shiny/index.html#controlling-reactivity-using-action-buttons",
    "title": "Interactive web apps with Shiny",
    "section": "Controlling reactivity using action buttons",
    "text": "Controlling reactivity using action buttons\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui = fluidPage(\n  h3(\"Temperature Converter\"),\n  numericInput(\"celsius\", \"Degrees Celsius:\", value = 0),\n  actionButton(\"btn_go\", \"Go!\"),\n  textOutput(\"fahrenheit\")\n),\n\nserver = function(input, output) {\n  evr &lt;- eventReactive(input$btn_go, {\n    paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  })\n  \n  output$fahrenheit &lt;- renderText({\n    evr()\n  })\n  \n  #output$fahrenheit &lt;- renderText({\n  #    paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  #  }) |&gt;\n  #  bindEvent(input$btn_go)\n})"
  },
  {
    "objectID": "slides/shiny/index.html#download-data",
    "href": "slides/shiny/index.html#download-data",
    "title": "Interactive web apps with Shiny",
    "section": "Download • Data",
    "text": "Download • Data\n\nAdd button and downloadHandler() function\n\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\", choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  textOutput(\"text_output\"),\n  downloadButton(\"button_download\",\"Download\")),\nserver=function(input, output) {\n  getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n  output$text_output &lt;- renderText(paste0(\"Selected dataset: \",input$data_input))\n  \n  output$button_download &lt;- downloadHandler(\n  filename = function() {\n     paste0(input$data_input,\".csv\")\n   },\n  content = function(file) {\n     write.csv(getdata(),file,row.names=FALSE,quote=F)\n   })\n})\n\n\nRun in system browser if Rstudio browser doesn’t work"
  },
  {
    "objectID": "slides/shiny/index.html#download-plots",
    "href": "slides/shiny/index.html#download-plots",
    "title": "Interactive web apps with Shiny",
    "section": "Download • Plots",
    "text": "Download • Plots\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  textOutput(\"text_output\"),\n  plotOutput(\"plot_output\",width=\"400px\"),\n  downloadButton(\"button_download\", \"Download\")\n),\n\nserver=function(input, output) {\n  getdata &lt;- reactive({ get(input$data_input, 'package:datasets') })\n  output$text_output &lt;- renderText(paste0(\"Selected dataset: \",input$data_input))\n  output$plot_output &lt;- renderPlot({hist(getdata()[, 1])})\n  \noutput$button_download &lt;- downloadHandler(\n  filename = function() {\n    paste0(input$data_input,\".png\")\n  },\n  content = function(file) {\n    png(file)\n    hist(getdata()[, 1])\n    dev.off()\n  })\n})\n\n\nRun in system browser if Rstudio browser doesn’t work\nSee usage of download buttons"
  },
  {
    "objectID": "slides/shiny/index.html#modules",
    "href": "slides/shiny/index.html#modules",
    "title": "Interactive web apps with Shiny",
    "section": "Modules",
    "text": "Modules\n\nParts of an app can be modularized and reused like mini apps\nThey can be used where needed like functions\nModules have their own namespace\nA module has a UI part and a server part\nDefine namespace using NS()\nModules can be nested"
  },
  {
    "objectID": "slides/shiny/index.html#modules-1",
    "href": "slides/shiny/index.html#modules-1",
    "title": "Interactive web apps with Shiny",
    "section": "Modules",
    "text": "Modules\n#| standalone: true\n#| components: [editor, viewer]\ncounter_ui &lt;- function(id) {\n  ns &lt;- NS(id)\n  div(\n    actionButton(ns(\"btn\"), label = \"Counter\"),\n    textOutput(ns(\"txt\"))\n  )\n}\n\ncounter_server &lt;- function(id) {\n  moduleServer(id, function(input, output, session) {\n    count &lt;- reactiveVal(0)\n    output$txt &lt;- renderText({\n      count(count() + 1)\n      paste0(\"Counter \", id, \":\", count())\n    }) |&gt; bindEvent(input$btn)\n  })\n}\n\nshinyApp(\n  ui = fluidPage(\n    counter_ui(id = \"1\"),\n    counter_ui(id = \"2\")\n  ),\n\n  server = function(input, output, session) {\n    counter_server(\"1\")\n    counter_server(\"2\")\n  }\n)"
  },
  {
    "objectID": "slides/shiny/index.html#debugging-optimizing",
    "href": "slides/shiny/index.html#debugging-optimizing",
    "title": "Interactive web apps with Shiny",
    "section": "Debugging & Optimizing",
    "text": "Debugging & Optimizing\n\n\nprint() statements\nInterrupt execution and inspect environment browser()\nVisualize relationships using reactlog"
  },
  {
    "objectID": "slides/shiny/index.html#debugging-optimizing-1",
    "href": "slides/shiny/index.html#debugging-optimizing-1",
    "title": "Interactive web apps with Shiny",
    "section": "Debugging & Optimizing",
    "text": "Debugging & Optimizing\n\nAssess compute and RAM usage using profvis\n\nSimple profiling using shiny.tictoc"
  },
  {
    "objectID": "slides/shiny/index.html#code-execution",
    "href": "slides/shiny/index.html#code-execution",
    "title": "Interactive web apps with Shiny",
    "section": "Code execution",
    "text": "Code execution\nApp launch\n\nui &lt;- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver &lt;- function(input,output) {\n  output$text_output &lt;- renderText({input$text_input})\n}\n\n\nNew user\n\nui &lt;- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver &lt;- function(input,output) {\n  output$text_output &lt;- renderText({input$text_input})\n}\n\n\n\nWidget update\n\nui &lt;- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver &lt;- function(input,output) {\n  output$text_output &lt;- renderText({input$text_input})\n}"
  },
  {
    "objectID": "slides/shiny/index.html#theming",
    "href": "slides/shiny/index.html#theming",
    "title": "Interactive web apps with Shiny",
    "section": "Theming",
    "text": "Theming\n\n\n\nUse shinythemes\n\n\nlibrary(shinythemes)\nfluidPage(theme = shinytheme(\"cerulean\"))\n\n\nLive theme selector\n\n\nlibrary(shinythemes)\nfluidPage(theme = shinythemes::themeSelector())\n\nshinythemes\n\n#| standalone: true\n#| viewerHeight: 650\nwebr::install(\"shinythemes\")\n\nshinyApp(\n  ui = fluidPage(\n    shinythemes::themeSelector(),\n    sidebarPanel(\n      textInput(\"txt\", \"Text input:\", \"text here\"),\n      sliderInput(\"slider\", \"Slider input:\", 1, 100, 30),\n      actionButton(\"action\", \"Button\"),\n      actionButton(\"action2\", \"Button2\", class = \"btn-primary\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Tab 1\"),\n        tabPanel(\"Tab 2\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)"
  },
  {
    "objectID": "slides/shiny/index.html#theming-1",
    "href": "slides/shiny/index.html#theming-1",
    "title": "Interactive web apps with Shiny",
    "section": "Theming",
    "text": "Theming\n\nUse bslib\n\n\nlibrary(bslib)\nui &lt;- page_fluid(\n  theme = bs_theme(version = 5)\n)\n\n\nLive theme selector\n\n\nlibrary(bslib)\nbs_theme_preview()\n\nbslib, Bootswatch"
  },
  {
    "objectID": "slides/shiny/index.html#theming-using-custom-css",
    "href": "slides/shiny/index.html#theming-using-custom-css",
    "title": "Interactive web apps with Shiny",
    "section": "Theming using custom CSS",
    "text": "Theming using custom CSS\n\nInsert in the head\n\n\nui &lt;- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n      h2 {\n        font-family: 'Yusei Magic', sans-serif;\n      }\"))\n  ))\n\n\nAdd styles directly\n\n\nui &lt;- fluidPage(h2(\"Old Faithful Geyser Data\", style = \"font-size: 2em;\"))\n\n\nLoad custom CSS file placed in www/\n\n\nui &lt;- fluidPage(\n  tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\"))\n)\n\nCSS styling"
  },
  {
    "objectID": "slides/shiny/index.html#deployment",
    "href": "slides/shiny/index.html#deployment",
    "title": "Interactive web apps with Shiny",
    "section": "Deployment",
    "text": "Deployment\n\nR scripts\n\nGitHub\nR Package\n\n\n\n\nContainer (Docker …)\n\n\n\n\nHosting\n\nShinyapps.io\nShiny Server (Free)\nShiny Server Pro\n\n\n\n\n\nAutomatically deploying to shinyapps.io\n\n\nlibrary(rsconnect)\nrsconnect::setAccountInfo(name=\"username\", token=\"HDFGT46YF7TDT6474G47\", secret=\"hdgTDF5FStgdkpJ\")\ndeployApp(appName=\"name\")\n\n\n\nShiny apps user guide, Shiny server guide"
  },
  {
    "objectID": "slides/shiny/index.html#interactive-documents-quarto",
    "href": "slides/shiny/index.html#interactive-documents-quarto",
    "title": "Interactive web apps with Shiny",
    "section": "Interactive documents • Quarto",
    "text": "Interactive documents • Quarto\n---\ntitle: \"Interactive scatterplot\"\nformat: html\nserver: shiny\n---\n\n```{r}\nlibrary(shiny)\nlibrary(ggplot2)\n\nselectInput(\"x_var\", \"X-axis Variable:\", choices=names(mtcars), selected = \"hp\"),\nselectInput(\"y_var\", \"Y-axis Variable:\", choices=names(mtcars), selected = \"mpg\"),\nplotOutput(\"plot\")\n```\n\n```{r}\n#| context: server\noutput$plot &lt;- renderPlot({\n  ggplot(mtcars, aes_string(x = input$x_var, y = input$y_var)) +\n    geom_point() +\n    labs(title = \"Interactive mtcars scatterplot\", \n         x = input$x_var, \n         y = input$y_var)\n})\n```"
  },
  {
    "objectID": "slides/shiny/index.html#interactive-documents-rmarkdown",
    "href": "slides/shiny/index.html#interactive-documents-rmarkdown",
    "title": "Interactive web apps with Shiny",
    "section": "Interactive documents • Rmarkdown",
    "text": "Interactive documents • Rmarkdown\n\nShiny can run in RMarkdown documents. Set YAML runtime: shiny.\n\n---\ntitle: Interactive document\noutput: html_document\nruntime: shiny\n---\n\nShiny widgets can be included directly\n\n```{r}\nselectInput('n_breaks',label='Number of bins:',choices=c(10,20,35,50),selected=20)\n```"
  },
  {
    "objectID": "slides/shiny/index.html#interactive-documents",
    "href": "slides/shiny/index.html#interactive-documents",
    "title": "Interactive web apps with Shiny",
    "section": "Interactive documents",
    "text": "Interactive documents\n\nWhole shiny apps can be included directly\n\n```{r}\nshinyApp(\n  ui=fluidPage(),\n  server=function(input,output) {}\n)\n```\n\nHosted shiny apps can be embedded using &lt;iframe&gt;\n\n&lt;iframe src=\"https://user.shinyapps.io/app\"&gt;&lt;/iframe&gt;"
  },
  {
    "objectID": "slides/shiny/index.html#other-topics",
    "href": "slides/shiny/index.html#other-topics",
    "title": "Interactive web apps with Shiny",
    "section": "Other topics",
    "text": "Other topics\n\nExtended task\nShiny unit tests\nApplications of action buttons\n\nProgress indicators\n\nShinylive\nShinyUIEditor\n…"
  },
  {
    "objectID": "slides/shiny/index.html#extensions",
    "href": "slides/shiny/index.html#extensions",
    "title": "Interactive web apps with Shiny",
    "section": "Extensions",
    "text": "Extensions\n\nNaxstats: Repo collection of shiny extensions\nbslib: Bootswatch themes for shiny\nshinyurl: using URLs to recreate state of an app\nshinypod: Reusable modules\nshinyjs: Custom javascript functionality\nshinyWidgets: Bootstrap 3 custom widgets\nshinyBS: Bootstrap 3 widgets\nshinymanager: Authentication for shiny apps\n…"
  },
  {
    "objectID": "slides/shiny/index.html#learning-community",
    "href": "slides/shiny/index.html#learning-community",
    "title": "Interactive web apps with Shiny",
    "section": "Learning & community",
    "text": "Learning & community\n\n\nDocumentation\n\nPosit Shiny home\nPosit Shiny articles\n\nBooks\n \n\nMastering Shiny Book\nEngineering Shiny Apps\nShiny Interfaces\nMastering shiny solutions\n\n\nConferences\n\nAppsilon: ShinyConf\nJumping Rivers: Shiny in Production\n\nBlogs & Podcasts\n\nPosit Shiny Blog\nShiny Developer Series"
  },
  {
    "objectID": "slides/shiny/index.html#section-6",
    "href": "slides/shiny/index.html#section-6",
    "title": "Interactive web apps with Shiny",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/vectorization/index.html#learning-outcomes",
    "href": "slides/vectorization/index.html#learning-outcomes",
    "title": "Vectorization in R",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of this module, you will:\n\nunderstand how to write more efficient loops\nbe able to vectorize most loops\nunderstand how the apply* functions work\nbe aware of the purrr package\nunderstand what a recursive call is"
  },
  {
    "objectID": "slides/vectorization/index.html#the-simplest-of-all-for-loops",
    "href": "slides/vectorization/index.html#the-simplest-of-all-for-loops",
    "title": "Vectorization in R",
    "section": "The simplest of all for loops",
    "text": "The simplest of all for loops\nSay, we want to add 1 to every element of a vector:\n\nvec &lt;- c(1:5)\nvec\nfor (i in vec) {\n  vec[i] &lt;- vec[i] + 1\n}\nvec\n\n[1] 1 2 3 4 5\n[1] 2 3 4 5 6\n\n\n\nExactly the same can be achieved in R by means of vectorization:\n\nvec &lt;- c(1:5)\nvec + 1\n\n[1] 2 3 4 5 6\n\n\nWhich is better? 😕"
  },
  {
    "objectID": "slides/vectorization/index.html#repeating-actions-vectorization",
    "href": "slides/vectorization/index.html#repeating-actions-vectorization",
    "title": "Vectorization in R",
    "section": "Repeating actions — vectorization",
    "text": "Repeating actions — vectorization\nLet us compare the time of execution of the vectorized version (vector with 10,000 elements):\n\nvec &lt;- c(1:1e6)\npeakRAM::peakRAM(vec &lt;- vec + 1)\n\n\n\n\n\n\n\n\n\n\n\nFunction_Call\nElapsed_Time_sec\nTotal_RAM_Used_MiB\nPeak_RAM_Used_MiB\n\n\n\n\nvec&lt;-vec+1\n0.004\n3.9\n7.7\n\n\n\n\n\n\n\nto the loop version:\n\nvec &lt;- c(1:1e6)\nloop &lt;- function(vec) {\n  for (i in vec) {\n    vec[i] &lt;- vec[i] + 1\n  }\n  return(vec)\n}\npeakRAM::peakRAM(loop(vec))\n\n\n\n\n\n\n\n\n\n\n\nFunction_Call\nElapsed_Time_sec\nTotal_RAM_Used_MiB\nPeak_RAM_Used_MiB\n\n\n\n\nloop(vec)\n0.169\n7.6\n7.7"
  },
  {
    "objectID": "slides/vectorization/index.html#vectorization-the-problem",
    "href": "slides/vectorization/index.html#vectorization-the-problem",
    "title": "Vectorization in R",
    "section": "Vectorization — the problem",
    "text": "Vectorization — the problem\n\nis_a_droid &lt;- function(x) {\n  droids &lt;- c('2-1B', '4-LOM', '8D8', '0-0-0', 'AP-5', 'AZI-3', 'Mister Bones', 'BB-8', 'BB-9E', 'BD-1', 'BT-1', 'C1-10P', 'C-3PO', 'R2-D2')\n  if (x %in% droids) {\n    return(T)\n  } else {\n    return(F)\n  }\n}\n\ntest &lt;- c('Anakin', 'Vader', 'R2-D2', 'AZI-3', 'Luke')\nis_a_droid(test)\n\nError in if (x %in% droids) {: the condition has length &gt; 1"
  },
  {
    "objectID": "slides/vectorization/index.html#vectorization-the-solutions",
    "href": "slides/vectorization/index.html#vectorization-the-solutions",
    "title": "Vectorization in R",
    "section": "Vectorization — the solution(s)",
    "text": "Vectorization — the solution(s)\nThe base::Vectorize way:\n\nvectorized_is_a_droid &lt;- base::Vectorize(is_a_droid, vectorize.args = c('x'))\nvectorized_is_a_droid(test)\n\nAnakin  Vader  R2-D2  AZI-3   Luke \n FALSE  FALSE   TRUE   TRUE  FALSE \n\n\n\nThe apply* way:\n\napply(as.matrix(test), FUN = is_a_droid, MARGIN = 1)\n\n[1] FALSE FALSE  TRUE  TRUE FALSE\n\n\n\n\n\nlapply(test, FUN=is_a_droid) %&gt;% unlist() # list apply\n\n[1] FALSE FALSE  TRUE  TRUE FALSE\n\n\n\n\n\nsapply(test, is_a_droid) # simplified lapply\n\nAnakin  Vader  R2-D2  AZI-3   Luke \n FALSE  FALSE   TRUE   TRUE  FALSE"
  },
  {
    "objectID": "slides/vectorization/index.html#vectorization-the-solutions-1",
    "href": "slides/vectorization/index.html#vectorization-the-solutions-1",
    "title": "Vectorization in R",
    "section": "Vectorization — the solution(s)",
    "text": "Vectorization — the solution(s)\nThe vapply:\n\nvapply(test, is_a_droid, FUN.VALUE = TRUE) # value type-safe sapply \nvapply(test, is_a_droid, FUN.VALUE = 1)\n\nAnakin  Vader  R2-D2  AZI-3   Luke \n FALSE  FALSE   TRUE   TRUE  FALSE \nAnakin  Vader  R2-D2  AZI-3   Luke \n     0      0      1      1      0 \n\n\n\n\nvapply(test, is_a_droid, FUN.VALUE = 'a')\n\nError in vapply(test, is_a_droid, FUN.VALUE = \"a\"): values must be type 'character',\n but FUN(X[[1]]) result is type 'logical'\n\n\n\n\nOr the purrr way:\n\npurrr::map(test, is_a_droid) %&gt;% unlist()\n\n[1] FALSE FALSE  TRUE  TRUE FALSE"
  },
  {
    "objectID": "slides/vectorization/index.html#recursion",
    "href": "slides/vectorization/index.html#recursion",
    "title": "Vectorization in R",
    "section": "Recursion",
    "text": "Recursion\nWhen we explicitly repeat an action using a loop, we talk about iteration. We can also repeat actions by means of recursion, i.e. when a function calls itself. Let us implement a factorial \\(!\\):\n\nfactorial_rec &lt;- function(x) {\n  if (x == 0 || x == 1)\n    return(1)\n  else\n    return(x * factorial_rec(x - 1)) # Recursive call!\n}\nfactorial_rec(5)\n\n[1] 120"
  },
  {
    "objectID": "slides/vectorization/index.html#to-recurse-or-to-iterate",
    "href": "slides/vectorization/index.html#to-recurse-or-to-iterate",
    "title": "Vectorization in R",
    "section": "To recurse or to iterate?",
    "text": "To recurse or to iterate?\nComparing recursion to iteration is like comparing a phillips head screwdriver to a flat head screwdriver. For the most part you could remove any phillips head screw with a flat head, but it would just be easier if you used the screwdriver designed for that screw right?\n\nSome algorithms just lend themselves to recursion because of the way they are designed (Fibonacci sequences, traversing a tree like structure, etc.). Recursion makes the algorithm more succinct and easier to understand (therefore shareable and reusable)\n– StackOverflow"
  },
  {
    "objectID": "slides/vectorization/index.html#loops-avoid-growing-data",
    "href": "slides/vectorization/index.html#loops-avoid-growing-data",
    "title": "Vectorization in R",
    "section": "Loops — avoid growing data",
    "text": "Loops — avoid growing data\nAvoid changing dimensions of an object inside the loop:\n\nv &lt;- c() # Initialize\nfor (i in 1:100) {\n  v &lt;- c(v, i)\n}\n\n\nIt is much better to do it like this:\n\nv &lt;- rep(NA, 100) # Initialize with length\nfor (i in 1:100) {\n  v[i] &lt;- i\n}"
  },
  {
    "objectID": "slides/vectorization/index.html#section-1",
    "href": "slides/vectorization/index.html#section-1",
    "title": "Vectorization in R",
    "section": "",
    "text": "Thank you! Questions?\n\n\n         _                  \nplatform x86_64-pc-linux-gnu\nos       linux-gnu          \nmajor    4                  \nminor    3.2                \n\n\n2024 • SciLifeLab • NBIS • RaukR"
  },
  {
    "objectID": "slides/vectorization/index.html#recursion-iteration",
    "href": "slides/vectorization/index.html#recursion-iteration",
    "title": "Vectorization in R",
    "section": "Recursion = iteration?",
    "text": "Recursion = iteration?\nYes, every iteration can be converted to recursion (Church-Turing conjecture) and vice versa. It is not always obvious, but theoretically it is doable. Let’s see how to implement factorial in iterative manner:\n\nfactorial_iter &lt;- function(x) {\n  if (x == 0 || x == 1)\n    return(1)\n  else {\n    tmp &lt;- 1\n    for (i in 2:x) {\n      tmp &lt;- tmp * i\n    }\n    return(tmp)  \n  }\n}\nfactorial_iter(5)\n\n[1] 120"
  },
  {
    "objectID": "slides/vectorization/index.html#recursion-iteration-really",
    "href": "slides/vectorization/index.html#recursion-iteration-really",
    "title": "Vectorization in R",
    "section": "Recursion == iteration, really?",
    "text": "Recursion == iteration, really?\nMore writing for the iterative version, right? What about the time efficiency?\nThe recursive version:\n\npeakRAM::peakRAM(factorial_rec(1000))\n\nAnd the iterative one:\n\npeakRAM::peakRAM(factorial_iter(1000))\n\n\n\n\n\n\n\n\n\n\n\nFunction_Call\nElapsed_Time_sec\nTotal_RAM_Used_MiB\nPeak_RAM_Used_MiB\n\n\n\n\nfactorial_iter(1000)\n0.007\n0\n0.1"
  }
]