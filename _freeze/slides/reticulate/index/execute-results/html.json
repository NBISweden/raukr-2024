{
  "hash": "3110e10e04ba75822bdc64d73b1f4eff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reticulate\"\nauthor: \"Nina Norgren\"\nimage: \"assets/featured.jpg\"\nformat:\n  revealjs:\n    css: assets/styles.css\n\n---\n\n\n\n## Packages {visibility=\"hidden\"}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Learning outcomes\n\n<br>\n\nIn this session we will learn to:\n\n- Understand the concepts needed for running Python in R\n- Understand the different object classes in Python and their equivalent in R\n- Apply our knowledge to:\n  - Import Python functions into R\n  - Use R objects as input to Python functions\n  - Translate between Python and R objects\n\n## Introduction\n\n<br><br>\n[**R versus Python**]{.center .larger}\n[The ultimate fight!]{.center .largest}\n\n. . .\n\n<br><br><br>\n[Not anymore!]{.center .largest}\n\n## Introducing reticulate\n\n- Combine Python and R code\n- Use R classes in Python functions and vice versa\n- Import Python functions into R code and run from R\n- Add Python code chunks to markdown documents\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n\n\n## Importing Python modules\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatetime <- import(\"datetime\")\ntodays_r_date <- datetime$datetime$now()\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntodays_r_date\nclass(todays_r_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-06-14 11:21:47 CEST\"\n[1] \"POSIXct\" \"POSIXt\" \n```\n\n\n:::\n:::\n\n\n\n. . .\n\nObjects are automatically converted to R types, unless otherwise specified\n\n## Importing Python modules\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatetime <- import(\"datetime\", convert = FALSE)\ntodays_py_date <- datetime$datetime$now()\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntodays_py_date\nclass(todays_py_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndatetime.datetime(2024, 6, 14, 11, 21, 47, 135665)\n[1] \"datetime.datetime\"     \"datetime.date\"         \"python.builtin.object\"\n```\n\n\n:::\n:::\n\n\n\n## Importing built-in Python functions\n\nAccess Python's built-in functions directly in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuiltins <- import_builtins()\nr_vec <- c(1, 5, 3, 4, 2, 2, 3, 2)\nstr(r_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:8] 1 5 3 4 2 2 3 2\n```\n\n\n:::\n:::\n\n\n\n`r_vec` is an R object.\n\n## Importing built-in Python functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuiltins$len(r_vec); builtins$max(r_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n[1] 5\n```\n\n\n:::\n:::\n\n\n\nPython built-in functions still working on R objects\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(r_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\nNormal R way\n\n## Sourcing scripts\n\nImport your own python functions for use in R. File `python_functions.py`:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef add(x, y):\n  return x + y\n```\n:::\n\n\n\n## Sourcing scripts\n\nImport your own python functions for use in R.\n\nR code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"python_functions.py\")\nclass(4)\nres <- add(4,5)\nres\nclass(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n[1] 9\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n## Sourcing scripts\n\nImport your own python functions for use in R.\n\nR code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"python_functions.py\")\nclass(4)\nres <- add(4,5)\nres\nclass(res)\n```\n:::\n\n\n\nType `numeric` in and type `numeric` out. But what happens in between?\n\n## Sourcing scripts\n\nBut what happens in between?\n\nFile `python_functions.py`:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef add_with_print(x, y):\n  print(x, 'is of the python type ', type(x))\n  return x + y\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres2 <- add_with_print(4,5)\nstr(res2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n4.0 is of the python type  <class 'float'>\n num 9\n```\n\n\n:::\n:::\n\n\n\n## Execute Python code\n\nRun python string:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy_run_string(\"result = [1,2,3]*2\")\npy$result\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 1 2 3\n```\n\n\n:::\n:::\n\n\n\nAll objects created by python are accessible using the `py` object exported by **reticulate**\n\n## Execute Python code\n\nRun python script `my_python_script.py`:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef add(x, y):\n  return x + y\n\ndef multiply_by_3(x):\n  return x*3\n\ndef run_all():\n  x = 5\n  y = 8\n  added = add(x, y)\n  final = multiply_by_3(added)\n  return final\n\nfinal = run_all()\n```\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy_run_file(\"my_python_script.py\")\npy$final\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 39\n```\n\n\n:::\n:::\n\n\n\n## Python in R Markdown\n\nIn R Markdown, it is possible to mix in Python chunks:\n\n````\n```{{python}}\nimport pandas as pd\n\nmovies = get_all_movies()\nprint(type(movies))\n```\n````\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\n```\n\n\n:::\n:::\n\n\n\n## Python in R Markdown\n\nAccess the movie object using the `py` object, which will convert movies to an R object:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovies_r <- py$movies\nmovies_r <- as_tibble(movies_r)\nsubset <- movies_r %>% select(5:6, 8:10)\n```\n:::\n\n\n\n## Python in R Markdown\n\nAccess the movie object using the `py` object, which will convert movies to an R object:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovies_r <- py$movies\nmovies_r <- as_tibble(movies_r)\nsubset <- movies_r %>% select(5:6, 8:10)\nknitr::kable(subset[1:7,],'html')\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> originalTitle </th>\n   <th style=\"text-align:left;\"> startYear </th>\n   <th style=\"text-align:right;\"> runtimeMinutes </th>\n   <th style=\"text-align:left;\"> genres </th>\n   <th style=\"text-align:right;\"> averageRating </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Kate &amp; Leopold </td>\n   <td style=\"text-align:left;\"> 2001 </td>\n   <td style=\"text-align:right;\"> 118 </td>\n   <td style=\"text-align:left;\"> Comedy,Fantasy,Romance </td>\n   <td style=\"text-align:right;\"> 6.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> The Brain That Wouldn't Die </td>\n   <td style=\"text-align:left;\"> 1962 </td>\n   <td style=\"text-align:right;\"> 82 </td>\n   <td style=\"text-align:left;\"> Horror,Sci-Fi </td>\n   <td style=\"text-align:right;\"> 4.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> The Fugitive Kind </td>\n   <td style=\"text-align:left;\"> 1960 </td>\n   <td style=\"text-align:right;\"> 119 </td>\n   <td style=\"text-align:left;\"> Drama,Romance </td>\n   <td style=\"text-align:right;\"> 7.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Les yeux sans visage </td>\n   <td style=\"text-align:left;\"> 1960 </td>\n   <td style=\"text-align:right;\"> 90 </td>\n   <td style=\"text-align:left;\"> Drama,Horror </td>\n   <td style=\"text-align:right;\"> 7.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ã€ bout de souffle </td>\n   <td style=\"text-align:left;\"> 1960 </td>\n   <td style=\"text-align:right;\"> 90 </td>\n   <td style=\"text-align:left;\"> Crime,Drama </td>\n   <td style=\"text-align:right;\"> 7.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 13 Ghosts </td>\n   <td style=\"text-align:left;\"> 1960 </td>\n   <td style=\"text-align:right;\"> 85 </td>\n   <td style=\"text-align:left;\"> Horror,Mystery </td>\n   <td style=\"text-align:right;\"> 6.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> The Alamo </td>\n   <td style=\"text-align:left;\"> 1960 </td>\n   <td style=\"text-align:right;\"> 162 </td>\n   <td style=\"text-align:left;\"> Adventure,Drama,History </td>\n   <td style=\"text-align:right;\"> 6.8 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Python in R Markdown\n\nContinue working with the now converted R object in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(movies_r, aes(x=startYear)) + geom_bar() + \n                                     theme(axis.text.x = element_text(angle = 90)) +\n                                     ggtitle('Number of movies per year')\n```\n:::\n\n\n\n## Python in R Markdown\n\nContinue working with the now converted R object in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(movies_r, aes(x=startYear)) + geom_bar() + \n                                     theme(axis.text.x = element_text(angle = 90)) +\n                                     ggtitle('Number of movies per year')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n## Type conversions\n\nWhen calling python code from R, R data types are converted to Python types, and vice versa, when values are returned from Python to R they are converted back to R types.\n\n## Conversion table\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> R </th>\n   <th style=\"text-align:left;\"> Python </th>\n   <th style=\"text-align:left;\"> Examples </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Single-element vector </td>\n   <td style=\"text-align:left;\"> Scalar </td>\n   <td style=\"text-align:left;\"> 1   , 1L  , TRUE, foo </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Multi-element vector </td>\n   <td style=\"text-align:left;\"> List </td>\n   <td style=\"text-align:left;\"> c(1.0, 2.0, 3.0), c(1L, 2L, 3L) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> List of multiple types </td>\n   <td style=\"text-align:left;\"> Tuple </td>\n   <td style=\"text-align:left;\"> list(1L, TRUE, &quot;foo&quot;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Named list </td>\n   <td style=\"text-align:left;\"> Dict </td>\n   <td style=\"text-align:left;\"> list(a = 1L, b = 2.0), dict(x = x_data) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Matrix/Array </td>\n   <td style=\"text-align:left;\"> NumPy ndarray </td>\n   <td style=\"text-align:left;\"> matrix(c(1,2,3,4), nrow=2, ncol=2) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Data Frame </td>\n   <td style=\"text-align:left;\"> Pandas DataFrame </td>\n   <td style=\"text-align:left;\"> data.frame(x = c(1,2,3), y = c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Function </td>\n   <td style=\"text-align:left;\"> Python function </td>\n   <td style=\"text-align:left;\"> function(x) x +1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Raw </td>\n   <td style=\"text-align:left;\"> Python bytearray </td>\n   <td style=\"text-align:left;\"> as.raw(c(1:10)) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NULL, TRUE, FALSE </td>\n   <td style=\"text-align:left;\"> None, True, False </td>\n   <td style=\"text-align:left;\"> NULL, TRUE, FALSE </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Type conversions\n\n`python_functions.py`:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef check_python_type(x):\n  print(type(x))\n  return x\n```\n:::\n\n\n\n## Type conversions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"python_functions.py\")\n\nr_var <- matrix(c(1,2,3,4),nrow=2, ncol=2)\nclass(r_var)\nr_var2 <- check_python_type(r_var)\nclass(r_var2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n<class 'numpy.ndarray'>\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\n\n## Type conversions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"python_functions.py\", convert=FALSE)\n\nr_var <- matrix(c(1,2,3,4),nrow=2, ncol=2)\nclass(r_var)\nr_var2 <- check_python_type(r_var)\nclass(r_var2)\nr_var3 <- py_to_r(r_var2)\nclass(r_var3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n<class 'numpy.ndarray'>\n[1] \"numpy.ndarray\"         \"python.builtin.object\"\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\n\n## Type conversions\n\n- `42` in R is a floating point number. In Python it is an integer\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(42)\ncheck_python_type(42)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num 42\n<class 'float'>\n42.0\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(42L)\ncheck_python_type(42L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n int 42\n<class 'int'>\n42\n```\n\n\n:::\n:::\n\n\n\n\n## Examples in bioinformatics\n\n#### Random forest classifier\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconda_install(\"raukr-reticulate\", \"scikit-learn\")\n```\n:::\n\n\n\n##\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import scikit-learn's random forest classifier\nsklearn <- import(\"sklearn.ensemble\")\nRandomForestClassifier <- sklearn$RandomForestClassifier\n\n# Create a random forest classifier\nclf <- RandomForestClassifier(n_estimators=100L)\n\n# Training data (example)\nX_train <- matrix(runif(1000), ncol=10)\ny_train <- sample(c(0, 1), 100, replace=TRUE)\n\n# Train the model\nclf$fit(X_train, y_train)\n\n# Predict on new data\nX_test <- matrix(runif(200), ncol=10)\npredictions <- clf$predict(X_test)\npredictions\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRandomForestClassifier()\n [1] 0 0 1 1 1 0 0 1 0 0 1 1 1 0 1 0 1 0 1 1\n```\n\n\n:::\n:::\n\n\n## Examples in bioinformatics\n\n#### ENSEMBL API\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconda_install(\"raukr-reticulate\", \"ensembl-rest\", pip=TRUE)\n```\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the ensembl_rest library\nensembl_rest <- import(\"ensembl_rest\")\n\n# Fetch gene information for a given gene ID\ngene_info <- ensembl_rest$symbol_lookup(species='homo sapiens', symbol='BRCA2')\n\n# Print gene information\ngene_info$description\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"BRCA2 DNA repair associated [Source:HGNC Symbol;Acc:HGNC:1101]\"\n```\n\n\n:::\n:::\n\n\n\n## Examples in bioinformatics\n\n#### Huggingface models\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconda_install(\"raukr-reticulate\", \"pytorch\", channel = \"pytorch\")\nconda_install(\"raukr-reticulate\", \"transformers\", pip=TRUE)\n```\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the transformers library\ntransformers <- import(\"transformers\")\n\n# Load the pipeline for summarization\nsummarizer <- transformers$pipeline(\"summarization\", model=\"Falconsai/text_summarization\")\n```\n:::\n\n\n\n## {.scrollable}\n**Text:**  \n\nHugging Face: Revolutionizing Natural Language Processing\n\nIn the rapidly evolving field of Natural Language Processing (NLP), Hugging Face has emerged as a prominent and innovative force. This article will explore the story and significance of Hugging Face, a company that has made remarkable contributions to NLP and AI as a whole. From its inception to its role in democratizing AI, Hugging Face has left an indelible mark on the industry.\n\nTransformative Innovations\nHugging Face is best known for its open-source contributions, particularly the \"Transformers\" library. This library has become the de facto standard for NLP and enables researchers, developers, and organizations to easily access and utilize state-of-the-art pre-trained language models, such as BERT, GPT-3, and more. These models have countless applications, from chatbots and virtual assistants to language translation and sentiment analysis.\n\n1. **Transformers Library:** The Transformers library provides a unified interface for more than 50 pre-trained models, simplifying the development of NLP applications. It allows users to fine-tune these models for specific tasks, making it accessible to a wider audience.\n2. **Model Hub:** Hugging Face's Model Hub is a treasure trove of pre-trained models, making it simple for anyone to access, experiment with, and fine-tune models. Researchers and developers around the world can collaborate and share their models through this platform.\n3. **Hugging Face Transformers Community:** Hugging Face has fostered a vibrant online community where developers, researchers, and AI enthusiasts can share their knowledge, code, and insights. This collaborative spirit has accelerated the growth of NLP.\n\n##\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example text to summarize\ntext <- \"Hugging Face: Revolutionizing Natural Language Processing. In the rapidly evolving field of Natural Language Processing (NLP), Hugging Face has emerged as a prominent and innovative force. This article will explore the story and significance of Hugging Face, a company that has made remarkable contributions to NLP and AI as a whole. From its inception to its role in democratizing AI, Hugging Face has left an indelible mark on the industry. Transformative Innovations: Hugging Face is best known for its open-source contributions, particularly the Transformers library. This library has become the de facto standard for NLP and enables researchers, developers, and organizations to easily access and utilize state-of-the-art pre-trained language models, such as BERT, GPT-3, and more. These models have countless applications, from chatbots and virtual assistants to language translation and sentiment analysis. 1. Transformers Library: The Transformers library provides a unified interface for more than 50 pre-trained models, simplifying the development of NLP applications. It allows users to fine-tune these models for specific tasks, making it accessible to a wider audience. 2. Model Hub: Hugging Face's Model Hub is a treasure trove of pre-trained models, making it simple for anyone to access, experiment with, and fine-tune models. Researchers and developers around the world can collaborate and share their models through this platform. 3. Hugging Face Transformers Community: Hugging Face has fostered a vibrant online community where developers, researchers, and AI enthusiasts can share their knowledge, code, and insights. This collaborative spirit has accelerated the growth of NLP.\"\n\n# Perform summarization\nsummary <- summarizer(text, max_length=100L, min_length=10L)\nsummary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]]$summary_text\n[1] \"Hugging Face: Revolutionizing Natural Language Processing (NLP) has emerged as a prominent and innovative force . This article will explore the story and significance of Hugging face . The Transformers library has become the de facto standard for NLP and enables researchers, developers, and organizations to easily access and utilize state-of-the-art pre-trained language models .\"\n```\n\n\n:::\n:::\n\n\n\n## {background-image=\"/assets/images/cover.jpg\"}\n\n### Thank you! Questions?\n\n[{{< meta current_year >}} â€¢ [SciLifeLab](https://www.scilifelab.se/) â€¢ [NBIS](https://nbis.se/) â€¢ [RaukR](https://nbisweden.github.io/raukr-2024)]{.smaller}\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}