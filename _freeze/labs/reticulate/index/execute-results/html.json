{
  "hash": "2f48ef9d59641e3da1f76d7e4140f1a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"reticulate\"\nauthor: \"Nina Norgren\"\ndescription: \"Combining Python with R.\"\nimage: \"assets/featured.jpg\"\nformat: html\n---\n\n\n\n\n\n::: {.callout-note}\nThese are exercises for practicing to use the `reticulate` package in R. Try to do the exercises yourself before looking at the answers. Some sections have more pure Python code than others, if you feel that your Python skills are rusty, feel free to look at the answers and try your best to follow along. We will be writing some Python code chunks, so use R Markdown for this exercise.\n\nPlease download the following file and unzip the contents before the lab.\n\n<a class=\"btn btn-secondary btn-sm\" href=\"https://www.dropbox.com/scl/fi/iokpz1q7hf43hubo1vsuz/raukr-reticulate.zip?dl=1&rlkey=lvqzox1ueghbpt5emwcuime1u\" role=\"button\">{{< fa download >}} raukr-reticulate.zip</a>\n\n:::\n\n## Setup\n\nLoad the following libraries else install them from CRAN.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(stringr)\n```\n:::\n\n\n\nCreate and activate an environment using Conda.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconda_create(\"raukr-reticulate\", python_version = \"3.12\", packages = c(\"pandas=2.2.1\",\"sqlalchemy=2.0.30\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# activate environment\nuse_condaenv(\"raukr-reticulate\", required = TRUE)\n```\n:::\n\n\n\nTo make sure you will use the correct Python version (and the libraries associated with it), use the keyword `required` when starting your conda environment. The `reticulate` package will figure out which Python version to use, using a specified order. For more information, read the documentation for [Python versions](https://rstudio.github.io/reticulate/articles/versions.html) and [package installation](https://rstudio.github.io/reticulate/articles/python_packages.html).\n\n## IMdB\n\n### Preparations\n\nThe International Movie Database is a large database containing all information about movies, TV series, actors, producers, etc, and the ratings they received. If you are not aware of it, check out their website [imdb.com](https://www.imdb.com/) for more information.\n\nYou will be working on a smaller subset of some of the data listed, which consists of movies, ratings, and the principal actors playing in the movies. You will receive a file with python functions used to query this small database from R, where you will further process the data to answer questions related to different movies and actors. The underlying Python code uses the `sqlalchemy` library for querying the `sqlite` database.\n\nIn preparation for using the Python code in R, make sure that the following files are all located in your working directory:\n\n1. `imdb.db` \n2. `model.py`\n3. `imdb_functions.py`\n\nStart by loading all the python functions into R.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"imdb_functions.py\")\n```\n:::\n\n\n\n::: \n\nFirst, inspect which functions got imported when you sourced your python file. You can find them in the **Environment** table in RStudio. Some of the functions listed are part of the SQLAlchemy package used, but one example to look at is the function `get_actors()`.\n\nAs you can see, R creates a wrapper function in R, for calling the underlying Python function. This specific function takes a movie title as input, and returns the principal actors of the movie. You can further study what the function does by looking at the code in the `imdb_functions.py` file. You can see that it queries the database for a specific movie, and returns the principal actors in it.\n\n### Get to know the data\n\nLet's try out the `get_actors()` function. Get the principal actors for the movie **Gattaca**, and inspect the output type.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactors <- get_actors('Gattaca')\nstr(actors)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 1\n $ Gattaca: chr [1:4] \"Ethan Hawke (Vincent,Jerome)\" \"Uma Thurman (Irene)\" \"Jude Law (Jerome,Eugene)\" \"Gore Vidal (Director Josef)\"\n```\n\n\n:::\n:::\n\n\n\n::: \n\nNext let's do the same with the function `get_movies()`. List movies that **Brent Spiner** has been in.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovies <- get_movies('Brent Spiner')\nstr(movies)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 1\n $ Brent Spiner: chr [1:3] \"Star Trek: First Contact\" \"Star Trek: Insurrection\" \"Star Trek: Nemesis\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\nFor printing some basic information about a movie, without saving anything to an R object, use the `print_movie_info` function. Here, find out information about the **Avengers** movies.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_movie_info('Avengers')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTitle:  The Avengers\nYear:  1998\nRuntime (min):  89\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  3.8\nNumber of votes:  41414 \n\nTitle:  The Avengers\nYear:  2012\nRuntime (min):  143\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  8.0\nNumber of votes:  1283281 \n\nTitle:  Avengers: Age of Ultron\nYear:  2015\nRuntime (min):  141\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  7.3\nNumber of votes:  769172 \n\nTitle:  Avengers: Infinity War\nYear:  2018\nRuntime (min):  149\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  8.4\nNumber of votes:  881191 \n\nTitle:  Avengers: Endgame\nYear:  2019\nRuntime (min):  181\nGenres:  Action,Adventure,Drama\nAverage rating:  8.4\nNumber of votes:  880234 \n```\n\n\n:::\n:::\n\n\n\n:::\n\nCapture the output from the previous function and save it as a variable.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput <- py_capture_output(print_movie_info('Avengers'))\ncat(output)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTitle:  The Avengers\nYear:  1998\nRuntime (min):  89\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  3.8\nNumber of votes:  41414 \n\nTitle:  The Avengers\nYear:  2012\nRuntime (min):  143\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  8.0\nNumber of votes:  1283281 \n\nTitle:  Avengers: Age of Ultron\nYear:  2015\nRuntime (min):  141\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  7.3\nNumber of votes:  769172 \n\nTitle:  Avengers: Infinity War\nYear:  2018\nRuntime (min):  149\nGenres:  Action,Adventure,Sci-Fi\nAverage rating:  8.4\nNumber of votes:  881191 \n\nTitle:  Avengers: Endgame\nYear:  2019\nRuntime (min):  181\nGenres:  Action,Adventure,Drama\nAverage rating:  8.4\nNumber of votes:  880234 \n```\n\n\n:::\n:::\n\n\n\n:::\n\nInspect the types of the variables `actors` and `movies`. What type are they? What type where they converted from in Python?\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(actors)\nstr(movies)\n\n# Both are of the R type `named list`, which is the type a Python `dictionary` gets converted to/from.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 1\n $ Gattaca: chr [1:4] \"Ethan Hawke (Vincent,Jerome)\" \"Uma Thurman (Irene)\" \"Jude Law (Jerome,Eugene)\" \"Gore Vidal (Director Josef)\"\nList of 1\n $ Brent Spiner: chr [1:3] \"Star Trek: First Contact\" \"Star Trek: Insurrection\" \"Star Trek: Nemesis\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\nSource the python file again, but set `convert=FALSE`. What are the types now?\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"imdb_functions.py\", convert = FALSE)\n\nactors <- get_actors('Gattaca')\nclass(actors)\n\nmovies <- get_movies('Brent Spiner')\nclass(movies)\n\n# Now actors and movies are both of the python type dictionary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"python.builtin.dict\"   \"python.builtin.object\"\n[1] \"python.builtin.dict\"   \"python.builtin.object\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\nConvert the types manually back to R types.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactors.r <- py_to_r(actors)\nstr(actors.r)\n\nmovies.r <- py_to_r(movies)\nstr(movies.r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 1\n $ Gattaca: chr [1:4] \"Ethan Hawke (Vincent,Jerome)\" \"Uma Thurman (Irene)\" \"Jude Law (Jerome,Eugene)\" \"Gore Vidal (Director Josef)\"\nList of 1\n $ Brent Spiner: chr [1:3] \"Star Trek: First Contact\" \"Star Trek: Insurrection\" \"Star Trek: Nemesis\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n### Working with Dataframes\n\nIn the following sections we will be working with pandas dataframes in R. The answers we show will mostly be using the Python `pandas` library from R, but there are of course pure R ways of doing the following exercises once we have converted the output from the python functions. You are free to choose how you solve the following exercises, either only python in R, a mix, or pure R. But we encourage you to mix, as you will then practice the type conversions and usages of the `reticulate` library, especially for those of you that are more fluent in Python.\n\n#### The highest ranked movie\n\nThe function `get_all_movies()` from the file `imdb_functions.py` can be used to retrieve all movies, either within a specified time period, or all of the movies in the database. If the imported function has a docstring, you can view the help documentation with:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy_help(get_all_movies)\n```\n:::\n\n\n\nStart by importing all movies into a pandas dataframe, by sourcing the python functions into R. Do *not* convert the result into an R dataframe.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"imdb_functions.py\", convert = FALSE)\nmovies_py <- get_all_movies()\nclass(movies_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"pandas.core.frame.DataFrame\"        \"pandas.core.generic.NDFrame\"       \n[3] \"pandas.core.base.PandasObject\"      \"pandas.core.accessor.DirNamesMixin\"\n[5] \"pandas.core.indexing.IndexingMixin\" \"pandas.core.arraylike.OpsMixin\"    \n[7] \"python.builtin.object\"             \n```\n\n\n:::\n:::\n\n\n\n:::\n\nInspecting the `movies_py` variable we can see that it is of the type `pandas.dataframe`.\n\nNow we are ready to answer our first question:\n\n<h4>**Which movie/movies are the highest ranked of all times?**</h4>\n\nWe will try to answer this with a pandas method *directly* in a Python chunk. To do this we first have to make our `movies_py` variable visible to Python. Even though it is a Python object, since it was created within a R code chunk, Python code chunks cannot directly access them. To make R variables accessible in Python code chunks we use the `r` object. Remember that to access a Python variable from R, we used `py$`, to do the opposite we use `r.`. The $ and the . denotes the different ways in which Python and R represents methods.\n\nUse the method `.max()` from the `pandas` module to find and filter out the top movie/movies.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# the code below is python code written in a python code chunk\nmovies = r.movies_py\n\n# inspect what columns are present\nmovies.columns\n\n# find movies that has the highest averageRating\ntop_movies = movies[movies.averageRating == movies.averageRating.max()]\n\ntop_movies['primaryTitle']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['id', 'tconst', 'titleType', 'primaryTitle', 'originalTitle',\n       'startYear', 'endYear', 'runtimeMinutes', 'genres', 'averageRating',\n       'numVotes'],\n      dtype='object')\n3822    The Shawshank Redemption\n5450             The Chaos Class\nName: primaryTitle, dtype: object\n```\n\n\n:::\n:::\n\n\n:::\n\nAbove we are using pure pandas code directly in our RMarkdown document.\n\nAfter dipping our toes in Python territory, we now go back to using normal R chunks:\n\nSave `top_movies` as an R object, and find out from what years these movies are, and how many votes they got.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll}\nmovies_r <- py$top_movies\ndf <- data.frame(movies_r$primaryTitle, movies_r$startYear, movies_r$numVotes)\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"movies_r.primaryTitle\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"movies_r.startYear\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"movies_r.numVotes\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"The Shawshank Redemption\",\"2\":\"1994\",\"3\":\"2399394\"},{\"1\":\"The Chaos Class\",\"2\":\"1975\",\"3\":\"38290\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nSo the answer to which are the highest ranked movies of all times is **The Shawshank Redemption** and **The Chaos Class**. Although, The Chaos Class did not get as many votes as The Shawshank Redemption.\n\n:::\n\n#### Average ratings over time\n\nNext we want to explore how the average ratings for movies has changed over time. This one we will solve in normal R chunks, by importing the required python functions from the file `imdb_functions.py`, and also load `pandas` into R. As we will be using pandas in R, import the Python file without converting it.\n\nGet all movies and save into a pandas dataframe.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"imdb_functions.py\", convert = FALSE)\nmovies_py <- get_all_movies()\nclass(movies_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"pandas.core.frame.DataFrame\"        \"pandas.core.generic.NDFrame\"       \n[3] \"pandas.core.base.PandasObject\"      \"pandas.core.accessor.DirNamesMixin\"\n[5] \"pandas.core.indexing.IndexingMixin\" \"pandas.core.arraylike.OpsMixin\"    \n[7] \"python.builtin.object\"             \n```\n\n\n:::\n:::\n\n\n\n:::\n\nImport pandas into R\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npandas <- import(\"pandas\")\n```\n:::\n\n\n:::\n\nUse pandas to group the data by startYear, and calculate the average ratings. Next, convert the result back into an R dataframe.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# use pandas to group columns by startYear\nmovies_grouped <- movies_py$groupby('startYear')['averageRating']$mean()\n\n# convert to r dataframe\nmovies_grouped_r <- py_to_r(movies_grouped)\nmovies_grouped_r <- as.data.frame(movies_grouped_r)\n```\n:::\n\n\n\n:::\n\nIn this case the conversion seems to have done something to our columns. To fix this, add startYear column back into the dataframe, using R.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add Year column back to dataframe, and rename columns\nmovies_grouped_r <- cbind(rownames(movies_grouped_r), movies_grouped_r)\ncolnames(movies_grouped_r) <- c(\"startYear\",\"averageRating\")\nmovies_grouped_r[1:4,]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"startYear\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"averageRating\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1915\",\"2\":\"6.300\",\"_rn_\":\"1915\"},{\"1\":\"1916\",\"2\":\"7.700\",\"_rn_\":\"1916\"},{\"1\":\"1919\",\"2\":\"7.300\",\"_rn_\":\"1919\"},{\"1\":\"1920\",\"2\":\"7.425\",\"_rn_\":\"1920\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n:::\n\nMake sure to inspect that the dataframe looks like it is supposed to, and that the values make sense. Once we are sure we have managed to transform the data, we can proceed.\n\nPlot the average ratings for each year.\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(movies_grouped_r, aes(x=startYear, y=averageRating)) + \n                              geom_point() + \n                              theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n                              ggtitle('Average ratings over years')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=1344}\n:::\n:::\n\n\n:::\n\n## Bonus exercises\n\nBelow is 2 bonus exercises if you have time left in the end of the exercise. Do either one or both if you have the time.\n\n### Find overlapping actors\n\nWhich actors have played together with both Ian McKellen and Patrick Stewart, but when they were in separate movies? Or rephrased, which actor has played with Ian McKellen Lee in one movie, and Patrick Stewart in another movie?\n\nFor example:\n\n1. Actor 1 has played with IM in movie a, and with PS in movie b. PS was not in movie a, and IM was not in movie b\n2. Actor 2 has played with IM in movie c, and with PS in movie c. \n\nScenario 1 would count, while scenario 2 would not, as IM and PS was in this movie both together.\n\nTo solve this one you need to think in several steps. There are of course several solutions, and you are free to approach this exercise however you want. We will give you a suggestion to one approach that could be used below:\n\n::: {.callout-tip collapse=\"true\"}\n\n- Get a list of movies where Ian McKellen has played\n- Get a list of movies where Patrick Stewart has played\n- Remove intersections\n- Get all actors for all movies that Ian McKellen was in\n- Get all actors for all movies that Patrick Stewart was in \n- Remove duplicates\n- Get intersection of actors\n\n:::\n\n::: {.callout-tip}\nRemember that this database only has the PRINCIPAL actor of movies, meaning you might have results where an actor has a minor role and is not listed here. If you are unsure if your results are correct, we provide you with a Python function to check your results.\n:::\n\nTo find out if your answer is correct, your can import and use the function `check_results` from the `imdb_functions.py` file. Replace `'Actor Name'` with the name of the actor that you think is the answer to the question above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"imdb_functions.py\")\nres_actor <- 'Actor Name'\ncheck_results(res_actor, 'Ian McKellen', 'Patrick Stewart')\n```\n:::\n\n\n\n<br>\nAnd if you want to see one suggested solution to this problem:\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\"}\n\n## Show code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_python(\"imdb_functions.py\", convert = FALSE)\nact1 <- 'Ian McKellen'\nact2 <- 'Patrick Stewart'\n\n# get movies for Patrick Stewart\nact1_movies <- get_movies(act1)\nact1_movies\nmovies1_lst <- py_to_r(act1_movies[act1])\n\n# get movies for Ian McKellen\nact2_movies <- get_movies(act2)\nact2_movies\nmovies2_lst <- py_to_r(act2_movies[act2])\n\n# get movies both has played in\noverlap <- intersect(movies1_lst, movies2_lst)\n\n# remove overlap from each movielist\nnew_movies1_lst <- setdiff(movies1_lst, overlap)\nnew_movies2_lst <- setdiff(movies2_lst, overlap)\n\n# get all actors that has played in those movies\n# below we do things the functional way for the first \n# movie list\nactors_lst <- purrr::map(new_movies1_lst, \n             ~ .x %>% \n             get_actors() %>% \n             py_to_r() %>% \n             .[[.x]] %>% \n             unlist() %>% \n             str_remove(' \\\\(.*\\\\)')) %>% \n  unlist() \n\n# remove all duplicates\nactors_lst_uniq <- actors_lst %>% unique()\n\n\n# and now, the same for the second movie list, but the \n# non-functional way, using Python-inspired syntax. \n\nactors_lst2 <- character()\n\nfor (movie in new_movies2_lst) {\n  actors <- get_actors(movie)\n  actors_r <- py_to_r(actors[movie])\n  for (actor in actors_r) {\n    a <- strsplit(as.character(actor), '\\\\s*[()]')[[1]]\n    actors_lst2 <- append(actors_lst2, a[1])\n  }\n}\n\nactors_lst2_uniq <- unique(actors_lst2)\n\n# finally, intersect the two lists with actors to\n# find the ones that played with both actors\nintersect(actors_lst_uniq, actors_lst2_uniq)\n## {'Ian McKellen': ['The Keep', 'Six Degrees of Separation', 'Richard III', 'Apt Pupil', 'Gods and Monsters', 'The Lord of the Rings: The Fellowship of the Ring', 'X-Men', 'The Lord of the Rings: The Return of the King', 'The Lord of the Rings: The Two Towers', 'X2: X-Men United', 'The Da Vinci Code', 'Neverwas', 'Flushed Away', 'Stardust', 'The Hobbit: An Unexpected Journey', 'The Hobbit: The Desolation of Smaug', 'X-Men: Days of Future Past', 'The Hobbit: The Battle of the Five Armies', 'Mr. Holmes', 'The Good Liar']}\n## {'Patrick Stewart': ['Star Trek: Generations', 'Star Trek: First Contact', 'Conspiracy Theory', 'Star Trek: Insurrection', 'X-Men', 'Star Trek: Nemesis', 'X2: X-Men United', 'Steamboy', 'X-Men: The Last Stand', 'Earth', 'TMNT', 'African Cats', 'X-Men: Days of Future Past', 'Logan', 'Green Room']}\n## [1] \"Hugh Jackman\"\n```\n:::\n\n\n\n:::\n\nTry some other actors and see what you find. For example, try actors that have played with *Johnny Depp* and *Helena Bonham Carter*.\n\n### Try out examples from slides\n\nIn the slides we looked at a few examples of how we can use reticulate to use python libraries in R:\n\n1. Random forest classification using Scikit-learn\n2. Getting gene information from ENSEMBL's API\n3. Do Natural language processing using Hugging Face models\n\nGo back to the slides and try some of them out! Here you would have to read the documentation for the different libraries. Remember these are Python libraries that you import in R, so the syntax has to be updated as we have discussed previously. ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}